{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Siddhi Execution String The siddhi-execution-string extension is a Siddhi extension that provides basic string handling capabilities such as concat, length, replace all, etc. For information on Siddhi and it's features refer Siddhi Documentation . Download Versions 5.x and above with group id io.siddhi.extension.* from here . Versions 4.x and lower with group id org.wso2.extension.siddhi.* from here . Latest API Docs Latest API Docs is 5.0.3 . Features and ( Aggregate Function ) Returns the results of AND operation for all the events. avg ( Aggregate Function ) Calculates the average for all the events. count ( Aggregate Function ) Returns the count of all the events. distinctCount ( Aggregate Function ) This returns the count of distinct occurrences for a given arg. max ( Aggregate Function ) Returns the maximum value for all the events. maxForever ( Aggregate Function ) This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front. min ( Aggregate Function ) Returns the minimum value for all the events. minForever ( Aggregate Function ) This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front. or ( Aggregate Function ) Returns the results of OR operation for all the events. stdDev ( Aggregate Function ) Returns the calculated standard deviation for all the events. sum ( Aggregate Function ) Returns the sum for all the events. unionSet ( Aggregate Function ) Union multiple sets. This attribute aggregator maintains a union of sets. The given input set is put into the union set and the union set is returned. UUID ( Function ) Generates a UUID (Universally Unique Identifier). cast ( Function ) Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type. coalesce ( Function ) Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type. convert ( Function ) Converts the first input parameter according to the convertedTo parameter. createSet ( Function ) Includes the given input parameter in a java.util.HashSet and returns the set. currentTimeMillis ( Function ) Returns the current timestamp of siddhi application in milliseconds. default ( Function ) Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter eventTimestamp ( Function ) Returns the timestamp of the processed event. ifThenElse ( Function ) Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type. instanceOfBoolean ( Function ) Checks whether the parameter is an instance of Boolean or not. instanceOfDouble ( Function ) Checks whether the parameter is an instance of Double or not. instanceOfFloat ( Function ) Checks whether the parameter is an instance of Float or not. instanceOfInteger ( Function ) Checks whether the parameter is an instance of Integer or not. instanceOfLong ( Function ) Checks whether the parameter is an instance of Long or not. instanceOfString ( Function ) Checks whether the parameter is an instance of String or not. maximum ( Function ) Returns the maximum value of the input parameters. minimum ( Function ) Returns the minimum value of the input parameters. sizeOfSet ( Function ) Returns the size of an object of type java.util.Set. pol2Cart ( Stream Function ) The pol2Cart function calculating the cartesian coordinates x y for the given theta, rho coordinates and adding them as new attributes to the existing events. log ( Stream Processor ) The logger logs the message on the given priority with or without processed event. batch ( Window ) A window that holds an incoming events batch. When a new set of events arrives, the previously arrived old events will be expired. Batch window can be used to aggregate events that comes in batches. If it has the parameter length specified, then batch window process the batch as several chunks. cron ( Window ) This window outputs the arriving events as and when they arrive, and resets (expires) the window periodically based on the given cron expression. delay ( Window ) A delay window holds events for a specific time period that is regarded as a delay period before processing them. externalTime ( Window ) A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp. externalTimeBatch ( Window ) A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime. frequent ( Window ) This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm. length ( Window ) A sliding length window that holds the last 'window.length' events at a given time, and gets updated for each arrival and expiry. lengthBatch ( Window ) A batch (tumbling) length window that holds and process a number of events as specified in the window.length. lossyFrequent ( Window ) This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter. session ( Window ) This is a session window that holds events that belong to a specific session. The events that belong to a specific session are identified by a grouping attribute (i.e., a session key). A session gap period is specified to determine the time period after which the session is considered to be expired. A new event that arrives with a specific value for the session key is matched with the session window with the same session key. There can be out of order and late arrival of events, these events can arrive after the session is expired, to include those events to the matching session key specify a latency time period that is less than the session gap period.To have aggregate functions with session windows, the events need to be grouped by the session key via a 'group by' clause. sort ( Window ) This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order. time ( Window ) A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry. timeBatch ( Window ) A batch (tumbling) time window that holds and process events that arrive during 'window.time' period as a batch. timeLength ( Window ) A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry. inMemory ( Sink ) In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition). log ( Sink ) This is a sink that can be used as a logger. This will log the output events in the output stream with user specified priority and a prefix passThrough ( Sink Mapper ) Pass-through mapper passed events (Event[]) through without any mapping or modifications. inMemory ( Source ) In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition). passThrough ( Source Mapper ) Pass-through mapper passed events (Event[]) through without any mapping or modifications. groupConcat ( Aggregate Function ) This function aggregates the received events by concatenating the keys in those events using a separator, e.g.,a comma (,) or a hyphen (-), and returns the concatenated key string. charAt ( Function ) This function returns the 'char' value that is present at the given index position. of the input string. coalesce ( Function ) This returns the first input parameter value of the given argument, that is not null. concat ( Function ) This function returns a string value that is obtained as a result of concatenating two or more input string values. contains ( Function ) This function returns true if the input.string contains the specified sequence of char values in the search.string . equalsIgnoreCase ( Function ) This returns a boolean value by comparing two strings lexicographically without considering the letter case. fillTemplate ( Function ) This extension replaces the templated positions that are marked with an index value in a specified template with the strings provided. hex ( Function ) This function returns a hexadecimal string by converting each byte of each character in the input string to two hexadecimal digits. length ( Function ) Returns the length of the input string. lower ( Function ) Converts the capital letters in the input string to the equivalent simple letters. regexp ( Function ) Returns a boolean value based on the matchability of the input string and the given regular expression. repeat ( Function ) Repeats the input string for a specified number of times. replaceAll ( Function ) Finds all the substrings of the input string that matches with the given expression, and replaces them with the given replacement string. replaceFirst ( Function ) Finds the first substring of the input string that matches with the given regular expression, and replaces itwith the given replacement string. reverse ( Function ) Returns the input string in the reverse order character-wise and string-wise. split ( Function ) Splits the input.string into substrings using the value parsed in the split.string and returns the substring at the position specified in the group.number . strcmp ( Function ) Compares two strings lexicographically and returns an integer value. If both strings are equal, 0 is returned. If the first string is lexicographically greater than the second string, a positive value is returned. If the first string is lexicographically greater than the second string, a negative value is returned. substr ( Function ) Returns a substring of the input string by considering a subset or all of the following factors: starting index, length, regular expression, and regex group number. trim ( Function ) Returns a copy of the input string without the leading and trailing whitespace (if any). unhex ( Function ) Returns a string by converting the hexadecimal characters in the input string. upper ( Function ) Converts the simple letters in the input string to the equivalent capital/block letters. tokenize ( Stream Processor ) This function splits the input string into tokens using a given regular expression and returns the split tokens. Dependencies There are no other dependencies needed for this extension. Installation For installing this extension on various siddhi execution environments refer Siddhi documentation section on adding extensions . Support and Contribution We encourage users to ask questions and get support via StackOverflow , make sure to add the siddhi tag to the issue for better response. If you find any issues related to the extension please report them on the issue tracker . For production support and other contribution related information refer Siddhi Community documentation.","title":"Information"},{"location":"#siddhi-execution-string","text":"The siddhi-execution-string extension is a Siddhi extension that provides basic string handling capabilities such as concat, length, replace all, etc. For information on Siddhi and it's features refer Siddhi Documentation .","title":"Siddhi Execution String"},{"location":"#download","text":"Versions 5.x and above with group id io.siddhi.extension.* from here . Versions 4.x and lower with group id org.wso2.extension.siddhi.* from here .","title":"Download"},{"location":"#latest-api-docs","text":"Latest API Docs is 5.0.3 .","title":"Latest API Docs"},{"location":"#features","text":"and ( Aggregate Function ) Returns the results of AND operation for all the events. avg ( Aggregate Function ) Calculates the average for all the events. count ( Aggregate Function ) Returns the count of all the events. distinctCount ( Aggregate Function ) This returns the count of distinct occurrences for a given arg. max ( Aggregate Function ) Returns the maximum value for all the events. maxForever ( Aggregate Function ) This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front. min ( Aggregate Function ) Returns the minimum value for all the events. minForever ( Aggregate Function ) This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front. or ( Aggregate Function ) Returns the results of OR operation for all the events. stdDev ( Aggregate Function ) Returns the calculated standard deviation for all the events. sum ( Aggregate Function ) Returns the sum for all the events. unionSet ( Aggregate Function ) Union multiple sets. This attribute aggregator maintains a union of sets. The given input set is put into the union set and the union set is returned. UUID ( Function ) Generates a UUID (Universally Unique Identifier). cast ( Function ) Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type. coalesce ( Function ) Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type. convert ( Function ) Converts the first input parameter according to the convertedTo parameter. createSet ( Function ) Includes the given input parameter in a java.util.HashSet and returns the set. currentTimeMillis ( Function ) Returns the current timestamp of siddhi application in milliseconds. default ( Function ) Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter eventTimestamp ( Function ) Returns the timestamp of the processed event. ifThenElse ( Function ) Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type. instanceOfBoolean ( Function ) Checks whether the parameter is an instance of Boolean or not. instanceOfDouble ( Function ) Checks whether the parameter is an instance of Double or not. instanceOfFloat ( Function ) Checks whether the parameter is an instance of Float or not. instanceOfInteger ( Function ) Checks whether the parameter is an instance of Integer or not. instanceOfLong ( Function ) Checks whether the parameter is an instance of Long or not. instanceOfString ( Function ) Checks whether the parameter is an instance of String or not. maximum ( Function ) Returns the maximum value of the input parameters. minimum ( Function ) Returns the minimum value of the input parameters. sizeOfSet ( Function ) Returns the size of an object of type java.util.Set. pol2Cart ( Stream Function ) The pol2Cart function calculating the cartesian coordinates x y for the given theta, rho coordinates and adding them as new attributes to the existing events. log ( Stream Processor ) The logger logs the message on the given priority with or without processed event. batch ( Window ) A window that holds an incoming events batch. When a new set of events arrives, the previously arrived old events will be expired. Batch window can be used to aggregate events that comes in batches. If it has the parameter length specified, then batch window process the batch as several chunks. cron ( Window ) This window outputs the arriving events as and when they arrive, and resets (expires) the window periodically based on the given cron expression. delay ( Window ) A delay window holds events for a specific time period that is regarded as a delay period before processing them. externalTime ( Window ) A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp. externalTimeBatch ( Window ) A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime. frequent ( Window ) This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm. length ( Window ) A sliding length window that holds the last 'window.length' events at a given time, and gets updated for each arrival and expiry. lengthBatch ( Window ) A batch (tumbling) length window that holds and process a number of events as specified in the window.length. lossyFrequent ( Window ) This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter. session ( Window ) This is a session window that holds events that belong to a specific session. The events that belong to a specific session are identified by a grouping attribute (i.e., a session key). A session gap period is specified to determine the time period after which the session is considered to be expired. A new event that arrives with a specific value for the session key is matched with the session window with the same session key. There can be out of order and late arrival of events, these events can arrive after the session is expired, to include those events to the matching session key specify a latency time period that is less than the session gap period.To have aggregate functions with session windows, the events need to be grouped by the session key via a 'group by' clause. sort ( Window ) This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order. time ( Window ) A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry. timeBatch ( Window ) A batch (tumbling) time window that holds and process events that arrive during 'window.time' period as a batch. timeLength ( Window ) A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry. inMemory ( Sink ) In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition). log ( Sink ) This is a sink that can be used as a logger. This will log the output events in the output stream with user specified priority and a prefix passThrough ( Sink Mapper ) Pass-through mapper passed events (Event[]) through without any mapping or modifications. inMemory ( Source ) In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition). passThrough ( Source Mapper ) Pass-through mapper passed events (Event[]) through without any mapping or modifications. groupConcat ( Aggregate Function ) This function aggregates the received events by concatenating the keys in those events using a separator, e.g.,a comma (,) or a hyphen (-), and returns the concatenated key string. charAt ( Function ) This function returns the 'char' value that is present at the given index position. of the input string. coalesce ( Function ) This returns the first input parameter value of the given argument, that is not null. concat ( Function ) This function returns a string value that is obtained as a result of concatenating two or more input string values. contains ( Function ) This function returns true if the input.string contains the specified sequence of char values in the search.string . equalsIgnoreCase ( Function ) This returns a boolean value by comparing two strings lexicographically without considering the letter case. fillTemplate ( Function ) This extension replaces the templated positions that are marked with an index value in a specified template with the strings provided. hex ( Function ) This function returns a hexadecimal string by converting each byte of each character in the input string to two hexadecimal digits. length ( Function ) Returns the length of the input string. lower ( Function ) Converts the capital letters in the input string to the equivalent simple letters. regexp ( Function ) Returns a boolean value based on the matchability of the input string and the given regular expression. repeat ( Function ) Repeats the input string for a specified number of times. replaceAll ( Function ) Finds all the substrings of the input string that matches with the given expression, and replaces them with the given replacement string. replaceFirst ( Function ) Finds the first substring of the input string that matches with the given regular expression, and replaces itwith the given replacement string. reverse ( Function ) Returns the input string in the reverse order character-wise and string-wise. split ( Function ) Splits the input.string into substrings using the value parsed in the split.string and returns the substring at the position specified in the group.number . strcmp ( Function ) Compares two strings lexicographically and returns an integer value. If both strings are equal, 0 is returned. If the first string is lexicographically greater than the second string, a positive value is returned. If the first string is lexicographically greater than the second string, a negative value is returned. substr ( Function ) Returns a substring of the input string by considering a subset or all of the following factors: starting index, length, regular expression, and regex group number. trim ( Function ) Returns a copy of the input string without the leading and trailing whitespace (if any). unhex ( Function ) Returns a string by converting the hexadecimal characters in the input string. upper ( Function ) Converts the simple letters in the input string to the equivalent capital/block letters. tokenize ( Stream Processor ) This function splits the input string into tokens using a given regular expression and returns the split tokens.","title":"Features"},{"location":"#dependencies","text":"There are no other dependencies needed for this extension.","title":"Dependencies"},{"location":"#installation","text":"For installing this extension on various siddhi execution environments refer Siddhi documentation section on adding extensions .","title":"Installation"},{"location":"#support-and-contribution","text":"We encourage users to ask questions and get support via StackOverflow , make sure to add the siddhi tag to the issue for better response. If you find any issues related to the extension please report them on the issue tracker . For production support and other contribution related information refer Siddhi Community documentation.","title":"Support and Contribution"},{"location":"license/","text":"Copyright (c) 2017 WSO2 Inc. ( http://www.wso2.org ) All Rights Reserved. WSO2 Inc. licenses this file to you under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. ------------------------------------------------------------------------- Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. License shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. Licensor shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. Legal Entity shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, control means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. You (or Your ) shall mean an individual or Legal Entity exercising permissions granted by this License. Source form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. Object form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. Work shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). Derivative Works shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. Contribution shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, submitted means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as Not a Contribution. Contributor shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a NOTICE text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an AS IS BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS","title":"License"},{"location":"api/4.0.10/","text":"API Docs - v4.0.10 Str charAt (Function) Returns the char value as a string value at the specified index. Syntax STRING str:charAt( STRING input.value, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.value The input string that used to find the character. STRING No No index The variable that specifies the index. INT No No Examples EXAMPLE 1 charAt( WSO2 , 1) This will output the character that exists at index 1. In this case, it will output 'S'. coalesce (Function) Returns the value of the first of its input parameters that is not null Syntax INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT str:coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have one or more input parameters in any data type. All the specified parameters should be of the same type. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No No Examples EXAMPLE 1 coalesce(null, BBB , CCC ) This returns the first input parameter that is not null. In this example, it returns \"BBB\" concat (Function) Returns a string that is the result of concatenating two or more string values. Syntax STRING str:concat( STRING argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have two or more string type input parameters. STRING No No Examples EXAMPLE 1 concat( D533 , 8JU^ , XYZ ) This returns a string value by concatenating the given arguments. In this case, it will return \"D5338JU^XYZ\" as the output contains (Function) This method returns true if the input.string contains the specified sequence of char values in the search.string . Syntax BOOL str:contains( STRING input.string, STRING search.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string Input string value. STRING No No search.string The string value to be searched for in the input.string . STRING No No Examples EXAMPLE 1 contains( 21 products are produced by WSO2 currently , WSO2 ) This returns a boolean value as the output. In this case, it returns true . equalsIgnoreCase (Function) Compares two strings lexicographically. Syntax BOOL str:equalsIgnoreCase( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument. This is compared with the first argument. STRING No No Examples EXAMPLE 1 equalsIgnoreCase( WSO2 , wso2 ) This returns a boolean value as the output. In this scenario, it returns \"true\". hex (Function) Returns a hexadecimal string representation of str, where each byte of each character in str is converted to two hexadecimal digits Syntax STRING str:hex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the hexadecimal value. STRING No No Examples EXAMPLE 1 hex( MySQL ) This returns the hexadecimal value of the input.string. In this scenario, the output is \"4d7953514c\". length (Function) Returns the length of this string. Syntax INT str:length( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the length. STRING No No Examples EXAMPLE 1 length( Hello World ) This outputs the length of the provided string. In this scenario, the, output is 11 . lower (Function) Converts the capital letters in the input string to the equivalent simple letters. Syntax STRING str:lower( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to convert to the lower case (i.e., equivalent simple letters). STRING No No Examples EXAMPLE 1 lower( WSO2 cep ) This converts the capital letters in the input.string to the equivalent simple letters. In this scenario, the output is \"wso2 cep \". regexp (Function) Returns whether this 'string' matches the given regular expression 'regex' or not. Syntax BOOL str:regexp( STRING input.string, STRING regex) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to match with the given regular expression. STRING No No regex The regular expression to be matched with the input string. STRING No No Examples EXAMPLE 1 regexp( WSO2 abcdh , WSO(.*h) ) This returns a boolean value after matching regular expression with the given string. In this scenario, it returns \"true\" as the output. repeat (Function) Repeats a string for a specified number of times. Syntax STRING str:repeat( STRING input.string, INT times) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that is repeated the number of times as defined by the user. STRING No No times The number of times the input.string needs to be repeated . INT No No Examples EXAMPLE 1 repeat( StRing 1 , 3) This returns a string value by repeating the string for a specified number of times. In this scenario, the output is \"StRing 1StRing 1StRing 1\". replaceAll (Function) Replaces each substring of this string that matches the given expression with the given replacement. Syntax STRING str:replaceAll( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No regex The regular expression to be matched with the input string. STRING No No replacement.string The striing with which each substring that matches the given expression should be replaced. STRING No No Examples EXAMPLE 1 replaceAll( hello hi hello , 'hello', 'test') This returns a string after replacing the substrings of the input string with the replacement string. In this scenario, the output is \"test hi test\" . replaceFirst (Function) Replaces the first substring of this string that matches the given expression, with the given replacement. Syntax STRING str:replaceFirst( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be replaced. STRING No No regex The regular expression with which the input string should be matched. STRING No No replacement.string The string with which the first substring of input string that matches the regular expression should be replaced. STRING No No Examples EXAMPLE 1 replaceFirst( hello WSO2 A hello , 'WSO2(.*)A', 'XXXX') This returns a string after replacing the first substring with the given replacement string. In this scenario, the output is \"hello XXXX hello\". reverse (Function) Returns the reverse ordered string of the input. Syntax STRING str:reverse( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be reversed. STRING No No Examples EXAMPLE 1 reverse( Hello World ) This outputs a string value by reversing the incoming input.string . In this scenario, the output is \"dlroW olleH\". split (Function) Splits the source string by split.string and returns the substring specified via the group.number . Syntax STRING str:split( STRING input.string, STRING split.string, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No split.string The string value to be used to split the input.string . STRING No No group.number The index of the split group INT No No Examples EXAMPLE 1 split( WSO2,ABM,NSFT , , , 0) This splits the given input.string by given split.string and returns the string in the index given by group.number. In this scenario, the output will is \"WSO2\". strcmp (Function) Compares two strings lexicographically. Syntax INT str:strcmp( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument that should be compared with the first argument lexicographically. STRING No No Examples EXAMPLE 1 strcmp( AbCDefghiJ KLMN , 'Hello') This compares two strings lexicographically and outputs an integer value substr (Function) This returns a new string that is a substring of this string Syntax STRING str:substr( STRING input.string, INT begin.index, INT length, STRING regex, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be processed. STRING No No begin.index Starting index to consider for the substring. INT No No length The length of the substring. INT No No regex The regular expression that should be matched with the input string.. STRING No No group.number The regex group number INT No No Examples EXAMPLE 1 substr( AbCDefghiJ KLMN , 4) This outputs the substring based on the given begin.index . In this scenario, the output is \"efghiJ KLMN\". EXAMPLE 2 substr( AbCDefghiJ KLMN , 2, 4) This outputs the substring based on the given begin.index and length. In this scenario, the output is \"CDef\". EXAMPLE 3 substr( WSO2D efghiJ KLMN , '^WSO2(.*)') This outputs the substring by applying the regex. In this scenario, the output is \"WSO2D efghiJ KLMN\". EXAMPLE 4 substr( WSO2 cep WSO2 XX E hi hA WSO2 heAllo , 'WSO2(.*)A(.*)', 2) This outputs the substring by applying the regex and considering the group.number . In this scenario, the output is \" ello\". trim (Function) Returns a copy of the string with leading and trailing whitespace omitted Syntax STRING str:trim( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that needs to be trimmed. STRING No No Examples EXAMPLE 1 trim( AbCDefghiJ KLMN ) This returns a copy of the input.string with the leading and/or trailing white-spaces omitted. In this scenario, the output is \"AbCDefghiJ KLMN\". unhex (Function) unhex(str) interprets each pair of characters in the argument as a hexadecimal number and converts it to the byte represented by the number Syntax STRING str:unhex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The hexadecimal input string that needs to be converted to string. STRING No No Examples EXAMPLE 1 unhex( 4d7953514c ) This converts the hexadecimal value to string upper (Function) Converts the simple letters in the input string to the equivalent capital/block letters. Syntax STRING str:upper( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be converted to the upper case (equivalent capital/block letters). STRING No No Examples EXAMPLE 1 upper( Hello World ) This converts the simple letters in the input.string to theequivalent capital letters. In this scenario, the output is \"HELLO WORLD\".","title":"4.0.10"},{"location":"api/4.0.10/#api-docs-v4010","text":"","title":"API Docs - v4.0.10"},{"location":"api/4.0.10/#str","text":"","title":"Str"},{"location":"api/4.0.10/#charat-function","text":"Returns the char value as a string value at the specified index. Syntax STRING str:charAt( STRING input.value, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.value The input string that used to find the character. STRING No No index The variable that specifies the index. INT No No Examples EXAMPLE 1 charAt( WSO2 , 1) This will output the character that exists at index 1. In this case, it will output 'S'.","title":"charAt (Function)"},{"location":"api/4.0.10/#coalesce-function","text":"Returns the value of the first of its input parameters that is not null Syntax INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT str:coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have one or more input parameters in any data type. All the specified parameters should be of the same type. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No No Examples EXAMPLE 1 coalesce(null, BBB , CCC ) This returns the first input parameter that is not null. In this example, it returns \"BBB\"","title":"coalesce (Function)"},{"location":"api/4.0.10/#concat-function","text":"Returns a string that is the result of concatenating two or more string values. Syntax STRING str:concat( STRING argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have two or more string type input parameters. STRING No No Examples EXAMPLE 1 concat( D533 , 8JU^ , XYZ ) This returns a string value by concatenating the given arguments. In this case, it will return \"D5338JU^XYZ\" as the output","title":"concat (Function)"},{"location":"api/4.0.10/#contains-function","text":"This method returns true if the input.string contains the specified sequence of char values in the search.string . Syntax BOOL str:contains( STRING input.string, STRING search.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string Input string value. STRING No No search.string The string value to be searched for in the input.string . STRING No No Examples EXAMPLE 1 contains( 21 products are produced by WSO2 currently , WSO2 ) This returns a boolean value as the output. In this case, it returns true .","title":"contains (Function)"},{"location":"api/4.0.10/#equalsignorecase-function","text":"Compares two strings lexicographically. Syntax BOOL str:equalsIgnoreCase( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument. This is compared with the first argument. STRING No No Examples EXAMPLE 1 equalsIgnoreCase( WSO2 , wso2 ) This returns a boolean value as the output. In this scenario, it returns \"true\".","title":"equalsIgnoreCase (Function)"},{"location":"api/4.0.10/#hex-function","text":"Returns a hexadecimal string representation of str, where each byte of each character in str is converted to two hexadecimal digits Syntax STRING str:hex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the hexadecimal value. STRING No No Examples EXAMPLE 1 hex( MySQL ) This returns the hexadecimal value of the input.string. In this scenario, the output is \"4d7953514c\".","title":"hex (Function)"},{"location":"api/4.0.10/#length-function","text":"Returns the length of this string. Syntax INT str:length( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the length. STRING No No Examples EXAMPLE 1 length( Hello World ) This outputs the length of the provided string. In this scenario, the, output is 11 .","title":"length (Function)"},{"location":"api/4.0.10/#lower-function","text":"Converts the capital letters in the input string to the equivalent simple letters. Syntax STRING str:lower( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to convert to the lower case (i.e., equivalent simple letters). STRING No No Examples EXAMPLE 1 lower( WSO2 cep ) This converts the capital letters in the input.string to the equivalent simple letters. In this scenario, the output is \"wso2 cep \".","title":"lower (Function)"},{"location":"api/4.0.10/#regexp-function","text":"Returns whether this 'string' matches the given regular expression 'regex' or not. Syntax BOOL str:regexp( STRING input.string, STRING regex) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to match with the given regular expression. STRING No No regex The regular expression to be matched with the input string. STRING No No Examples EXAMPLE 1 regexp( WSO2 abcdh , WSO(.*h) ) This returns a boolean value after matching regular expression with the given string. In this scenario, it returns \"true\" as the output.","title":"regexp (Function)"},{"location":"api/4.0.10/#repeat-function","text":"Repeats a string for a specified number of times. Syntax STRING str:repeat( STRING input.string, INT times) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that is repeated the number of times as defined by the user. STRING No No times The number of times the input.string needs to be repeated . INT No No Examples EXAMPLE 1 repeat( StRing 1 , 3) This returns a string value by repeating the string for a specified number of times. In this scenario, the output is \"StRing 1StRing 1StRing 1\".","title":"repeat (Function)"},{"location":"api/4.0.10/#replaceall-function","text":"Replaces each substring of this string that matches the given expression with the given replacement. Syntax STRING str:replaceAll( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No regex The regular expression to be matched with the input string. STRING No No replacement.string The striing with which each substring that matches the given expression should be replaced. STRING No No Examples EXAMPLE 1 replaceAll( hello hi hello , 'hello', 'test') This returns a string after replacing the substrings of the input string with the replacement string. In this scenario, the output is \"test hi test\" .","title":"replaceAll (Function)"},{"location":"api/4.0.10/#replacefirst-function","text":"Replaces the first substring of this string that matches the given expression, with the given replacement. Syntax STRING str:replaceFirst( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be replaced. STRING No No regex The regular expression with which the input string should be matched. STRING No No replacement.string The string with which the first substring of input string that matches the regular expression should be replaced. STRING No No Examples EXAMPLE 1 replaceFirst( hello WSO2 A hello , 'WSO2(.*)A', 'XXXX') This returns a string after replacing the first substring with the given replacement string. In this scenario, the output is \"hello XXXX hello\".","title":"replaceFirst (Function)"},{"location":"api/4.0.10/#reverse-function","text":"Returns the reverse ordered string of the input. Syntax STRING str:reverse( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be reversed. STRING No No Examples EXAMPLE 1 reverse( Hello World ) This outputs a string value by reversing the incoming input.string . In this scenario, the output is \"dlroW olleH\".","title":"reverse (Function)"},{"location":"api/4.0.10/#split-function","text":"Splits the source string by split.string and returns the substring specified via the group.number . Syntax STRING str:split( STRING input.string, STRING split.string, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No split.string The string value to be used to split the input.string . STRING No No group.number The index of the split group INT No No Examples EXAMPLE 1 split( WSO2,ABM,NSFT , , , 0) This splits the given input.string by given split.string and returns the string in the index given by group.number. In this scenario, the output will is \"WSO2\".","title":"split (Function)"},{"location":"api/4.0.10/#strcmp-function","text":"Compares two strings lexicographically. Syntax INT str:strcmp( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument that should be compared with the first argument lexicographically. STRING No No Examples EXAMPLE 1 strcmp( AbCDefghiJ KLMN , 'Hello') This compares two strings lexicographically and outputs an integer value","title":"strcmp (Function)"},{"location":"api/4.0.10/#substr-function","text":"This returns a new string that is a substring of this string Syntax STRING str:substr( STRING input.string, INT begin.index, INT length, STRING regex, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be processed. STRING No No begin.index Starting index to consider for the substring. INT No No length The length of the substring. INT No No regex The regular expression that should be matched with the input string.. STRING No No group.number The regex group number INT No No Examples EXAMPLE 1 substr( AbCDefghiJ KLMN , 4) This outputs the substring based on the given begin.index . In this scenario, the output is \"efghiJ KLMN\". EXAMPLE 2 substr( AbCDefghiJ KLMN , 2, 4) This outputs the substring based on the given begin.index and length. In this scenario, the output is \"CDef\". EXAMPLE 3 substr( WSO2D efghiJ KLMN , '^WSO2(.*)') This outputs the substring by applying the regex. In this scenario, the output is \"WSO2D efghiJ KLMN\". EXAMPLE 4 substr( WSO2 cep WSO2 XX E hi hA WSO2 heAllo , 'WSO2(.*)A(.*)', 2) This outputs the substring by applying the regex and considering the group.number . In this scenario, the output is \" ello\".","title":"substr (Function)"},{"location":"api/4.0.10/#trim-function","text":"Returns a copy of the string with leading and trailing whitespace omitted Syntax STRING str:trim( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that needs to be trimmed. STRING No No Examples EXAMPLE 1 trim( AbCDefghiJ KLMN ) This returns a copy of the input.string with the leading and/or trailing white-spaces omitted. In this scenario, the output is \"AbCDefghiJ KLMN\".","title":"trim (Function)"},{"location":"api/4.0.10/#unhex-function","text":"unhex(str) interprets each pair of characters in the argument as a hexadecimal number and converts it to the byte represented by the number Syntax STRING str:unhex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The hexadecimal input string that needs to be converted to string. STRING No No Examples EXAMPLE 1 unhex( 4d7953514c ) This converts the hexadecimal value to string","title":"unhex (Function)"},{"location":"api/4.0.10/#upper-function","text":"Converts the simple letters in the input string to the equivalent capital/block letters. Syntax STRING str:upper( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be converted to the upper case (equivalent capital/block letters). STRING No No Examples EXAMPLE 1 upper( Hello World ) This converts the simple letters in the input.string to theequivalent capital letters. In this scenario, the output is \"HELLO WORLD\".","title":"upper (Function)"},{"location":"api/4.0.11/","text":"API Docs - v4.0.11 Str charAt (Function) Returns the char value as a string value at the specified index. Syntax STRING str:charAt( STRING input.value, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.value The input string that used to find the character. STRING No No index The variable that specifies the index. INT No No Examples EXAMPLE 1 charAt( WSO2 , 1) This will output the character that exists at index 1. In this case, it will output 'S'. coalesce (Function) Returns the value of the first of its input parameters that is not null Syntax INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT str:coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have one or more input parameters in any data type. All the specified parameters should be of the same type. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No No Examples EXAMPLE 1 coalesce(null, BBB , CCC ) This returns the first input parameter that is not null. In this example, it returns \"BBB\" concat (Function) Returns a string that is the result of concatenating two or more string values. Syntax STRING str:concat( STRING argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have two or more string type input parameters. STRING No No Examples EXAMPLE 1 concat( D533 , 8JU^ , XYZ ) This returns a string value by concatenating the given arguments. In this case, it will return \"D5338JU^XYZ\" as the output contains (Function) This method returns true if the input.string contains the specified sequence of char values in the search.string . Syntax BOOL str:contains( STRING input.string, STRING search.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string Input string value. STRING No No search.string The string value to be searched for in the input.string . STRING No No Examples EXAMPLE 1 contains( 21 products are produced by WSO2 currently , WSO2 ) This returns a boolean value as the output. In this case, it returns true . equalsIgnoreCase (Function) Compares two strings lexicographically. Syntax BOOL str:equalsIgnoreCase( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument. This is compared with the first argument. STRING No No Examples EXAMPLE 1 equalsIgnoreCase( WSO2 , wso2 ) This returns a boolean value as the output. In this scenario, it returns \"true\". hex (Function) Returns a hexadecimal string representation of str, where each byte of each character in str is converted to two hexadecimal digits Syntax STRING str:hex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the hexadecimal value. STRING No No Examples EXAMPLE 1 hex( MySQL ) This returns the hexadecimal value of the input.string. In this scenario, the output is \"4d7953514c\". length (Function) Returns the length of this string. Syntax INT str:length( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the length. STRING No No Examples EXAMPLE 1 length( Hello World ) This outputs the length of the provided string. In this scenario, the, output is 11 . lower (Function) Converts the capital letters in the input string to the equivalent simple letters. Syntax STRING str:lower( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to convert to the lower case (i.e., equivalent simple letters). STRING No No Examples EXAMPLE 1 lower( WSO2 cep ) This converts the capital letters in the input.string to the equivalent simple letters. In this scenario, the output is \"wso2 cep \". regexp (Function) Returns whether this 'string' matches the given regular expression 'regex' or not. Syntax BOOL str:regexp( STRING input.string, STRING regex) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to match with the given regular expression. STRING No No regex The regular expression to be matched with the input string. STRING No No Examples EXAMPLE 1 regexp( WSO2 abcdh , WSO(.*h) ) This returns a boolean value after matching regular expression with the given string. In this scenario, it returns \"true\" as the output. repeat (Function) Repeats a string for a specified number of times. Syntax STRING str:repeat( STRING input.string, INT times) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that is repeated the number of times as defined by the user. STRING No No times The number of times the input.string needs to be repeated . INT No No Examples EXAMPLE 1 repeat( StRing 1 , 3) This returns a string value by repeating the string for a specified number of times. In this scenario, the output is \"StRing 1StRing 1StRing 1\". replaceAll (Function) Replaces each substring of this string that matches the given expression with the given replacement. Syntax STRING str:replaceAll( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No regex The regular expression to be matched with the input string. STRING No No replacement.string The striing with which each substring that matches the given expression should be replaced. STRING No No Examples EXAMPLE 1 replaceAll( hello hi hello , 'hello', 'test') This returns a string after replacing the substrings of the input string with the replacement string. In this scenario, the output is \"test hi test\" . replaceFirst (Function) Replaces the first substring of this string that matches the given expression, with the given replacement. Syntax STRING str:replaceFirst( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be replaced. STRING No No regex The regular expression with which the input string should be matched. STRING No No replacement.string The string with which the first substring of input string that matches the regular expression should be replaced. STRING No No Examples EXAMPLE 1 replaceFirst( hello WSO2 A hello , 'WSO2(.*)A', 'XXXX') This returns a string after replacing the first substring with the given replacement string. In this scenario, the output is \"hello XXXX hello\". reverse (Function) Returns the reverse ordered string of the input. Syntax STRING str:reverse( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be reversed. STRING No No Examples EXAMPLE 1 reverse( Hello World ) This outputs a string value by reversing the incoming input.string . In this scenario, the output is \"dlroW olleH\". split (Function) Splits the source string by split.string and returns the substring specified via the group.number . Syntax STRING str:split( STRING input.string, STRING split.string, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No split.string The string value to be used to split the input.string . STRING No No group.number The index of the split group INT No No Examples EXAMPLE 1 split( WSO2,ABM,NSFT , , , 0) This splits the given input.string by given split.string and returns the string in the index given by group.number. In this scenario, the output will is \"WSO2\". strcmp (Function) Compares two strings lexicographically. Syntax INT str:strcmp( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument that should be compared with the first argument lexicographically. STRING No No Examples EXAMPLE 1 strcmp( AbCDefghiJ KLMN , 'Hello') This compares two strings lexicographically and outputs an integer value substr (Function) This returns a new string that is a substring of this string Syntax STRING str:substr( STRING input.string, INT begin.index, INT length, STRING regex, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be processed. STRING No No begin.index Starting index to consider for the substring. INT No No length The length of the substring. INT No No regex The regular expression that should be matched with the input string.. STRING No No group.number The regex group number INT No No Examples EXAMPLE 1 substr( AbCDefghiJ KLMN , 4) This outputs the substring based on the given begin.index . In this scenario, the output is \"efghiJ KLMN\". EXAMPLE 2 substr( AbCDefghiJ KLMN , 2, 4) This outputs the substring based on the given begin.index and length. In this scenario, the output is \"CDef\". EXAMPLE 3 substr( WSO2D efghiJ KLMN , '^WSO2(.*)') This outputs the substring by applying the regex. In this scenario, the output is \"WSO2D efghiJ KLMN\". EXAMPLE 4 substr( WSO2 cep WSO2 XX E hi hA WSO2 heAllo , 'WSO2(.*)A(.*)', 2) This outputs the substring by applying the regex and considering the group.number . In this scenario, the output is \" ello\". trim (Function) Returns a copy of the string with leading and trailing whitespace omitted Syntax STRING str:trim( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that needs to be trimmed. STRING No No Examples EXAMPLE 1 trim( AbCDefghiJ KLMN ) This returns a copy of the input.string with the leading and/or trailing white-spaces omitted. In this scenario, the output is \"AbCDefghiJ KLMN\". unhex (Function) unhex(str) interprets each pair of characters in the argument as a hexadecimal number and converts it to the byte represented by the number Syntax STRING str:unhex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The hexadecimal input string that needs to be converted to string. STRING No No Examples EXAMPLE 1 unhex( 4d7953514c ) This converts the hexadecimal value to string upper (Function) Converts the simple letters in the input string to the equivalent capital/block letters. Syntax STRING str:upper( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be converted to the upper case (equivalent capital/block letters). STRING No No Examples EXAMPLE 1 upper( Hello World ) This converts the simple letters in the input.string to theequivalent capital letters. In this scenario, the output is \"HELLO WORLD\". tokenize (Stream Processor) This splits a string into words Syntax str:tokenize( STRING input.string, STRING regex) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input text which should be split. STRING No No regex The string value to be used to tokenize the 'input.string'. STRING No No Examples EXAMPLE 1 define stream inputStream (str string); @info(name = 'query1') from inputStream#str:tokenize(str , regex) select text insert into outputStream; This query performs tokenization for the given string.","title":"4.0.11"},{"location":"api/4.0.11/#api-docs-v4011","text":"","title":"API Docs - v4.0.11"},{"location":"api/4.0.11/#str","text":"","title":"Str"},{"location":"api/4.0.11/#charat-function","text":"Returns the char value as a string value at the specified index. Syntax STRING str:charAt( STRING input.value, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.value The input string that used to find the character. STRING No No index The variable that specifies the index. INT No No Examples EXAMPLE 1 charAt( WSO2 , 1) This will output the character that exists at index 1. In this case, it will output 'S'.","title":"charAt (Function)"},{"location":"api/4.0.11/#coalesce-function","text":"Returns the value of the first of its input parameters that is not null Syntax INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT str:coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have one or more input parameters in any data type. All the specified parameters should be of the same type. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No No Examples EXAMPLE 1 coalesce(null, BBB , CCC ) This returns the first input parameter that is not null. In this example, it returns \"BBB\"","title":"coalesce (Function)"},{"location":"api/4.0.11/#concat-function","text":"Returns a string that is the result of concatenating two or more string values. Syntax STRING str:concat( STRING argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have two or more string type input parameters. STRING No No Examples EXAMPLE 1 concat( D533 , 8JU^ , XYZ ) This returns a string value by concatenating the given arguments. In this case, it will return \"D5338JU^XYZ\" as the output","title":"concat (Function)"},{"location":"api/4.0.11/#contains-function","text":"This method returns true if the input.string contains the specified sequence of char values in the search.string . Syntax BOOL str:contains( STRING input.string, STRING search.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string Input string value. STRING No No search.string The string value to be searched for in the input.string . STRING No No Examples EXAMPLE 1 contains( 21 products are produced by WSO2 currently , WSO2 ) This returns a boolean value as the output. In this case, it returns true .","title":"contains (Function)"},{"location":"api/4.0.11/#equalsignorecase-function","text":"Compares two strings lexicographically. Syntax BOOL str:equalsIgnoreCase( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument. This is compared with the first argument. STRING No No Examples EXAMPLE 1 equalsIgnoreCase( WSO2 , wso2 ) This returns a boolean value as the output. In this scenario, it returns \"true\".","title":"equalsIgnoreCase (Function)"},{"location":"api/4.0.11/#hex-function","text":"Returns a hexadecimal string representation of str, where each byte of each character in str is converted to two hexadecimal digits Syntax STRING str:hex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the hexadecimal value. STRING No No Examples EXAMPLE 1 hex( MySQL ) This returns the hexadecimal value of the input.string. In this scenario, the output is \"4d7953514c\".","title":"hex (Function)"},{"location":"api/4.0.11/#length-function","text":"Returns the length of this string. Syntax INT str:length( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the length. STRING No No Examples EXAMPLE 1 length( Hello World ) This outputs the length of the provided string. In this scenario, the, output is 11 .","title":"length (Function)"},{"location":"api/4.0.11/#lower-function","text":"Converts the capital letters in the input string to the equivalent simple letters. Syntax STRING str:lower( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to convert to the lower case (i.e., equivalent simple letters). STRING No No Examples EXAMPLE 1 lower( WSO2 cep ) This converts the capital letters in the input.string to the equivalent simple letters. In this scenario, the output is \"wso2 cep \".","title":"lower (Function)"},{"location":"api/4.0.11/#regexp-function","text":"Returns whether this 'string' matches the given regular expression 'regex' or not. Syntax BOOL str:regexp( STRING input.string, STRING regex) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to match with the given regular expression. STRING No No regex The regular expression to be matched with the input string. STRING No No Examples EXAMPLE 1 regexp( WSO2 abcdh , WSO(.*h) ) This returns a boolean value after matching regular expression with the given string. In this scenario, it returns \"true\" as the output.","title":"regexp (Function)"},{"location":"api/4.0.11/#repeat-function","text":"Repeats a string for a specified number of times. Syntax STRING str:repeat( STRING input.string, INT times) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that is repeated the number of times as defined by the user. STRING No No times The number of times the input.string needs to be repeated . INT No No Examples EXAMPLE 1 repeat( StRing 1 , 3) This returns a string value by repeating the string for a specified number of times. In this scenario, the output is \"StRing 1StRing 1StRing 1\".","title":"repeat (Function)"},{"location":"api/4.0.11/#replaceall-function","text":"Replaces each substring of this string that matches the given expression with the given replacement. Syntax STRING str:replaceAll( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No regex The regular expression to be matched with the input string. STRING No No replacement.string The striing with which each substring that matches the given expression should be replaced. STRING No No Examples EXAMPLE 1 replaceAll( hello hi hello , 'hello', 'test') This returns a string after replacing the substrings of the input string with the replacement string. In this scenario, the output is \"test hi test\" .","title":"replaceAll (Function)"},{"location":"api/4.0.11/#replacefirst-function","text":"Replaces the first substring of this string that matches the given expression, with the given replacement. Syntax STRING str:replaceFirst( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be replaced. STRING No No regex The regular expression with which the input string should be matched. STRING No No replacement.string The string with which the first substring of input string that matches the regular expression should be replaced. STRING No No Examples EXAMPLE 1 replaceFirst( hello WSO2 A hello , 'WSO2(.*)A', 'XXXX') This returns a string after replacing the first substring with the given replacement string. In this scenario, the output is \"hello XXXX hello\".","title":"replaceFirst (Function)"},{"location":"api/4.0.11/#reverse-function","text":"Returns the reverse ordered string of the input. Syntax STRING str:reverse( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be reversed. STRING No No Examples EXAMPLE 1 reverse( Hello World ) This outputs a string value by reversing the incoming input.string . In this scenario, the output is \"dlroW olleH\".","title":"reverse (Function)"},{"location":"api/4.0.11/#split-function","text":"Splits the source string by split.string and returns the substring specified via the group.number . Syntax STRING str:split( STRING input.string, STRING split.string, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No split.string The string value to be used to split the input.string . STRING No No group.number The index of the split group INT No No Examples EXAMPLE 1 split( WSO2,ABM,NSFT , , , 0) This splits the given input.string by given split.string and returns the string in the index given by group.number. In this scenario, the output will is \"WSO2\".","title":"split (Function)"},{"location":"api/4.0.11/#strcmp-function","text":"Compares two strings lexicographically. Syntax INT str:strcmp( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument that should be compared with the first argument lexicographically. STRING No No Examples EXAMPLE 1 strcmp( AbCDefghiJ KLMN , 'Hello') This compares two strings lexicographically and outputs an integer value","title":"strcmp (Function)"},{"location":"api/4.0.11/#substr-function","text":"This returns a new string that is a substring of this string Syntax STRING str:substr( STRING input.string, INT begin.index, INT length, STRING regex, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be processed. STRING No No begin.index Starting index to consider for the substring. INT No No length The length of the substring. INT No No regex The regular expression that should be matched with the input string.. STRING No No group.number The regex group number INT No No Examples EXAMPLE 1 substr( AbCDefghiJ KLMN , 4) This outputs the substring based on the given begin.index . In this scenario, the output is \"efghiJ KLMN\". EXAMPLE 2 substr( AbCDefghiJ KLMN , 2, 4) This outputs the substring based on the given begin.index and length. In this scenario, the output is \"CDef\". EXAMPLE 3 substr( WSO2D efghiJ KLMN , '^WSO2(.*)') This outputs the substring by applying the regex. In this scenario, the output is \"WSO2D efghiJ KLMN\". EXAMPLE 4 substr( WSO2 cep WSO2 XX E hi hA WSO2 heAllo , 'WSO2(.*)A(.*)', 2) This outputs the substring by applying the regex and considering the group.number . In this scenario, the output is \" ello\".","title":"substr (Function)"},{"location":"api/4.0.11/#trim-function","text":"Returns a copy of the string with leading and trailing whitespace omitted Syntax STRING str:trim( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that needs to be trimmed. STRING No No Examples EXAMPLE 1 trim( AbCDefghiJ KLMN ) This returns a copy of the input.string with the leading and/or trailing white-spaces omitted. In this scenario, the output is \"AbCDefghiJ KLMN\".","title":"trim (Function)"},{"location":"api/4.0.11/#unhex-function","text":"unhex(str) interprets each pair of characters in the argument as a hexadecimal number and converts it to the byte represented by the number Syntax STRING str:unhex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The hexadecimal input string that needs to be converted to string. STRING No No Examples EXAMPLE 1 unhex( 4d7953514c ) This converts the hexadecimal value to string","title":"unhex (Function)"},{"location":"api/4.0.11/#upper-function","text":"Converts the simple letters in the input string to the equivalent capital/block letters. Syntax STRING str:upper( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be converted to the upper case (equivalent capital/block letters). STRING No No Examples EXAMPLE 1 upper( Hello World ) This converts the simple letters in the input.string to theequivalent capital letters. In this scenario, the output is \"HELLO WORLD\".","title":"upper (Function)"},{"location":"api/4.0.11/#tokenize-stream-processor","text":"This splits a string into words Syntax str:tokenize( STRING input.string, STRING regex) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input text which should be split. STRING No No regex The string value to be used to tokenize the 'input.string'. STRING No No Examples EXAMPLE 1 define stream inputStream (str string); @info(name = 'query1') from inputStream#str:tokenize(str , regex) select text insert into outputStream; This query performs tokenization for the given string.","title":"tokenize (Stream Processor)"},{"location":"api/4.0.12/","text":"API Docs - v4.0.12 Str charAt (Function) Returns the char value as a string value at the specified index. Syntax STRING str:charAt( STRING input.value, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.value The input string that used to find the character. STRING No No index The variable that specifies the index. INT No No Examples EXAMPLE 1 charAt( WSO2 , 1) This will output the character that exists at index 1. In this case, it will output 'S'. coalesce (Function) Returns the value of the first of its input parameters that is not null Syntax INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT str:coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have one or more input parameters in any data type. All the specified parameters should be of the same type. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No No Examples EXAMPLE 1 coalesce(null, BBB , CCC ) This returns the first input parameter that is not null. In this example, it returns \"BBB\" concat (Function) Returns a string that is the result of concatenating two or more string values. Syntax STRING str:concat( STRING argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have two or more string type input parameters. STRING No No Examples EXAMPLE 1 concat( D533 , 8JU^ , XYZ ) This returns a string value by concatenating the given arguments. In this case, it will return \"D5338JU^XYZ\" as the output contains (Function) This method returns true if the input.string contains the specified sequence of char values in the search.string . Syntax BOOL str:contains( STRING input.string, STRING search.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string Input string value. STRING No No search.string The string value to be searched for in the input.string . STRING No No Examples EXAMPLE 1 contains( 21 products are produced by WSO2 currently , WSO2 ) This returns a boolean value as the output. In this case, it returns true . equalsIgnoreCase (Function) Compares two strings lexicographically. Syntax BOOL str:equalsIgnoreCase( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument. This is compared with the first argument. STRING No No Examples EXAMPLE 1 equalsIgnoreCase( WSO2 , wso2 ) This returns a boolean value as the output. In this scenario, it returns \"true\". hex (Function) Returns a hexadecimal string representation of str, where each byte of each character in str is converted to two hexadecimal digits Syntax STRING str:hex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the hexadecimal value. STRING No No Examples EXAMPLE 1 hex( MySQL ) This returns the hexadecimal value of the input.string. In this scenario, the output is \"4d7953514c\". length (Function) Returns the length of this string. Syntax INT str:length( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the length. STRING No No Examples EXAMPLE 1 length( Hello World ) This outputs the length of the provided string. In this scenario, the, output is 11 . lower (Function) Converts the capital letters in the input string to the equivalent simple letters. Syntax STRING str:lower( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to convert to the lower case (i.e., equivalent simple letters). STRING No No Examples EXAMPLE 1 lower( WSO2 cep ) This converts the capital letters in the input.string to the equivalent simple letters. In this scenario, the output is \"wso2 cep \". regexp (Function) Returns whether this 'string' matches the given regular expression 'regex' or not. Syntax BOOL str:regexp( STRING input.string, STRING regex) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to match with the given regular expression. STRING No No regex The regular expression to be matched with the input string. STRING No No Examples EXAMPLE 1 regexp( WSO2 abcdh , WSO(.*h) ) This returns a boolean value after matching regular expression with the given string. In this scenario, it returns \"true\" as the output. repeat (Function) Repeats a string for a specified number of times. Syntax STRING str:repeat( STRING input.string, INT times) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that is repeated the number of times as defined by the user. STRING No No times The number of times the input.string needs to be repeated . INT No No Examples EXAMPLE 1 repeat( StRing 1 , 3) This returns a string value by repeating the string for a specified number of times. In this scenario, the output is \"StRing 1StRing 1StRing 1\". replaceAll (Function) Replaces each substring of this string that matches the given expression with the given replacement. Syntax STRING str:replaceAll( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No regex The regular expression to be matched with the input string. STRING No No replacement.string The striing with which each substring that matches the given expression should be replaced. STRING No No Examples EXAMPLE 1 replaceAll( hello hi hello , 'hello', 'test') This returns a string after replacing the substrings of the input string with the replacement string. In this scenario, the output is \"test hi test\" . replaceFirst (Function) Replaces the first substring of this string that matches the given expression, with the given replacement. Syntax STRING str:replaceFirst( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be replaced. STRING No No regex The regular expression with which the input string should be matched. STRING No No replacement.string The string with which the first substring of input string that matches the regular expression should be replaced. STRING No No Examples EXAMPLE 1 replaceFirst( hello WSO2 A hello , 'WSO2(.*)A', 'XXXX') This returns a string after replacing the first substring with the given replacement string. In this scenario, the output is \"hello XXXX hello\". reverse (Function) Returns the reverse ordered string of the input. Syntax STRING str:reverse( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be reversed. STRING No No Examples EXAMPLE 1 reverse( Hello World ) This outputs a string value by reversing the incoming input.string . In this scenario, the output is \"dlroW olleH\". split (Function) Splits the source string by split.string and returns the substring specified via the group.number . Syntax STRING str:split( STRING input.string, STRING split.string, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No split.string The string value to be used to split the input.string . STRING No No group.number The index of the split group INT No No Examples EXAMPLE 1 split( WSO2,ABM,NSFT , , , 0) This splits the given input.string by given split.string and returns the string in the index given by group.number. In this scenario, the output will is \"WSO2\". strcmp (Function) Compares two strings lexicographically. Syntax INT str:strcmp( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument that should be compared with the first argument lexicographically. STRING No No Examples EXAMPLE 1 strcmp( AbCDefghiJ KLMN , 'Hello') This compares two strings lexicographically and outputs an integer value substr (Function) This returns a new string that is a substring of this string Syntax STRING str:substr( STRING input.string, INT begin.index, INT length, STRING regex, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be processed. STRING No No begin.index Starting index to consider for the substring. INT No No length The length of the substring. INT No No regex The regular expression that should be matched with the input string.. STRING No No group.number The regex group number INT No No Examples EXAMPLE 1 substr( AbCDefghiJ KLMN , 4) This outputs the substring based on the given begin.index . In this scenario, the output is \"efghiJ KLMN\". EXAMPLE 2 substr( AbCDefghiJ KLMN , 2, 4) This outputs the substring based on the given begin.index and length. In this scenario, the output is \"CDef\". EXAMPLE 3 substr( WSO2D efghiJ KLMN , '^WSO2(.*)') This outputs the substring by applying the regex. In this scenario, the output is \"WSO2D efghiJ KLMN\". EXAMPLE 4 substr( WSO2 cep WSO2 XX E hi hA WSO2 heAllo , 'WSO2(.*)A(.*)', 2) This outputs the substring by applying the regex and considering the group.number . In this scenario, the output is \" ello\". trim (Function) Returns a copy of the string with leading and trailing whitespace omitted Syntax STRING str:trim( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that needs to be trimmed. STRING No No Examples EXAMPLE 1 trim( AbCDefghiJ KLMN ) This returns a copy of the input.string with the leading and/or trailing white-spaces omitted. In this scenario, the output is \"AbCDefghiJ KLMN\". unhex (Function) unhex(str) interprets each pair of characters in the argument as a hexadecimal number and converts it to the byte represented by the number Syntax STRING str:unhex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The hexadecimal input string that needs to be converted to string. STRING No No Examples EXAMPLE 1 unhex( 4d7953514c ) This converts the hexadecimal value to string upper (Function) Converts the simple letters in the input string to the equivalent capital/block letters. Syntax STRING str:upper( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be converted to the upper case (equivalent capital/block letters). STRING No No Examples EXAMPLE 1 upper( Hello World ) This converts the simple letters in the input.string to theequivalent capital letters. In this scenario, the output is \"HELLO WORLD\". tokenize (Stream Processor) This splits a string into words Syntax str:tokenize( STRING input.string, STRING regex) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input text which should be split. STRING No No regex The string value to be used to tokenize the 'input.string'. STRING No No Examples EXAMPLE 1 define stream inputStream (str string); @info(name = 'query1') from inputStream#str:tokenize(str , regex) select text insert into outputStream; This query performs tokenization for the given string.","title":"4.0.12"},{"location":"api/4.0.12/#api-docs-v4012","text":"","title":"API Docs - v4.0.12"},{"location":"api/4.0.12/#str","text":"","title":"Str"},{"location":"api/4.0.12/#charat-function","text":"Returns the char value as a string value at the specified index. Syntax STRING str:charAt( STRING input.value, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.value The input string that used to find the character. STRING No No index The variable that specifies the index. INT No No Examples EXAMPLE 1 charAt( WSO2 , 1) This will output the character that exists at index 1. In this case, it will output 'S'.","title":"charAt (Function)"},{"location":"api/4.0.12/#coalesce-function","text":"Returns the value of the first of its input parameters that is not null Syntax INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT str:coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have one or more input parameters in any data type. All the specified parameters should be of the same type. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No No Examples EXAMPLE 1 coalesce(null, BBB , CCC ) This returns the first input parameter that is not null. In this example, it returns \"BBB\"","title":"coalesce (Function)"},{"location":"api/4.0.12/#concat-function","text":"Returns a string that is the result of concatenating two or more string values. Syntax STRING str:concat( STRING argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have two or more string type input parameters. STRING No No Examples EXAMPLE 1 concat( D533 , 8JU^ , XYZ ) This returns a string value by concatenating the given arguments. In this case, it will return \"D5338JU^XYZ\" as the output","title":"concat (Function)"},{"location":"api/4.0.12/#contains-function","text":"This method returns true if the input.string contains the specified sequence of char values in the search.string . Syntax BOOL str:contains( STRING input.string, STRING search.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string Input string value. STRING No No search.string The string value to be searched for in the input.string . STRING No No Examples EXAMPLE 1 contains( 21 products are produced by WSO2 currently , WSO2 ) This returns a boolean value as the output. In this case, it returns true .","title":"contains (Function)"},{"location":"api/4.0.12/#equalsignorecase-function","text":"Compares two strings lexicographically. Syntax BOOL str:equalsIgnoreCase( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument. This is compared with the first argument. STRING No No Examples EXAMPLE 1 equalsIgnoreCase( WSO2 , wso2 ) This returns a boolean value as the output. In this scenario, it returns \"true\".","title":"equalsIgnoreCase (Function)"},{"location":"api/4.0.12/#hex-function","text":"Returns a hexadecimal string representation of str, where each byte of each character in str is converted to two hexadecimal digits Syntax STRING str:hex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the hexadecimal value. STRING No No Examples EXAMPLE 1 hex( MySQL ) This returns the hexadecimal value of the input.string. In this scenario, the output is \"4d7953514c\".","title":"hex (Function)"},{"location":"api/4.0.12/#length-function","text":"Returns the length of this string. Syntax INT str:length( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the length. STRING No No Examples EXAMPLE 1 length( Hello World ) This outputs the length of the provided string. In this scenario, the, output is 11 .","title":"length (Function)"},{"location":"api/4.0.12/#lower-function","text":"Converts the capital letters in the input string to the equivalent simple letters. Syntax STRING str:lower( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to convert to the lower case (i.e., equivalent simple letters). STRING No No Examples EXAMPLE 1 lower( WSO2 cep ) This converts the capital letters in the input.string to the equivalent simple letters. In this scenario, the output is \"wso2 cep \".","title":"lower (Function)"},{"location":"api/4.0.12/#regexp-function","text":"Returns whether this 'string' matches the given regular expression 'regex' or not. Syntax BOOL str:regexp( STRING input.string, STRING regex) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to match with the given regular expression. STRING No No regex The regular expression to be matched with the input string. STRING No No Examples EXAMPLE 1 regexp( WSO2 abcdh , WSO(.*h) ) This returns a boolean value after matching regular expression with the given string. In this scenario, it returns \"true\" as the output.","title":"regexp (Function)"},{"location":"api/4.0.12/#repeat-function","text":"Repeats a string for a specified number of times. Syntax STRING str:repeat( STRING input.string, INT times) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that is repeated the number of times as defined by the user. STRING No No times The number of times the input.string needs to be repeated . INT No No Examples EXAMPLE 1 repeat( StRing 1 , 3) This returns a string value by repeating the string for a specified number of times. In this scenario, the output is \"StRing 1StRing 1StRing 1\".","title":"repeat (Function)"},{"location":"api/4.0.12/#replaceall-function","text":"Replaces each substring of this string that matches the given expression with the given replacement. Syntax STRING str:replaceAll( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No regex The regular expression to be matched with the input string. STRING No No replacement.string The striing with which each substring that matches the given expression should be replaced. STRING No No Examples EXAMPLE 1 replaceAll( hello hi hello , 'hello', 'test') This returns a string after replacing the substrings of the input string with the replacement string. In this scenario, the output is \"test hi test\" .","title":"replaceAll (Function)"},{"location":"api/4.0.12/#replacefirst-function","text":"Replaces the first substring of this string that matches the given expression, with the given replacement. Syntax STRING str:replaceFirst( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be replaced. STRING No No regex The regular expression with which the input string should be matched. STRING No No replacement.string The string with which the first substring of input string that matches the regular expression should be replaced. STRING No No Examples EXAMPLE 1 replaceFirst( hello WSO2 A hello , 'WSO2(.*)A', 'XXXX') This returns a string after replacing the first substring with the given replacement string. In this scenario, the output is \"hello XXXX hello\".","title":"replaceFirst (Function)"},{"location":"api/4.0.12/#reverse-function","text":"Returns the reverse ordered string of the input. Syntax STRING str:reverse( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be reversed. STRING No No Examples EXAMPLE 1 reverse( Hello World ) This outputs a string value by reversing the incoming input.string . In this scenario, the output is \"dlroW olleH\".","title":"reverse (Function)"},{"location":"api/4.0.12/#split-function","text":"Splits the source string by split.string and returns the substring specified via the group.number . Syntax STRING str:split( STRING input.string, STRING split.string, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No split.string The string value to be used to split the input.string . STRING No No group.number The index of the split group INT No No Examples EXAMPLE 1 split( WSO2,ABM,NSFT , , , 0) This splits the given input.string by given split.string and returns the string in the index given by group.number. In this scenario, the output will is \"WSO2\".","title":"split (Function)"},{"location":"api/4.0.12/#strcmp-function","text":"Compares two strings lexicographically. Syntax INT str:strcmp( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument that should be compared with the first argument lexicographically. STRING No No Examples EXAMPLE 1 strcmp( AbCDefghiJ KLMN , 'Hello') This compares two strings lexicographically and outputs an integer value","title":"strcmp (Function)"},{"location":"api/4.0.12/#substr-function","text":"This returns a new string that is a substring of this string Syntax STRING str:substr( STRING input.string, INT begin.index, INT length, STRING regex, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be processed. STRING No No begin.index Starting index to consider for the substring. INT No No length The length of the substring. INT No No regex The regular expression that should be matched with the input string.. STRING No No group.number The regex group number INT No No Examples EXAMPLE 1 substr( AbCDefghiJ KLMN , 4) This outputs the substring based on the given begin.index . In this scenario, the output is \"efghiJ KLMN\". EXAMPLE 2 substr( AbCDefghiJ KLMN , 2, 4) This outputs the substring based on the given begin.index and length. In this scenario, the output is \"CDef\". EXAMPLE 3 substr( WSO2D efghiJ KLMN , '^WSO2(.*)') This outputs the substring by applying the regex. In this scenario, the output is \"WSO2D efghiJ KLMN\". EXAMPLE 4 substr( WSO2 cep WSO2 XX E hi hA WSO2 heAllo , 'WSO2(.*)A(.*)', 2) This outputs the substring by applying the regex and considering the group.number . In this scenario, the output is \" ello\".","title":"substr (Function)"},{"location":"api/4.0.12/#trim-function","text":"Returns a copy of the string with leading and trailing whitespace omitted Syntax STRING str:trim( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that needs to be trimmed. STRING No No Examples EXAMPLE 1 trim( AbCDefghiJ KLMN ) This returns a copy of the input.string with the leading and/or trailing white-spaces omitted. In this scenario, the output is \"AbCDefghiJ KLMN\".","title":"trim (Function)"},{"location":"api/4.0.12/#unhex-function","text":"unhex(str) interprets each pair of characters in the argument as a hexadecimal number and converts it to the byte represented by the number Syntax STRING str:unhex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The hexadecimal input string that needs to be converted to string. STRING No No Examples EXAMPLE 1 unhex( 4d7953514c ) This converts the hexadecimal value to string","title":"unhex (Function)"},{"location":"api/4.0.12/#upper-function","text":"Converts the simple letters in the input string to the equivalent capital/block letters. Syntax STRING str:upper( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be converted to the upper case (equivalent capital/block letters). STRING No No Examples EXAMPLE 1 upper( Hello World ) This converts the simple letters in the input.string to theequivalent capital letters. In this scenario, the output is \"HELLO WORLD\".","title":"upper (Function)"},{"location":"api/4.0.12/#tokenize-stream-processor","text":"This splits a string into words Syntax str:tokenize( STRING input.string, STRING regex) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input text which should be split. STRING No No regex The string value to be used to tokenize the 'input.string'. STRING No No Examples EXAMPLE 1 define stream inputStream (str string); @info(name = 'query1') from inputStream#str:tokenize(str , regex) select text insert into outputStream; This query performs tokenization for the given string.","title":"tokenize (Stream Processor)"},{"location":"api/4.0.13/","text":"API Docs - v4.0.13 Str groupConcat (Aggregate Function) Returns concated string keys by aggregating all the events separating them by the given separator. Syntax STRING str:groupConcat( STRING key, STRING separator, STRING distinct, STRING order) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key The string that need to be aggregated. STRING No No separator The separator that separates each string key getting aggregated. , STRING Yes No distinct To only have distinct string keys in the the aggregation. false STRING Yes No order Accepts 'ASC' or 'DESC' strings to sort the string keys by ascending or descending order. No order STRING Yes No Examples EXAMPLE 1 from InputStream#window.time(5 min) select str:groupConcat( key ) as groupedKeys input OutputStream; This returns a string that is the result of the concatenated keys separated by the given separator. When we send events having values for the key 'A' , 'B' , 'S' , 'C' , 'A' it will return \"A,B,S,C,A\" as the output EXAMPLE 2 from InputStream#window.time(5 min) select groupConcat( key , - ,true, ASC ) as groupedKeys input OutputStream; This returns a string that is the result of the concatenated keys separated by the given separator. When we send events having values for the key 'A' , 'B' , 'S' , 'C' , 'A' it will return \"A-B-C-S\" as the output charAt (Function) Returns the char value as a string value at the specified index. Syntax STRING str:charAt( STRING input.value, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.value The input string that used to find the character. STRING No No index The variable that specifies the index. INT No No Examples EXAMPLE 1 charAt( WSO2 , 1) This will output the character that exists at index 1. In this case, it will output 'S'. coalesce (Function) Returns the value of the first of its input parameters that is not null Syntax INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT str:coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have one or more input parameters in any data type. All the specified parameters should be of the same type. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No No Examples EXAMPLE 1 coalesce(null, BBB , CCC ) This returns the first input parameter that is not null. In this example, it returns \"BBB\" concat (Function) Returns a string that is the result of concatenating two or more string values. Syntax STRING str:concat( STRING argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have two or more string type input parameters. STRING No No Examples EXAMPLE 1 concat( D533 , 8JU^ , XYZ ) This returns a string value by concatenating the given arguments. In this case, it will return \"D5338JU^XYZ\" as the output contains (Function) This method returns true if the input.string contains the specified sequence of char values in the search.string . Syntax BOOL str:contains( STRING input.string, STRING search.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string Input string value. STRING No No search.string The string value to be searched for in the input.string . STRING No No Examples EXAMPLE 1 contains( 21 products are produced by WSO2 currently , WSO2 ) This returns a boolean value as the output. In this case, it returns true . equalsIgnoreCase (Function) Compares two strings lexicographically. Syntax BOOL str:equalsIgnoreCase( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument. This is compared with the first argument. STRING No No Examples EXAMPLE 1 equalsIgnoreCase( WSO2 , wso2 ) This returns a boolean value as the output. In this scenario, it returns \"true\". hex (Function) Returns a hexadecimal string representation of str, where each byte of each character in str is converted to two hexadecimal digits Syntax STRING str:hex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the hexadecimal value. STRING No No Examples EXAMPLE 1 hex( MySQL ) This returns the hexadecimal value of the input.string. In this scenario, the output is \"4d7953514c\". length (Function) Returns the length of this string. Syntax INT str:length( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the length. STRING No No Examples EXAMPLE 1 length( Hello World ) This outputs the length of the provided string. In this scenario, the, output is 11 . lower (Function) Converts the capital letters in the input string to the equivalent simple letters. Syntax STRING str:lower( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to convert to the lower case (i.e., equivalent simple letters). STRING No No Examples EXAMPLE 1 lower( WSO2 cep ) This converts the capital letters in the input.string to the equivalent simple letters. In this scenario, the output is \"wso2 cep \". regexp (Function) Returns whether this 'string' matches the given regular expression 'regex' or not. Syntax BOOL str:regexp( STRING input.string, STRING regex) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to match with the given regular expression. STRING No No regex The regular expression to be matched with the input string. STRING No No Examples EXAMPLE 1 regexp( WSO2 abcdh , WSO(.*h) ) This returns a boolean value after matching regular expression with the given string. In this scenario, it returns \"true\" as the output. repeat (Function) Repeats a string for a specified number of times. Syntax STRING str:repeat( STRING input.string, INT times) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that is repeated the number of times as defined by the user. STRING No No times The number of times the input.string needs to be repeated . INT No No Examples EXAMPLE 1 repeat( StRing 1 , 3) This returns a string value by repeating the string for a specified number of times. In this scenario, the output is \"StRing 1StRing 1StRing 1\". replaceAll (Function) Replaces each substring of this string that matches the given expression with the given replacement. Syntax STRING str:replaceAll( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No regex The regular expression to be matched with the input string. STRING No No replacement.string The striing with which each substring that matches the given expression should be replaced. STRING No No Examples EXAMPLE 1 replaceAll( hello hi hello , 'hello', 'test') This returns a string after replacing the substrings of the input string with the replacement string. In this scenario, the output is \"test hi test\" . replaceFirst (Function) Replaces the first substring of this string that matches the given expression, with the given replacement. Syntax STRING str:replaceFirst( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be replaced. STRING No No regex The regular expression with which the input string should be matched. STRING No No replacement.string The string with which the first substring of input string that matches the regular expression should be replaced. STRING No No Examples EXAMPLE 1 replaceFirst( hello WSO2 A hello , 'WSO2(.*)A', 'XXXX') This returns a string after replacing the first substring with the given replacement string. In this scenario, the output is \"hello XXXX hello\". reverse (Function) Returns the reverse ordered string of the input. Syntax STRING str:reverse( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be reversed. STRING No No Examples EXAMPLE 1 reverse( Hello World ) This outputs a string value by reversing the incoming input.string . In this scenario, the output is \"dlroW olleH\". split (Function) Splits the source string by split.string and returns the substring specified via the group.number . Syntax STRING str:split( STRING input.string, STRING split.string, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No split.string The string value to be used to split the input.string . STRING No No group.number The index of the split group INT No No Examples EXAMPLE 1 split( WSO2,ABM,NSFT , , , 0) This splits the given input.string by given split.string and returns the string in the index given by group.number. In this scenario, the output will is \"WSO2\". strcmp (Function) Compares two strings lexicographically. Syntax INT str:strcmp( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument that should be compared with the first argument lexicographically. STRING No No Examples EXAMPLE 1 strcmp( AbCDefghiJ KLMN , 'Hello') This compares two strings lexicographically and outputs an integer value substr (Function) This returns a new string that is a substring of this string Syntax STRING str:substr( STRING input.string, INT begin.index, INT length, STRING regex, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be processed. STRING No No begin.index Starting index to consider for the substring. INT No No length The length of the substring. INT No No regex The regular expression that should be matched with the input string.. STRING No No group.number The regex group number INT No No Examples EXAMPLE 1 substr( AbCDefghiJ KLMN , 4) This outputs the substring based on the given begin.index . In this scenario, the output is \"efghiJ KLMN\". EXAMPLE 2 substr( AbCDefghiJ KLMN , 2, 4) This outputs the substring based on the given begin.index and length. In this scenario, the output is \"CDef\". EXAMPLE 3 substr( WSO2D efghiJ KLMN , '^WSO2(.*)') This outputs the substring by applying the regex. In this scenario, the output is \"WSO2D efghiJ KLMN\". EXAMPLE 4 substr( WSO2 cep WSO2 XX E hi hA WSO2 heAllo , 'WSO2(.*)A(.*)', 2) This outputs the substring by applying the regex and considering the group.number . In this scenario, the output is \" ello\". trim (Function) Returns a copy of the string with leading and trailing whitespace omitted Syntax STRING str:trim( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that needs to be trimmed. STRING No No Examples EXAMPLE 1 trim( AbCDefghiJ KLMN ) This returns a copy of the input.string with the leading and/or trailing white-spaces omitted. In this scenario, the output is \"AbCDefghiJ KLMN\". unhex (Function) unhex(str) interprets each pair of characters in the argument as a hexadecimal number and converts it to the byte represented by the number Syntax STRING str:unhex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The hexadecimal input string that needs to be converted to string. STRING No No Examples EXAMPLE 1 unhex( 4d7953514c ) This converts the hexadecimal value to string upper (Function) Converts the simple letters in the input string to the equivalent capital/block letters. Syntax STRING str:upper( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be converted to the upper case (equivalent capital/block letters). STRING No No Examples EXAMPLE 1 upper( Hello World ) This converts the simple letters in the input.string to theequivalent capital letters. In this scenario, the output is \"HELLO WORLD\". tokenize (Stream Processor) This splits a string into words Syntax str:tokenize( STRING input.string, STRING regex) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input text which should be split. STRING No No regex The string value to be used to tokenize the 'input.string'. STRING No No Examples EXAMPLE 1 define stream inputStream (str string); @info(name = 'query1') from inputStream#str:tokenize(str , regex) select text insert into outputStream; This query performs tokenization for the given string.","title":"4.0.13"},{"location":"api/4.0.13/#api-docs-v4013","text":"","title":"API Docs - v4.0.13"},{"location":"api/4.0.13/#str","text":"","title":"Str"},{"location":"api/4.0.13/#groupconcat-aggregate-function","text":"Returns concated string keys by aggregating all the events separating them by the given separator. Syntax STRING str:groupConcat( STRING key, STRING separator, STRING distinct, STRING order) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key The string that need to be aggregated. STRING No No separator The separator that separates each string key getting aggregated. , STRING Yes No distinct To only have distinct string keys in the the aggregation. false STRING Yes No order Accepts 'ASC' or 'DESC' strings to sort the string keys by ascending or descending order. No order STRING Yes No Examples EXAMPLE 1 from InputStream#window.time(5 min) select str:groupConcat( key ) as groupedKeys input OutputStream; This returns a string that is the result of the concatenated keys separated by the given separator. When we send events having values for the key 'A' , 'B' , 'S' , 'C' , 'A' it will return \"A,B,S,C,A\" as the output EXAMPLE 2 from InputStream#window.time(5 min) select groupConcat( key , - ,true, ASC ) as groupedKeys input OutputStream; This returns a string that is the result of the concatenated keys separated by the given separator. When we send events having values for the key 'A' , 'B' , 'S' , 'C' , 'A' it will return \"A-B-C-S\" as the output","title":"groupConcat (Aggregate Function)"},{"location":"api/4.0.13/#charat-function","text":"Returns the char value as a string value at the specified index. Syntax STRING str:charAt( STRING input.value, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.value The input string that used to find the character. STRING No No index The variable that specifies the index. INT No No Examples EXAMPLE 1 charAt( WSO2 , 1) This will output the character that exists at index 1. In this case, it will output 'S'.","title":"charAt (Function)"},{"location":"api/4.0.13/#coalesce-function","text":"Returns the value of the first of its input parameters that is not null Syntax INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT str:coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have one or more input parameters in any data type. All the specified parameters should be of the same type. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No No Examples EXAMPLE 1 coalesce(null, BBB , CCC ) This returns the first input parameter that is not null. In this example, it returns \"BBB\"","title":"coalesce (Function)"},{"location":"api/4.0.13/#concat-function","text":"Returns a string that is the result of concatenating two or more string values. Syntax STRING str:concat( STRING argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have two or more string type input parameters. STRING No No Examples EXAMPLE 1 concat( D533 , 8JU^ , XYZ ) This returns a string value by concatenating the given arguments. In this case, it will return \"D5338JU^XYZ\" as the output","title":"concat (Function)"},{"location":"api/4.0.13/#contains-function","text":"This method returns true if the input.string contains the specified sequence of char values in the search.string . Syntax BOOL str:contains( STRING input.string, STRING search.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string Input string value. STRING No No search.string The string value to be searched for in the input.string . STRING No No Examples EXAMPLE 1 contains( 21 products are produced by WSO2 currently , WSO2 ) This returns a boolean value as the output. In this case, it returns true .","title":"contains (Function)"},{"location":"api/4.0.13/#equalsignorecase-function","text":"Compares two strings lexicographically. Syntax BOOL str:equalsIgnoreCase( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument. This is compared with the first argument. STRING No No Examples EXAMPLE 1 equalsIgnoreCase( WSO2 , wso2 ) This returns a boolean value as the output. In this scenario, it returns \"true\".","title":"equalsIgnoreCase (Function)"},{"location":"api/4.0.13/#hex-function","text":"Returns a hexadecimal string representation of str, where each byte of each character in str is converted to two hexadecimal digits Syntax STRING str:hex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the hexadecimal value. STRING No No Examples EXAMPLE 1 hex( MySQL ) This returns the hexadecimal value of the input.string. In this scenario, the output is \"4d7953514c\".","title":"hex (Function)"},{"location":"api/4.0.13/#length-function","text":"Returns the length of this string. Syntax INT str:length( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the length. STRING No No Examples EXAMPLE 1 length( Hello World ) This outputs the length of the provided string. In this scenario, the, output is 11 .","title":"length (Function)"},{"location":"api/4.0.13/#lower-function","text":"Converts the capital letters in the input string to the equivalent simple letters. Syntax STRING str:lower( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to convert to the lower case (i.e., equivalent simple letters). STRING No No Examples EXAMPLE 1 lower( WSO2 cep ) This converts the capital letters in the input.string to the equivalent simple letters. In this scenario, the output is \"wso2 cep \".","title":"lower (Function)"},{"location":"api/4.0.13/#regexp-function","text":"Returns whether this 'string' matches the given regular expression 'regex' or not. Syntax BOOL str:regexp( STRING input.string, STRING regex) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to match with the given regular expression. STRING No No regex The regular expression to be matched with the input string. STRING No No Examples EXAMPLE 1 regexp( WSO2 abcdh , WSO(.*h) ) This returns a boolean value after matching regular expression with the given string. In this scenario, it returns \"true\" as the output.","title":"regexp (Function)"},{"location":"api/4.0.13/#repeat-function","text":"Repeats a string for a specified number of times. Syntax STRING str:repeat( STRING input.string, INT times) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that is repeated the number of times as defined by the user. STRING No No times The number of times the input.string needs to be repeated . INT No No Examples EXAMPLE 1 repeat( StRing 1 , 3) This returns a string value by repeating the string for a specified number of times. In this scenario, the output is \"StRing 1StRing 1StRing 1\".","title":"repeat (Function)"},{"location":"api/4.0.13/#replaceall-function","text":"Replaces each substring of this string that matches the given expression with the given replacement. Syntax STRING str:replaceAll( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No regex The regular expression to be matched with the input string. STRING No No replacement.string The striing with which each substring that matches the given expression should be replaced. STRING No No Examples EXAMPLE 1 replaceAll( hello hi hello , 'hello', 'test') This returns a string after replacing the substrings of the input string with the replacement string. In this scenario, the output is \"test hi test\" .","title":"replaceAll (Function)"},{"location":"api/4.0.13/#replacefirst-function","text":"Replaces the first substring of this string that matches the given expression, with the given replacement. Syntax STRING str:replaceFirst( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be replaced. STRING No No regex The regular expression with which the input string should be matched. STRING No No replacement.string The string with which the first substring of input string that matches the regular expression should be replaced. STRING No No Examples EXAMPLE 1 replaceFirst( hello WSO2 A hello , 'WSO2(.*)A', 'XXXX') This returns a string after replacing the first substring with the given replacement string. In this scenario, the output is \"hello XXXX hello\".","title":"replaceFirst (Function)"},{"location":"api/4.0.13/#reverse-function","text":"Returns the reverse ordered string of the input. Syntax STRING str:reverse( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be reversed. STRING No No Examples EXAMPLE 1 reverse( Hello World ) This outputs a string value by reversing the incoming input.string . In this scenario, the output is \"dlroW olleH\".","title":"reverse (Function)"},{"location":"api/4.0.13/#split-function","text":"Splits the source string by split.string and returns the substring specified via the group.number . Syntax STRING str:split( STRING input.string, STRING split.string, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No split.string The string value to be used to split the input.string . STRING No No group.number The index of the split group INT No No Examples EXAMPLE 1 split( WSO2,ABM,NSFT , , , 0) This splits the given input.string by given split.string and returns the string in the index given by group.number. In this scenario, the output will is \"WSO2\".","title":"split (Function)"},{"location":"api/4.0.13/#strcmp-function","text":"Compares two strings lexicographically. Syntax INT str:strcmp( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument that should be compared with the first argument lexicographically. STRING No No Examples EXAMPLE 1 strcmp( AbCDefghiJ KLMN , 'Hello') This compares two strings lexicographically and outputs an integer value","title":"strcmp (Function)"},{"location":"api/4.0.13/#substr-function","text":"This returns a new string that is a substring of this string Syntax STRING str:substr( STRING input.string, INT begin.index, INT length, STRING regex, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be processed. STRING No No begin.index Starting index to consider for the substring. INT No No length The length of the substring. INT No No regex The regular expression that should be matched with the input string.. STRING No No group.number The regex group number INT No No Examples EXAMPLE 1 substr( AbCDefghiJ KLMN , 4) This outputs the substring based on the given begin.index . In this scenario, the output is \"efghiJ KLMN\". EXAMPLE 2 substr( AbCDefghiJ KLMN , 2, 4) This outputs the substring based on the given begin.index and length. In this scenario, the output is \"CDef\". EXAMPLE 3 substr( WSO2D efghiJ KLMN , '^WSO2(.*)') This outputs the substring by applying the regex. In this scenario, the output is \"WSO2D efghiJ KLMN\". EXAMPLE 4 substr( WSO2 cep WSO2 XX E hi hA WSO2 heAllo , 'WSO2(.*)A(.*)', 2) This outputs the substring by applying the regex and considering the group.number . In this scenario, the output is \" ello\".","title":"substr (Function)"},{"location":"api/4.0.13/#trim-function","text":"Returns a copy of the string with leading and trailing whitespace omitted Syntax STRING str:trim( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that needs to be trimmed. STRING No No Examples EXAMPLE 1 trim( AbCDefghiJ KLMN ) This returns a copy of the input.string with the leading and/or trailing white-spaces omitted. In this scenario, the output is \"AbCDefghiJ KLMN\".","title":"trim (Function)"},{"location":"api/4.0.13/#unhex-function","text":"unhex(str) interprets each pair of characters in the argument as a hexadecimal number and converts it to the byte represented by the number Syntax STRING str:unhex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The hexadecimal input string that needs to be converted to string. STRING No No Examples EXAMPLE 1 unhex( 4d7953514c ) This converts the hexadecimal value to string","title":"unhex (Function)"},{"location":"api/4.0.13/#upper-function","text":"Converts the simple letters in the input string to the equivalent capital/block letters. Syntax STRING str:upper( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be converted to the upper case (equivalent capital/block letters). STRING No No Examples EXAMPLE 1 upper( Hello World ) This converts the simple letters in the input.string to theequivalent capital letters. In this scenario, the output is \"HELLO WORLD\".","title":"upper (Function)"},{"location":"api/4.0.13/#tokenize-stream-processor","text":"This splits a string into words Syntax str:tokenize( STRING input.string, STRING regex) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input text which should be split. STRING No No regex The string value to be used to tokenize the 'input.string'. STRING No No Examples EXAMPLE 1 define stream inputStream (str string); @info(name = 'query1') from inputStream#str:tokenize(str , regex) select text insert into outputStream; This query performs tokenization for the given string.","title":"tokenize (Stream Processor)"},{"location":"api/4.0.14/","text":"API Docs - v4.0.14 Str groupConcat (Aggregate Function) Returns concated string keys by aggregating all the events separating them by the given separator. Syntax STRING str:groupConcat( STRING key, STRING separator, STRING distinct, STRING order) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key The string that need to be aggregated. STRING No No separator The separator that separates each string key getting aggregated. , STRING Yes No distinct To only have distinct string keys in the the aggregation. false STRING Yes No order Accepts 'ASC' or 'DESC' strings to sort the string keys by ascending or descending order. No order STRING Yes No Examples EXAMPLE 1 from InputStream#window.time(5 min) select str:groupConcat( key ) as groupedKeys input OutputStream; This returns a string that is the result of the concatenated keys separated by the given separator. When we send events having values for the key 'A' , 'B' , 'S' , 'C' , 'A' it will return \"A,B,S,C,A\" as the output EXAMPLE 2 from InputStream#window.time(5 min) select groupConcat( key , - ,true, ASC ) as groupedKeys input OutputStream; This returns a string that is the result of the concatenated keys separated by the given separator. When we send events having values for the key 'A' , 'B' , 'S' , 'C' , 'A' it will return \"A-B-C-S\" as the output charAt (Function) Returns the char value as a string value at the specified index. Syntax STRING str:charAt( STRING input.value, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.value The input string that used to find the character. STRING No No index The variable that specifies the index. INT No No Examples EXAMPLE 1 charAt( WSO2 , 1) This will output the character that exists at index 1. In this case, it will output 'S'. coalesce (Function) Returns the value of the first of its input parameters that is not null Syntax INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT str:coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have one or more input parameters in any data type. All the specified parameters should be of the same type. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No No Examples EXAMPLE 1 coalesce(null, BBB , CCC ) This returns the first input parameter that is not null. In this example, it returns \"BBB\" concat (Function) Returns a string that is the result of concatenating two or more string values. Syntax STRING str:concat( STRING argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have two or more string type input parameters. STRING No No Examples EXAMPLE 1 concat( D533 , 8JU^ , XYZ ) This returns a string value by concatenating the given arguments. In this case, it will return \"D5338JU^XYZ\" as the output contains (Function) This method returns true if the input.string contains the specified sequence of char values in the search.string . Syntax BOOL str:contains( STRING input.string, STRING search.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string Input string value. STRING No No search.string The string value to be searched for in the input.string . STRING No No Examples EXAMPLE 1 contains( 21 products are produced by WSO2 currently , WSO2 ) This returns a boolean value as the output. In this case, it returns true . equalsIgnoreCase (Function) Compares two strings lexicographically. Syntax BOOL str:equalsIgnoreCase( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument. This is compared with the first argument. STRING No No Examples EXAMPLE 1 equalsIgnoreCase( WSO2 , wso2 ) This returns a boolean value as the output. In this scenario, it returns \"true\". fillTemplate (Function) Replaces the templated positions in a given template with provided strings which matches withthe index in the template. Syntax STRING str:fillTemplate( STRING template, STRING|INT|LONG|DOUBLE|FLOAT|BOOL replacement.strings) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic template The string with templated fields that needs to be filled with the given strings. Templated fields should be in following the format {{INDEX}} where INDEX is an integer. This index is used to map the strings which are used to replace the templated fields. STRING No No replacement.strings Strings to replace the templated positions in the template. There can be any number of arguments from the 2nd argument. STRING INT LONG DOUBLE FLOAT BOOL No No Examples EXAMPLE 1 str:fillTemplate( This is {{1}} for the {{2}} function , 'an example', 'fillTemplate') In this example, the template is 'This is {{1}} for the {{2}} function'.Here the templated string {{1}} will be replaced with the 1st string value provided ('an example'). {{2}} will be replaced with the 2nd string provided ('fillTemplate') The return string will be 'This is an example for the fillTemplate function'. hex (Function) Returns a hexadecimal string representation of str, where each byte of each character in str is converted to two hexadecimal digits Syntax STRING str:hex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the hexadecimal value. STRING No No Examples EXAMPLE 1 hex( MySQL ) This returns the hexadecimal value of the input.string. In this scenario, the output is \"4d7953514c\". length (Function) Returns the length of this string. Syntax INT str:length( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the length. STRING No No Examples EXAMPLE 1 length( Hello World ) This outputs the length of the provided string. In this scenario, the, output is 11 . lower (Function) Converts the capital letters in the input string to the equivalent simple letters. Syntax STRING str:lower( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to convert to the lower case (i.e., equivalent simple letters). STRING No No Examples EXAMPLE 1 lower( WSO2 cep ) This converts the capital letters in the input.string to the equivalent simple letters. In this scenario, the output is \"wso2 cep \". regexp (Function) Returns whether this 'string' matches the given regular expression 'regex' or not. Syntax BOOL str:regexp( STRING input.string, STRING regex) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to match with the given regular expression. STRING No No regex The regular expression to be matched with the input string. STRING No No Examples EXAMPLE 1 regexp( WSO2 abcdh , WSO(.*h) ) This returns a boolean value after matching regular expression with the given string. In this scenario, it returns \"true\" as the output. repeat (Function) Repeats a string for a specified number of times. Syntax STRING str:repeat( STRING input.string, INT times) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that is repeated the number of times as defined by the user. STRING No No times The number of times the input.string needs to be repeated . INT No No Examples EXAMPLE 1 repeat( StRing 1 , 3) This returns a string value by repeating the string for a specified number of times. In this scenario, the output is \"StRing 1StRing 1StRing 1\". replaceAll (Function) Replaces each substring of this string that matches the given expression with the given replacement. Syntax STRING str:replaceAll( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No regex The regular expression to be matched with the input string. STRING No No replacement.string The striing with which each substring that matches the given expression should be replaced. STRING No No Examples EXAMPLE 1 replaceAll( hello hi hello , 'hello', 'test') This returns a string after replacing the substrings of the input string with the replacement string. In this scenario, the output is \"test hi test\" . replaceFirst (Function) Replaces the first substring of this string that matches the given expression, with the given replacement. Syntax STRING str:replaceFirst( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be replaced. STRING No No regex The regular expression with which the input string should be matched. STRING No No replacement.string The string with which the first substring of input string that matches the regular expression should be replaced. STRING No No Examples EXAMPLE 1 replaceFirst( hello WSO2 A hello , 'WSO2(.*)A', 'XXXX') This returns a string after replacing the first substring with the given replacement string. In this scenario, the output is \"hello XXXX hello\". reverse (Function) Returns the reverse ordered string of the input. Syntax STRING str:reverse( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be reversed. STRING No No Examples EXAMPLE 1 reverse( Hello World ) This outputs a string value by reversing the incoming input.string . In this scenario, the output is \"dlroW olleH\". split (Function) Splits the source string by split.string and returns the substring specified via the group.number . Syntax STRING str:split( STRING input.string, STRING split.string, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No split.string The string value to be used to split the input.string . STRING No No group.number The index of the split group INT No No Examples EXAMPLE 1 split( WSO2,ABM,NSFT , , , 0) This splits the given input.string by given split.string and returns the string in the index given by group.number. In this scenario, the output will is \"WSO2\". strcmp (Function) Compares two strings lexicographically. Syntax INT str:strcmp( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument that should be compared with the first argument lexicographically. STRING No No Examples EXAMPLE 1 strcmp( AbCDefghiJ KLMN , 'Hello') This compares two strings lexicographically and outputs an integer value substr (Function) This returns a new string that is a substring of this string Syntax STRING str:substr( STRING input.string, INT begin.index, INT length, STRING regex, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be processed. STRING No No begin.index Starting index to consider for the substring. INT No No length The length of the substring. INT No No regex The regular expression that should be matched with the input string.. STRING No No group.number The regex group number INT No No Examples EXAMPLE 1 substr( AbCDefghiJ KLMN , 4) This outputs the substring based on the given begin.index . In this scenario, the output is \"efghiJ KLMN\". EXAMPLE 2 substr( AbCDefghiJ KLMN , 2, 4) This outputs the substring based on the given begin.index and length. In this scenario, the output is \"CDef\". EXAMPLE 3 substr( WSO2D efghiJ KLMN , '^WSO2(.*)') This outputs the substring by applying the regex. In this scenario, the output is \"WSO2D efghiJ KLMN\". EXAMPLE 4 substr( WSO2 cep WSO2 XX E hi hA WSO2 heAllo , 'WSO2(.*)A(.*)', 2) This outputs the substring by applying the regex and considering the group.number . In this scenario, the output is \" ello\". trim (Function) Returns a copy of the string with leading and trailing whitespace omitted Syntax STRING str:trim( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that needs to be trimmed. STRING No No Examples EXAMPLE 1 trim( AbCDefghiJ KLMN ) This returns a copy of the input.string with the leading and/or trailing white-spaces omitted. In this scenario, the output is \"AbCDefghiJ KLMN\". unhex (Function) unhex(str) interprets each pair of characters in the argument as a hexadecimal number and converts it to the byte represented by the number Syntax STRING str:unhex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The hexadecimal input string that needs to be converted to string. STRING No No Examples EXAMPLE 1 unhex( 4d7953514c ) This converts the hexadecimal value to string upper (Function) Converts the simple letters in the input string to the equivalent capital/block letters. Syntax STRING str:upper( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be converted to the upper case (equivalent capital/block letters). STRING No No Examples EXAMPLE 1 upper( Hello World ) This converts the simple letters in the input.string to theequivalent capital letters. In this scenario, the output is \"HELLO WORLD\". tokenize (Stream Processor) This splits a string into words Syntax str:tokenize( STRING input.string, STRING regex) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input text which should be split. STRING No No regex The string value to be used to tokenize the 'input.string'. STRING No No Examples EXAMPLE 1 define stream inputStream (str string); @info(name = 'query1') from inputStream#str:tokenize(str , regex) select text insert into outputStream; This query performs tokenization for the given string.","title":"4.0.14"},{"location":"api/4.0.14/#api-docs-v4014","text":"","title":"API Docs - v4.0.14"},{"location":"api/4.0.14/#str","text":"","title":"Str"},{"location":"api/4.0.14/#groupconcat-aggregate-function","text":"Returns concated string keys by aggregating all the events separating them by the given separator. Syntax STRING str:groupConcat( STRING key, STRING separator, STRING distinct, STRING order) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key The string that need to be aggregated. STRING No No separator The separator that separates each string key getting aggregated. , STRING Yes No distinct To only have distinct string keys in the the aggregation. false STRING Yes No order Accepts 'ASC' or 'DESC' strings to sort the string keys by ascending or descending order. No order STRING Yes No Examples EXAMPLE 1 from InputStream#window.time(5 min) select str:groupConcat( key ) as groupedKeys input OutputStream; This returns a string that is the result of the concatenated keys separated by the given separator. When we send events having values for the key 'A' , 'B' , 'S' , 'C' , 'A' it will return \"A,B,S,C,A\" as the output EXAMPLE 2 from InputStream#window.time(5 min) select groupConcat( key , - ,true, ASC ) as groupedKeys input OutputStream; This returns a string that is the result of the concatenated keys separated by the given separator. When we send events having values for the key 'A' , 'B' , 'S' , 'C' , 'A' it will return \"A-B-C-S\" as the output","title":"groupConcat (Aggregate Function)"},{"location":"api/4.0.14/#charat-function","text":"Returns the char value as a string value at the specified index. Syntax STRING str:charAt( STRING input.value, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.value The input string that used to find the character. STRING No No index The variable that specifies the index. INT No No Examples EXAMPLE 1 charAt( WSO2 , 1) This will output the character that exists at index 1. In this case, it will output 'S'.","title":"charAt (Function)"},{"location":"api/4.0.14/#coalesce-function","text":"Returns the value of the first of its input parameters that is not null Syntax INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT str:coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have one or more input parameters in any data type. All the specified parameters should be of the same type. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No No Examples EXAMPLE 1 coalesce(null, BBB , CCC ) This returns the first input parameter that is not null. In this example, it returns \"BBB\"","title":"coalesce (Function)"},{"location":"api/4.0.14/#concat-function","text":"Returns a string that is the result of concatenating two or more string values. Syntax STRING str:concat( STRING argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have two or more string type input parameters. STRING No No Examples EXAMPLE 1 concat( D533 , 8JU^ , XYZ ) This returns a string value by concatenating the given arguments. In this case, it will return \"D5338JU^XYZ\" as the output","title":"concat (Function)"},{"location":"api/4.0.14/#contains-function","text":"This method returns true if the input.string contains the specified sequence of char values in the search.string . Syntax BOOL str:contains( STRING input.string, STRING search.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string Input string value. STRING No No search.string The string value to be searched for in the input.string . STRING No No Examples EXAMPLE 1 contains( 21 products are produced by WSO2 currently , WSO2 ) This returns a boolean value as the output. In this case, it returns true .","title":"contains (Function)"},{"location":"api/4.0.14/#equalsignorecase-function","text":"Compares two strings lexicographically. Syntax BOOL str:equalsIgnoreCase( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument. This is compared with the first argument. STRING No No Examples EXAMPLE 1 equalsIgnoreCase( WSO2 , wso2 ) This returns a boolean value as the output. In this scenario, it returns \"true\".","title":"equalsIgnoreCase (Function)"},{"location":"api/4.0.14/#filltemplate-function","text":"Replaces the templated positions in a given template with provided strings which matches withthe index in the template. Syntax STRING str:fillTemplate( STRING template, STRING|INT|LONG|DOUBLE|FLOAT|BOOL replacement.strings) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic template The string with templated fields that needs to be filled with the given strings. Templated fields should be in following the format {{INDEX}} where INDEX is an integer. This index is used to map the strings which are used to replace the templated fields. STRING No No replacement.strings Strings to replace the templated positions in the template. There can be any number of arguments from the 2nd argument. STRING INT LONG DOUBLE FLOAT BOOL No No Examples EXAMPLE 1 str:fillTemplate( This is {{1}} for the {{2}} function , 'an example', 'fillTemplate') In this example, the template is 'This is {{1}} for the {{2}} function'.Here the templated string {{1}} will be replaced with the 1st string value provided ('an example'). {{2}} will be replaced with the 2nd string provided ('fillTemplate') The return string will be 'This is an example for the fillTemplate function'.","title":"fillTemplate (Function)"},{"location":"api/4.0.14/#hex-function","text":"Returns a hexadecimal string representation of str, where each byte of each character in str is converted to two hexadecimal digits Syntax STRING str:hex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the hexadecimal value. STRING No No Examples EXAMPLE 1 hex( MySQL ) This returns the hexadecimal value of the input.string. In this scenario, the output is \"4d7953514c\".","title":"hex (Function)"},{"location":"api/4.0.14/#length-function","text":"Returns the length of this string. Syntax INT str:length( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the length. STRING No No Examples EXAMPLE 1 length( Hello World ) This outputs the length of the provided string. In this scenario, the, output is 11 .","title":"length (Function)"},{"location":"api/4.0.14/#lower-function","text":"Converts the capital letters in the input string to the equivalent simple letters. Syntax STRING str:lower( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to convert to the lower case (i.e., equivalent simple letters). STRING No No Examples EXAMPLE 1 lower( WSO2 cep ) This converts the capital letters in the input.string to the equivalent simple letters. In this scenario, the output is \"wso2 cep \".","title":"lower (Function)"},{"location":"api/4.0.14/#regexp-function","text":"Returns whether this 'string' matches the given regular expression 'regex' or not. Syntax BOOL str:regexp( STRING input.string, STRING regex) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to match with the given regular expression. STRING No No regex The regular expression to be matched with the input string. STRING No No Examples EXAMPLE 1 regexp( WSO2 abcdh , WSO(.*h) ) This returns a boolean value after matching regular expression with the given string. In this scenario, it returns \"true\" as the output.","title":"regexp (Function)"},{"location":"api/4.0.14/#repeat-function","text":"Repeats a string for a specified number of times. Syntax STRING str:repeat( STRING input.string, INT times) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that is repeated the number of times as defined by the user. STRING No No times The number of times the input.string needs to be repeated . INT No No Examples EXAMPLE 1 repeat( StRing 1 , 3) This returns a string value by repeating the string for a specified number of times. In this scenario, the output is \"StRing 1StRing 1StRing 1\".","title":"repeat (Function)"},{"location":"api/4.0.14/#replaceall-function","text":"Replaces each substring of this string that matches the given expression with the given replacement. Syntax STRING str:replaceAll( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No regex The regular expression to be matched with the input string. STRING No No replacement.string The striing with which each substring that matches the given expression should be replaced. STRING No No Examples EXAMPLE 1 replaceAll( hello hi hello , 'hello', 'test') This returns a string after replacing the substrings of the input string with the replacement string. In this scenario, the output is \"test hi test\" .","title":"replaceAll (Function)"},{"location":"api/4.0.14/#replacefirst-function","text":"Replaces the first substring of this string that matches the given expression, with the given replacement. Syntax STRING str:replaceFirst( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be replaced. STRING No No regex The regular expression with which the input string should be matched. STRING No No replacement.string The string with which the first substring of input string that matches the regular expression should be replaced. STRING No No Examples EXAMPLE 1 replaceFirst( hello WSO2 A hello , 'WSO2(.*)A', 'XXXX') This returns a string after replacing the first substring with the given replacement string. In this scenario, the output is \"hello XXXX hello\".","title":"replaceFirst (Function)"},{"location":"api/4.0.14/#reverse-function","text":"Returns the reverse ordered string of the input. Syntax STRING str:reverse( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be reversed. STRING No No Examples EXAMPLE 1 reverse( Hello World ) This outputs a string value by reversing the incoming input.string . In this scenario, the output is \"dlroW olleH\".","title":"reverse (Function)"},{"location":"api/4.0.14/#split-function","text":"Splits the source string by split.string and returns the substring specified via the group.number . Syntax STRING str:split( STRING input.string, STRING split.string, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No split.string The string value to be used to split the input.string . STRING No No group.number The index of the split group INT No No Examples EXAMPLE 1 split( WSO2,ABM,NSFT , , , 0) This splits the given input.string by given split.string and returns the string in the index given by group.number. In this scenario, the output will is \"WSO2\".","title":"split (Function)"},{"location":"api/4.0.14/#strcmp-function","text":"Compares two strings lexicographically. Syntax INT str:strcmp( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument that should be compared with the first argument lexicographically. STRING No No Examples EXAMPLE 1 strcmp( AbCDefghiJ KLMN , 'Hello') This compares two strings lexicographically and outputs an integer value","title":"strcmp (Function)"},{"location":"api/4.0.14/#substr-function","text":"This returns a new string that is a substring of this string Syntax STRING str:substr( STRING input.string, INT begin.index, INT length, STRING regex, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be processed. STRING No No begin.index Starting index to consider for the substring. INT No No length The length of the substring. INT No No regex The regular expression that should be matched with the input string.. STRING No No group.number The regex group number INT No No Examples EXAMPLE 1 substr( AbCDefghiJ KLMN , 4) This outputs the substring based on the given begin.index . In this scenario, the output is \"efghiJ KLMN\". EXAMPLE 2 substr( AbCDefghiJ KLMN , 2, 4) This outputs the substring based on the given begin.index and length. In this scenario, the output is \"CDef\". EXAMPLE 3 substr( WSO2D efghiJ KLMN , '^WSO2(.*)') This outputs the substring by applying the regex. In this scenario, the output is \"WSO2D efghiJ KLMN\". EXAMPLE 4 substr( WSO2 cep WSO2 XX E hi hA WSO2 heAllo , 'WSO2(.*)A(.*)', 2) This outputs the substring by applying the regex and considering the group.number . In this scenario, the output is \" ello\".","title":"substr (Function)"},{"location":"api/4.0.14/#trim-function","text":"Returns a copy of the string with leading and trailing whitespace omitted Syntax STRING str:trim( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that needs to be trimmed. STRING No No Examples EXAMPLE 1 trim( AbCDefghiJ KLMN ) This returns a copy of the input.string with the leading and/or trailing white-spaces omitted. In this scenario, the output is \"AbCDefghiJ KLMN\".","title":"trim (Function)"},{"location":"api/4.0.14/#unhex-function","text":"unhex(str) interprets each pair of characters in the argument as a hexadecimal number and converts it to the byte represented by the number Syntax STRING str:unhex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The hexadecimal input string that needs to be converted to string. STRING No No Examples EXAMPLE 1 unhex( 4d7953514c ) This converts the hexadecimal value to string","title":"unhex (Function)"},{"location":"api/4.0.14/#upper-function","text":"Converts the simple letters in the input string to the equivalent capital/block letters. Syntax STRING str:upper( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be converted to the upper case (equivalent capital/block letters). STRING No No Examples EXAMPLE 1 upper( Hello World ) This converts the simple letters in the input.string to theequivalent capital letters. In this scenario, the output is \"HELLO WORLD\".","title":"upper (Function)"},{"location":"api/4.0.14/#tokenize-stream-processor","text":"This splits a string into words Syntax str:tokenize( STRING input.string, STRING regex) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input text which should be split. STRING No No regex The string value to be used to tokenize the 'input.string'. STRING No No Examples EXAMPLE 1 define stream inputStream (str string); @info(name = 'query1') from inputStream#str:tokenize(str , regex) select text insert into outputStream; This query performs tokenization for the given string.","title":"tokenize (Stream Processor)"},{"location":"api/4.0.15/","text":"API Docs - v4.0.15 Str groupConcat (Aggregate Function) Returns concated string keys by aggregating all the events separating them by the given separator. Syntax STRING str:groupConcat( STRING key, STRING separator, STRING distinct, STRING order) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key The string that need to be aggregated. STRING No No separator The separator that separates each string key getting aggregated. , STRING Yes No distinct To only have distinct string keys in the the aggregation. false STRING Yes No order Accepts 'ASC' or 'DESC' strings to sort the string keys by ascending or descending order. No order STRING Yes No Examples EXAMPLE 1 from InputStream#window.time(5 min) select str:groupConcat( key ) as groupedKeys input OutputStream; This returns a string that is the result of the concatenated keys separated by the given separator. When we send events having values for the key 'A' , 'B' , 'S' , 'C' , 'A' it will return \"A,B,S,C,A\" as the output EXAMPLE 2 from InputStream#window.time(5 min) select groupConcat( key , - ,true, ASC ) as groupedKeys input OutputStream; This returns a string that is the result of the concatenated keys separated by the given separator. When we send events having values for the key 'A' , 'B' , 'S' , 'C' , 'A' it will return \"A-B-C-S\" as the output charAt (Function) Returns the char value as a string value at the specified index. Syntax STRING str:charAt( STRING input.value, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.value The input string that used to find the character. STRING No No index The variable that specifies the index. INT No No Examples EXAMPLE 1 charAt( WSO2 , 1) This will output the character that exists at index 1. In this case, it will output 'S'. coalesce (Function) Returns the value of the first of its input parameters that is not null Syntax INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT str:coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have one or more input parameters in any data type. All the specified parameters should be of the same type. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No No Examples EXAMPLE 1 coalesce(null, BBB , CCC ) This returns the first input parameter that is not null. In this example, it returns \"BBB\" concat (Function) Returns a string that is the result of concatenating two or more string values. Syntax STRING str:concat( STRING argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have two or more string type input parameters. STRING No No Examples EXAMPLE 1 concat( D533 , 8JU^ , XYZ ) This returns a string value by concatenating the given arguments. In this case, it will return \"D5338JU^XYZ\" as the output contains (Function) This method returns true if the input.string contains the specified sequence of char values in the search.string . Syntax BOOL str:contains( STRING input.string, STRING search.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string Input string value. STRING No No search.string The string value to be searched for in the input.string . STRING No No Examples EXAMPLE 1 contains( 21 products are produced by WSO2 currently , WSO2 ) This returns a boolean value as the output. In this case, it returns true . equalsIgnoreCase (Function) Compares two strings lexicographically. Syntax BOOL str:equalsIgnoreCase( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument. This is compared with the first argument. STRING No No Examples EXAMPLE 1 equalsIgnoreCase( WSO2 , wso2 ) This returns a boolean value as the output. In this scenario, it returns \"true\". fillTemplate (Function) Replaces the templated positions in a given template with provided strings which matches withthe index in the template. Syntax STRING str:fillTemplate( STRING template, STRING|INT|LONG|DOUBLE|FLOAT|BOOL replacement.strings) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic template The string with templated fields that needs to be filled with the given strings. Templated fields should be in following the format {{INDEX}} where INDEX is an integer. This index is used to map the strings which are used to replace the templated fields. STRING No No replacement.strings Strings to replace the templated positions in the template. There can be any number of arguments from the 2nd argument. STRING INT LONG DOUBLE FLOAT BOOL No No Examples EXAMPLE 1 str:fillTemplate( This is {{1}} for the {{2}} function , 'an example', 'fillTemplate') In this example, the template is 'This is {{1}} for the {{2}} function'.Here the templated string {{1}} will be replaced with the 1st string value provided ('an example'). {{2}} will be replaced with the 2nd string provided ('fillTemplate') The return string will be 'This is an example for the fillTemplate function'. hex (Function) Returns a hexadecimal string representation of str, where each byte of each character in str is converted to two hexadecimal digits Syntax STRING str:hex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the hexadecimal value. STRING No No Examples EXAMPLE 1 hex( MySQL ) This returns the hexadecimal value of the input.string. In this scenario, the output is \"4d7953514c\". length (Function) Returns the length of this string. Syntax INT str:length( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the length. STRING No No Examples EXAMPLE 1 length( Hello World ) This outputs the length of the provided string. In this scenario, the, output is 11 . lower (Function) Converts the capital letters in the input string to the equivalent simple letters. Syntax STRING str:lower( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to convert to the lower case (i.e., equivalent simple letters). STRING No No Examples EXAMPLE 1 lower( WSO2 cep ) This converts the capital letters in the input.string to the equivalent simple letters. In this scenario, the output is \"wso2 cep \". regexp (Function) Returns whether this 'string' matches the given regular expression 'regex' or not. Syntax BOOL str:regexp( STRING input.string, STRING regex) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to match with the given regular expression. STRING No No regex The regular expression to be matched with the input string. STRING No No Examples EXAMPLE 1 regexp( WSO2 abcdh , WSO(.*h) ) This returns a boolean value after matching regular expression with the given string. In this scenario, it returns \"true\" as the output. repeat (Function) Repeats a string for a specified number of times. Syntax STRING str:repeat( STRING input.string, INT times) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that is repeated the number of times as defined by the user. STRING No No times The number of times the input.string needs to be repeated . INT No No Examples EXAMPLE 1 repeat( StRing 1 , 3) This returns a string value by repeating the string for a specified number of times. In this scenario, the output is \"StRing 1StRing 1StRing 1\". replaceAll (Function) Replaces each substring of this string that matches the given expression with the given replacement. Syntax STRING str:replaceAll( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No regex The regular expression to be matched with the input string. STRING No No replacement.string The striing with which each substring that matches the given expression should be replaced. STRING No No Examples EXAMPLE 1 replaceAll( hello hi hello , 'hello', 'test') This returns a string after replacing the substrings of the input string with the replacement string. In this scenario, the output is \"test hi test\" . replaceFirst (Function) Replaces the first substring of this string that matches the given expression, with the given replacement. Syntax STRING str:replaceFirst( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be replaced. STRING No No regex The regular expression with which the input string should be matched. STRING No No replacement.string The string with which the first substring of input string that matches the regular expression should be replaced. STRING No No Examples EXAMPLE 1 replaceFirst( hello WSO2 A hello , 'WSO2(.*)A', 'XXXX') This returns a string after replacing the first substring with the given replacement string. In this scenario, the output is \"hello XXXX hello\". reverse (Function) Returns the reverse ordered string of the input. Syntax STRING str:reverse( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be reversed. STRING No No Examples EXAMPLE 1 reverse( Hello World ) This outputs a string value by reversing the incoming input.string . In this scenario, the output is \"dlroW olleH\". split (Function) Splits the source string by split.string and returns the substring specified via the group.number . Syntax STRING str:split( STRING input.string, STRING split.string, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No split.string The string value to be used to split the input.string . STRING No No group.number The index of the split group INT No No Examples EXAMPLE 1 split( WSO2,ABM,NSFT , , , 0) This splits the given input.string by given split.string and returns the string in the index given by group.number. In this scenario, the output will is \"WSO2\". strcmp (Function) Compares two strings lexicographically and returns an integer value. If both strings are equal, 0 is returned. If the first string is lexicographically greater than the second string, a positive value is returned. If the first string is lexicographically greater than the second string, a negative value is returned. Syntax INT str:strcmp( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument that should be compared with the first argument lexicographically. STRING No No Examples EXAMPLE 1 strcmp( AbCDefghiJ KLMN , 'Hello') This compares two strings lexicographically and outputs an integer value substr (Function) Returns a substring of the input string by considering a subset or all of the following factors: starting index, length, regular expression, and regex group number. Syntax STRING str:substr( STRING input.string, INT begin.index, INT length, STRING regex, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be processed. STRING No No begin.index Starting index to consider for the substring. INT No No length The length of the substring. INT No No regex The regular expression that should be matched with the input string.. STRING No No group.number The regex group number INT No No Examples EXAMPLE 1 substr( AbCDefghiJ KLMN , 4) This outputs the substring based on the given begin.index . In this scenario, the output is \"efghiJ KLMN\". EXAMPLE 2 substr( AbCDefghiJ KLMN , 2, 4) This outputs the substring based on the given begin.index and length. In this scenario, the output is \"CDef\". EXAMPLE 3 substr( WSO2D efghiJ KLMN , '^WSO2(.*)') This outputs the substring by applying the regex. In this scenario, the output is \"Hello World\". EXAMPLE 4 substr( Welcome to the world's best streaming engine, WSO2 SP! A Hello World. , 'WSO2(.*)A(.*)', 2) This outputs the substring by applying the regex and considering the group.number . In this scenario, the output is \" ello\". trim (Function) Returns a copy of the string with leading and trailing whitespace omitted Syntax STRING str:trim( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that needs to be trimmed. STRING No No Examples EXAMPLE 1 trim( AbCDefghiJ KLMN ) This returns a copy of the input.string with the leading and/or trailing white-spaces omitted. In this scenario, the output is \"AbCDefghiJ KLMN\". unhex (Function) unhex(str) interprets each pair of characters in the argument as a hexadecimal number and converts it to the byte represented by the number Syntax STRING str:unhex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The hexadecimal input string that needs to be converted to string. STRING No No Examples EXAMPLE 1 unhex( 4d7953514c ) This converts the hexadecimal value to string upper (Function) Converts the simple letters in the input string to the equivalent capital/block letters. Syntax STRING str:upper( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be converted to the upper case (equivalent capital/block letters). STRING No No Examples EXAMPLE 1 upper( Hello World ) This converts the simple letters in the input.string to theequivalent capital letters. In this scenario, the output is \"HELLO WORLD\". tokenize (Stream Processor) This splits a string into words Syntax str:tokenize( STRING input.string, STRING regex, BOOL distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input text which should be split. STRING No No regex The string value to be used to tokenize the 'input.string'. STRING No No distinct Flag to return only distinct values false BOOL Yes No Examples EXAMPLE 1 define stream inputStream (str string); @sink(type='log') define stream outputStream(str string, token string); @info(name = 'query1') from inputStream#str:tokenize(str , regex) insert into outputStream; This query performs tokenization for the given string.","title":"4.0.15"},{"location":"api/4.0.15/#api-docs-v4015","text":"","title":"API Docs - v4.0.15"},{"location":"api/4.0.15/#str","text":"","title":"Str"},{"location":"api/4.0.15/#groupconcat-aggregate-function","text":"Returns concated string keys by aggregating all the events separating them by the given separator. Syntax STRING str:groupConcat( STRING key, STRING separator, STRING distinct, STRING order) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key The string that need to be aggregated. STRING No No separator The separator that separates each string key getting aggregated. , STRING Yes No distinct To only have distinct string keys in the the aggregation. false STRING Yes No order Accepts 'ASC' or 'DESC' strings to sort the string keys by ascending or descending order. No order STRING Yes No Examples EXAMPLE 1 from InputStream#window.time(5 min) select str:groupConcat( key ) as groupedKeys input OutputStream; This returns a string that is the result of the concatenated keys separated by the given separator. When we send events having values for the key 'A' , 'B' , 'S' , 'C' , 'A' it will return \"A,B,S,C,A\" as the output EXAMPLE 2 from InputStream#window.time(5 min) select groupConcat( key , - ,true, ASC ) as groupedKeys input OutputStream; This returns a string that is the result of the concatenated keys separated by the given separator. When we send events having values for the key 'A' , 'B' , 'S' , 'C' , 'A' it will return \"A-B-C-S\" as the output","title":"groupConcat (Aggregate Function)"},{"location":"api/4.0.15/#charat-function","text":"Returns the char value as a string value at the specified index. Syntax STRING str:charAt( STRING input.value, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.value The input string that used to find the character. STRING No No index The variable that specifies the index. INT No No Examples EXAMPLE 1 charAt( WSO2 , 1) This will output the character that exists at index 1. In this case, it will output 'S'.","title":"charAt (Function)"},{"location":"api/4.0.15/#coalesce-function","text":"Returns the value of the first of its input parameters that is not null Syntax INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT str:coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have one or more input parameters in any data type. All the specified parameters should be of the same type. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No No Examples EXAMPLE 1 coalesce(null, BBB , CCC ) This returns the first input parameter that is not null. In this example, it returns \"BBB\"","title":"coalesce (Function)"},{"location":"api/4.0.15/#concat-function","text":"Returns a string that is the result of concatenating two or more string values. Syntax STRING str:concat( STRING argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have two or more string type input parameters. STRING No No Examples EXAMPLE 1 concat( D533 , 8JU^ , XYZ ) This returns a string value by concatenating the given arguments. In this case, it will return \"D5338JU^XYZ\" as the output","title":"concat (Function)"},{"location":"api/4.0.15/#contains-function","text":"This method returns true if the input.string contains the specified sequence of char values in the search.string . Syntax BOOL str:contains( STRING input.string, STRING search.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string Input string value. STRING No No search.string The string value to be searched for in the input.string . STRING No No Examples EXAMPLE 1 contains( 21 products are produced by WSO2 currently , WSO2 ) This returns a boolean value as the output. In this case, it returns true .","title":"contains (Function)"},{"location":"api/4.0.15/#equalsignorecase-function","text":"Compares two strings lexicographically. Syntax BOOL str:equalsIgnoreCase( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument. This is compared with the first argument. STRING No No Examples EXAMPLE 1 equalsIgnoreCase( WSO2 , wso2 ) This returns a boolean value as the output. In this scenario, it returns \"true\".","title":"equalsIgnoreCase (Function)"},{"location":"api/4.0.15/#filltemplate-function","text":"Replaces the templated positions in a given template with provided strings which matches withthe index in the template. Syntax STRING str:fillTemplate( STRING template, STRING|INT|LONG|DOUBLE|FLOAT|BOOL replacement.strings) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic template The string with templated fields that needs to be filled with the given strings. Templated fields should be in following the format {{INDEX}} where INDEX is an integer. This index is used to map the strings which are used to replace the templated fields. STRING No No replacement.strings Strings to replace the templated positions in the template. There can be any number of arguments from the 2nd argument. STRING INT LONG DOUBLE FLOAT BOOL No No Examples EXAMPLE 1 str:fillTemplate( This is {{1}} for the {{2}} function , 'an example', 'fillTemplate') In this example, the template is 'This is {{1}} for the {{2}} function'.Here the templated string {{1}} will be replaced with the 1st string value provided ('an example'). {{2}} will be replaced with the 2nd string provided ('fillTemplate') The return string will be 'This is an example for the fillTemplate function'.","title":"fillTemplate (Function)"},{"location":"api/4.0.15/#hex-function","text":"Returns a hexadecimal string representation of str, where each byte of each character in str is converted to two hexadecimal digits Syntax STRING str:hex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the hexadecimal value. STRING No No Examples EXAMPLE 1 hex( MySQL ) This returns the hexadecimal value of the input.string. In this scenario, the output is \"4d7953514c\".","title":"hex (Function)"},{"location":"api/4.0.15/#length-function","text":"Returns the length of this string. Syntax INT str:length( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the length. STRING No No Examples EXAMPLE 1 length( Hello World ) This outputs the length of the provided string. In this scenario, the, output is 11 .","title":"length (Function)"},{"location":"api/4.0.15/#lower-function","text":"Converts the capital letters in the input string to the equivalent simple letters. Syntax STRING str:lower( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to convert to the lower case (i.e., equivalent simple letters). STRING No No Examples EXAMPLE 1 lower( WSO2 cep ) This converts the capital letters in the input.string to the equivalent simple letters. In this scenario, the output is \"wso2 cep \".","title":"lower (Function)"},{"location":"api/4.0.15/#regexp-function","text":"Returns whether this 'string' matches the given regular expression 'regex' or not. Syntax BOOL str:regexp( STRING input.string, STRING regex) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to match with the given regular expression. STRING No No regex The regular expression to be matched with the input string. STRING No No Examples EXAMPLE 1 regexp( WSO2 abcdh , WSO(.*h) ) This returns a boolean value after matching regular expression with the given string. In this scenario, it returns \"true\" as the output.","title":"regexp (Function)"},{"location":"api/4.0.15/#repeat-function","text":"Repeats a string for a specified number of times. Syntax STRING str:repeat( STRING input.string, INT times) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that is repeated the number of times as defined by the user. STRING No No times The number of times the input.string needs to be repeated . INT No No Examples EXAMPLE 1 repeat( StRing 1 , 3) This returns a string value by repeating the string for a specified number of times. In this scenario, the output is \"StRing 1StRing 1StRing 1\".","title":"repeat (Function)"},{"location":"api/4.0.15/#replaceall-function","text":"Replaces each substring of this string that matches the given expression with the given replacement. Syntax STRING str:replaceAll( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No regex The regular expression to be matched with the input string. STRING No No replacement.string The striing with which each substring that matches the given expression should be replaced. STRING No No Examples EXAMPLE 1 replaceAll( hello hi hello , 'hello', 'test') This returns a string after replacing the substrings of the input string with the replacement string. In this scenario, the output is \"test hi test\" .","title":"replaceAll (Function)"},{"location":"api/4.0.15/#replacefirst-function","text":"Replaces the first substring of this string that matches the given expression, with the given replacement. Syntax STRING str:replaceFirst( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be replaced. STRING No No regex The regular expression with which the input string should be matched. STRING No No replacement.string The string with which the first substring of input string that matches the regular expression should be replaced. STRING No No Examples EXAMPLE 1 replaceFirst( hello WSO2 A hello , 'WSO2(.*)A', 'XXXX') This returns a string after replacing the first substring with the given replacement string. In this scenario, the output is \"hello XXXX hello\".","title":"replaceFirst (Function)"},{"location":"api/4.0.15/#reverse-function","text":"Returns the reverse ordered string of the input. Syntax STRING str:reverse( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be reversed. STRING No No Examples EXAMPLE 1 reverse( Hello World ) This outputs a string value by reversing the incoming input.string . In this scenario, the output is \"dlroW olleH\".","title":"reverse (Function)"},{"location":"api/4.0.15/#split-function","text":"Splits the source string by split.string and returns the substring specified via the group.number . Syntax STRING str:split( STRING input.string, STRING split.string, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No split.string The string value to be used to split the input.string . STRING No No group.number The index of the split group INT No No Examples EXAMPLE 1 split( WSO2,ABM,NSFT , , , 0) This splits the given input.string by given split.string and returns the string in the index given by group.number. In this scenario, the output will is \"WSO2\".","title":"split (Function)"},{"location":"api/4.0.15/#strcmp-function","text":"Compares two strings lexicographically and returns an integer value. If both strings are equal, 0 is returned. If the first string is lexicographically greater than the second string, a positive value is returned. If the first string is lexicographically greater than the second string, a negative value is returned. Syntax INT str:strcmp( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument that should be compared with the first argument lexicographically. STRING No No Examples EXAMPLE 1 strcmp( AbCDefghiJ KLMN , 'Hello') This compares two strings lexicographically and outputs an integer value","title":"strcmp (Function)"},{"location":"api/4.0.15/#substr-function","text":"Returns a substring of the input string by considering a subset or all of the following factors: starting index, length, regular expression, and regex group number. Syntax STRING str:substr( STRING input.string, INT begin.index, INT length, STRING regex, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be processed. STRING No No begin.index Starting index to consider for the substring. INT No No length The length of the substring. INT No No regex The regular expression that should be matched with the input string.. STRING No No group.number The regex group number INT No No Examples EXAMPLE 1 substr( AbCDefghiJ KLMN , 4) This outputs the substring based on the given begin.index . In this scenario, the output is \"efghiJ KLMN\". EXAMPLE 2 substr( AbCDefghiJ KLMN , 2, 4) This outputs the substring based on the given begin.index and length. In this scenario, the output is \"CDef\". EXAMPLE 3 substr( WSO2D efghiJ KLMN , '^WSO2(.*)') This outputs the substring by applying the regex. In this scenario, the output is \"Hello World\". EXAMPLE 4 substr( Welcome to the world's best streaming engine, WSO2 SP! A Hello World. , 'WSO2(.*)A(.*)', 2) This outputs the substring by applying the regex and considering the group.number . In this scenario, the output is \" ello\".","title":"substr (Function)"},{"location":"api/4.0.15/#trim-function","text":"Returns a copy of the string with leading and trailing whitespace omitted Syntax STRING str:trim( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that needs to be trimmed. STRING No No Examples EXAMPLE 1 trim( AbCDefghiJ KLMN ) This returns a copy of the input.string with the leading and/or trailing white-spaces omitted. In this scenario, the output is \"AbCDefghiJ KLMN\".","title":"trim (Function)"},{"location":"api/4.0.15/#unhex-function","text":"unhex(str) interprets each pair of characters in the argument as a hexadecimal number and converts it to the byte represented by the number Syntax STRING str:unhex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The hexadecimal input string that needs to be converted to string. STRING No No Examples EXAMPLE 1 unhex( 4d7953514c ) This converts the hexadecimal value to string","title":"unhex (Function)"},{"location":"api/4.0.15/#upper-function","text":"Converts the simple letters in the input string to the equivalent capital/block letters. Syntax STRING str:upper( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be converted to the upper case (equivalent capital/block letters). STRING No No Examples EXAMPLE 1 upper( Hello World ) This converts the simple letters in the input.string to theequivalent capital letters. In this scenario, the output is \"HELLO WORLD\".","title":"upper (Function)"},{"location":"api/4.0.15/#tokenize-stream-processor","text":"This splits a string into words Syntax str:tokenize( STRING input.string, STRING regex, BOOL distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input text which should be split. STRING No No regex The string value to be used to tokenize the 'input.string'. STRING No No distinct Flag to return only distinct values false BOOL Yes No Examples EXAMPLE 1 define stream inputStream (str string); @sink(type='log') define stream outputStream(str string, token string); @info(name = 'query1') from inputStream#str:tokenize(str , regex) insert into outputStream; This query performs tokenization for the given string.","title":"tokenize (Stream Processor)"},{"location":"api/4.0.16/","text":"API Docs - v4.0.16 Str groupConcat (Aggregate Function) Returns concated string keys by aggregating all the events separating them by the given separator. Syntax STRING str:groupConcat( STRING key, STRING separator, STRING distinct, STRING order) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key The string that need to be aggregated. STRING No No separator The separator that separates each string key getting aggregated. , STRING Yes No distinct To only have distinct string keys in the the aggregation. false STRING Yes No order Accepts 'ASC' or 'DESC' strings to sort the string keys by ascending or descending order. No order STRING Yes No Examples EXAMPLE 1 from InputStream#window.time(5 min) select str:groupConcat( key ) as groupedKeys input OutputStream; This returns a string that is the result of the concatenated keys separated by the given separator. When we send events having values for the key 'A' , 'B' , 'S' , 'C' , 'A' it will return \"A,B,S,C,A\" as the output EXAMPLE 2 from InputStream#window.time(5 min) select groupConcat( key , - ,true, ASC ) as groupedKeys input OutputStream; This returns a string that is the result of the concatenated keys separated by the given separator. When we send events having values for the key 'A' , 'B' , 'S' , 'C' , 'A' it will return \"A-B-C-S\" as the output charAt (Function) Returns the char value as a string value at the specified index. Syntax STRING str:charAt( STRING input.value, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.value The input string that used to find the character. STRING No No index The variable that specifies the index. INT No No Examples EXAMPLE 1 charAt( WSO2 , 1) This will output the character that exists at index 1. In this case, it will output 'S'. coalesce (Function) Returns the value of the first of its input parameters that is not null Syntax INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT str:coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have one or more input parameters in any data type. All the specified parameters should be of the same type. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No No Examples EXAMPLE 1 coalesce(null, BBB , CCC ) This returns the first input parameter that is not null. In this example, it returns \"BBB\" concat (Function) Returns a string that is the result of concatenating two or more string values. Syntax STRING str:concat( STRING argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have two or more string type input parameters. STRING No No Examples EXAMPLE 1 concat( D533 , 8JU^ , XYZ ) This returns a string value by concatenating the given arguments. In this case, it will return \"D5338JU^XYZ\" as the output contains (Function) This method returns true if the input.string contains the specified sequence of char values in the search.string . Syntax BOOL str:contains( STRING input.string, STRING search.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string Input string value. STRING No No search.string The string value to be searched for in the input.string . STRING No No Examples EXAMPLE 1 contains( 21 products are produced by WSO2 currently , WSO2 ) This returns a boolean value as the output. In this case, it returns true . equalsIgnoreCase (Function) Compares two strings lexicographically. Syntax BOOL str:equalsIgnoreCase( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument. This is compared with the first argument. STRING No No Examples EXAMPLE 1 equalsIgnoreCase( WSO2 , wso2 ) This returns a boolean value as the output. In this scenario, it returns \"true\". fillTemplate (Function) Replaces the templated positions in a given template with provided strings which matches withthe index in the template. Syntax STRING str:fillTemplate( STRING template, STRING|INT|LONG|DOUBLE|FLOAT|BOOL replacement.strings) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic template The string with templated fields that needs to be filled with the given strings. Templated fields should be in following the format {{INDEX}} where INDEX is an integer. This index is used to map the strings which are used to replace the templated fields. STRING No No replacement.strings Strings to replace the templated positions in the template. There can be any number of arguments from the 2nd argument. STRING INT LONG DOUBLE FLOAT BOOL No No Examples EXAMPLE 1 str:fillTemplate( This is {{1}} for the {{2}} function , 'an example', 'fillTemplate') In this example, the template is 'This is {{1}} for the {{2}} function'.Here the templated string {{1}} will be replaced with the 1st string value provided ('an example'). {{2}} will be replaced with the 2nd string provided ('fillTemplate') The return string will be 'This is an example for the fillTemplate function'. hex (Function) Returns a hexadecimal string representation of str, where each byte of each character in str is converted to two hexadecimal digits Syntax STRING str:hex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the hexadecimal value. STRING No No Examples EXAMPLE 1 hex( MySQL ) This returns the hexadecimal value of the input.string. In this scenario, the output is \"4d7953514c\". length (Function) Returns the length of this string. Syntax INT str:length( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the length. STRING No No Examples EXAMPLE 1 length( Hello World ) This outputs the length of the provided string. In this scenario, the, output is 11 . lower (Function) Converts the capital letters in the input string to the equivalent simple letters. Syntax STRING str:lower( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to convert to the lower case (i.e., equivalent simple letters). STRING No No Examples EXAMPLE 1 lower( WSO2 cep ) This converts the capital letters in the input.string to the equivalent simple letters. In this scenario, the output is \"wso2 cep \". regexp (Function) Returns whether this 'string' matches the given regular expression 'regex' or not. Syntax BOOL str:regexp( STRING input.string, STRING regex) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to match with the given regular expression. STRING No No regex The regular expression to be matched with the input string. STRING No No Examples EXAMPLE 1 regexp( WSO2 abcdh , WSO(.*h) ) This returns a boolean value after matching regular expression with the given string. In this scenario, it returns \"true\" as the output. repeat (Function) Repeats a string for a specified number of times. Syntax STRING str:repeat( STRING input.string, INT times) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that is repeated the number of times as defined by the user. STRING No No times The number of times the input.string needs to be repeated . INT No No Examples EXAMPLE 1 repeat( StRing 1 , 3) This returns a string value by repeating the string for a specified number of times. In this scenario, the output is \"StRing 1StRing 1StRing 1\". replaceAll (Function) Replaces each substring of this string that matches the given expression with the given replacement. Syntax STRING str:replaceAll( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No regex The regular expression to be matched with the input string. STRING No No replacement.string The striing with which each substring that matches the given expression should be replaced. STRING No No Examples EXAMPLE 1 replaceAll( hello hi hello , 'hello', 'test') This returns a string after replacing the substrings of the input string with the replacement string. In this scenario, the output is \"test hi test\" . replaceFirst (Function) Replaces the first substring of this string that matches the given expression, with the given replacement. Syntax STRING str:replaceFirst( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be replaced. STRING No No regex The regular expression with which the input string should be matched. STRING No No replacement.string The string with which the first substring of input string that matches the regular expression should be replaced. STRING No No Examples EXAMPLE 1 replaceFirst( hello WSO2 A hello , 'WSO2(.*)A', 'XXXX') This returns a string after replacing the first substring with the given replacement string. In this scenario, the output is \"hello XXXX hello\". reverse (Function) Returns the reverse ordered string of the input. Syntax STRING str:reverse( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be reversed. STRING No No Examples EXAMPLE 1 reverse( Hello World ) This outputs a string value by reversing the incoming input.string . In this scenario, the output is \"dlroW olleH\". split (Function) Splits the source string by split.string and returns the substring specified via the group.number . Syntax STRING str:split( STRING input.string, STRING split.string, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No split.string The string value to be used to split the input.string . STRING No No group.number The index of the split group INT No No Examples EXAMPLE 1 split( WSO2,ABM,NSFT , , , 0) This splits the given input.string by given split.string and returns the string in the index given by group.number. In this scenario, the output will is \"WSO2\". strcmp (Function) Compares two strings lexicographically. Syntax INT str:strcmp( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument that should be compared with the first argument lexicographically. STRING No No Examples EXAMPLE 1 strcmp( AbCDefghiJ KLMN , 'Hello') This compares two strings lexicographically and outputs an integer value substr (Function) This returns a new string that is a substring of this string Syntax STRING str:substr( STRING input.string, INT begin.index, INT length, STRING regex, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be processed. STRING No No begin.index Starting index to consider for the substring. INT No No length The length of the substring. INT No No regex The regular expression that should be matched with the input string.. STRING No No group.number The regex group number INT No No Examples EXAMPLE 1 substr( AbCDefghiJ KLMN , 4) This outputs the substring based on the given begin.index . In this scenario, the output is \"efghiJ KLMN\". EXAMPLE 2 substr( AbCDefghiJ KLMN , 2, 4) This outputs the substring based on the given begin.index and length. In this scenario, the output is \"CDef\". EXAMPLE 3 substr( WSO2D efghiJ KLMN , '^WSO2(.*)') This outputs the substring by applying the regex. In this scenario, the output is \"WSO2D efghiJ KLMN\". EXAMPLE 4 substr( WSO2 cep WSO2 XX E hi hA WSO2 heAllo , 'WSO2(.*)A(.*)', 2) This outputs the substring by applying the regex and considering the group.number . In this scenario, the output is \" ello\". trim (Function) Returns a copy of the string with leading and trailing whitespace omitted Syntax STRING str:trim( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that needs to be trimmed. STRING No No Examples EXAMPLE 1 trim( AbCDefghiJ KLMN ) This returns a copy of the input.string with the leading and/or trailing white-spaces omitted. In this scenario, the output is \"AbCDefghiJ KLMN\". unhex (Function) unhex(str) interprets each pair of characters in the argument as a hexadecimal number and converts it to the byte represented by the number Syntax STRING str:unhex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The hexadecimal input string that needs to be converted to string. STRING No No Examples EXAMPLE 1 unhex( 4d7953514c ) This converts the hexadecimal value to string upper (Function) Converts the simple letters in the input string to the equivalent capital/block letters. Syntax STRING str:upper( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be converted to the upper case (equivalent capital/block letters). STRING No No Examples EXAMPLE 1 upper( Hello World ) This converts the simple letters in the input.string to theequivalent capital letters. In this scenario, the output is \"HELLO WORLD\". tokenize (Stream Processor) Tokenize the string by delimiters and return as tokens. A new event will be created for each token Syntax str:tokenize( STRING input.string, STRING regex, BOOL distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input text which should be split. STRING No No regex The string value to be used to tokenize the 'input.string'. STRING No No distinct Flag to return only distinct values false BOOL Yes No Extra Return Attributes Name Description Possible Types token Attribute which contains a single token. STRING Examples EXAMPLE 1 define stream inputStream (str string); @info(name = 'query1') from inputStream#str:tokenize(str , ',') select text insert into outputStream; This query performs tokenization for the given string. If the str is \"Android,Windows8,iOS\", then 3 events containing token attribute value, Android , Windows8 , iOS in order.","title":"4.0.16"},{"location":"api/4.0.16/#api-docs-v4016","text":"","title":"API Docs - v4.0.16"},{"location":"api/4.0.16/#str","text":"","title":"Str"},{"location":"api/4.0.16/#groupconcat-aggregate-function","text":"Returns concated string keys by aggregating all the events separating them by the given separator. Syntax STRING str:groupConcat( STRING key, STRING separator, STRING distinct, STRING order) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key The string that need to be aggregated. STRING No No separator The separator that separates each string key getting aggregated. , STRING Yes No distinct To only have distinct string keys in the the aggregation. false STRING Yes No order Accepts 'ASC' or 'DESC' strings to sort the string keys by ascending or descending order. No order STRING Yes No Examples EXAMPLE 1 from InputStream#window.time(5 min) select str:groupConcat( key ) as groupedKeys input OutputStream; This returns a string that is the result of the concatenated keys separated by the given separator. When we send events having values for the key 'A' , 'B' , 'S' , 'C' , 'A' it will return \"A,B,S,C,A\" as the output EXAMPLE 2 from InputStream#window.time(5 min) select groupConcat( key , - ,true, ASC ) as groupedKeys input OutputStream; This returns a string that is the result of the concatenated keys separated by the given separator. When we send events having values for the key 'A' , 'B' , 'S' , 'C' , 'A' it will return \"A-B-C-S\" as the output","title":"groupConcat (Aggregate Function)"},{"location":"api/4.0.16/#charat-function","text":"Returns the char value as a string value at the specified index. Syntax STRING str:charAt( STRING input.value, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.value The input string that used to find the character. STRING No No index The variable that specifies the index. INT No No Examples EXAMPLE 1 charAt( WSO2 , 1) This will output the character that exists at index 1. In this case, it will output 'S'.","title":"charAt (Function)"},{"location":"api/4.0.16/#coalesce-function","text":"Returns the value of the first of its input parameters that is not null Syntax INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT str:coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have one or more input parameters in any data type. All the specified parameters should be of the same type. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No No Examples EXAMPLE 1 coalesce(null, BBB , CCC ) This returns the first input parameter that is not null. In this example, it returns \"BBB\"","title":"coalesce (Function)"},{"location":"api/4.0.16/#concat-function","text":"Returns a string that is the result of concatenating two or more string values. Syntax STRING str:concat( STRING argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have two or more string type input parameters. STRING No No Examples EXAMPLE 1 concat( D533 , 8JU^ , XYZ ) This returns a string value by concatenating the given arguments. In this case, it will return \"D5338JU^XYZ\" as the output","title":"concat (Function)"},{"location":"api/4.0.16/#contains-function","text":"This method returns true if the input.string contains the specified sequence of char values in the search.string . Syntax BOOL str:contains( STRING input.string, STRING search.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string Input string value. STRING No No search.string The string value to be searched for in the input.string . STRING No No Examples EXAMPLE 1 contains( 21 products are produced by WSO2 currently , WSO2 ) This returns a boolean value as the output. In this case, it returns true .","title":"contains (Function)"},{"location":"api/4.0.16/#equalsignorecase-function","text":"Compares two strings lexicographically. Syntax BOOL str:equalsIgnoreCase( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument. This is compared with the first argument. STRING No No Examples EXAMPLE 1 equalsIgnoreCase( WSO2 , wso2 ) This returns a boolean value as the output. In this scenario, it returns \"true\".","title":"equalsIgnoreCase (Function)"},{"location":"api/4.0.16/#filltemplate-function","text":"Replaces the templated positions in a given template with provided strings which matches withthe index in the template. Syntax STRING str:fillTemplate( STRING template, STRING|INT|LONG|DOUBLE|FLOAT|BOOL replacement.strings) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic template The string with templated fields that needs to be filled with the given strings. Templated fields should be in following the format {{INDEX}} where INDEX is an integer. This index is used to map the strings which are used to replace the templated fields. STRING No No replacement.strings Strings to replace the templated positions in the template. There can be any number of arguments from the 2nd argument. STRING INT LONG DOUBLE FLOAT BOOL No No Examples EXAMPLE 1 str:fillTemplate( This is {{1}} for the {{2}} function , 'an example', 'fillTemplate') In this example, the template is 'This is {{1}} for the {{2}} function'.Here the templated string {{1}} will be replaced with the 1st string value provided ('an example'). {{2}} will be replaced with the 2nd string provided ('fillTemplate') The return string will be 'This is an example for the fillTemplate function'.","title":"fillTemplate (Function)"},{"location":"api/4.0.16/#hex-function","text":"Returns a hexadecimal string representation of str, where each byte of each character in str is converted to two hexadecimal digits Syntax STRING str:hex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the hexadecimal value. STRING No No Examples EXAMPLE 1 hex( MySQL ) This returns the hexadecimal value of the input.string. In this scenario, the output is \"4d7953514c\".","title":"hex (Function)"},{"location":"api/4.0.16/#length-function","text":"Returns the length of this string. Syntax INT str:length( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the length. STRING No No Examples EXAMPLE 1 length( Hello World ) This outputs the length of the provided string. In this scenario, the, output is 11 .","title":"length (Function)"},{"location":"api/4.0.16/#lower-function","text":"Converts the capital letters in the input string to the equivalent simple letters. Syntax STRING str:lower( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to convert to the lower case (i.e., equivalent simple letters). STRING No No Examples EXAMPLE 1 lower( WSO2 cep ) This converts the capital letters in the input.string to the equivalent simple letters. In this scenario, the output is \"wso2 cep \".","title":"lower (Function)"},{"location":"api/4.0.16/#regexp-function","text":"Returns whether this 'string' matches the given regular expression 'regex' or not. Syntax BOOL str:regexp( STRING input.string, STRING regex) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to match with the given regular expression. STRING No No regex The regular expression to be matched with the input string. STRING No No Examples EXAMPLE 1 regexp( WSO2 abcdh , WSO(.*h) ) This returns a boolean value after matching regular expression with the given string. In this scenario, it returns \"true\" as the output.","title":"regexp (Function)"},{"location":"api/4.0.16/#repeat-function","text":"Repeats a string for a specified number of times. Syntax STRING str:repeat( STRING input.string, INT times) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that is repeated the number of times as defined by the user. STRING No No times The number of times the input.string needs to be repeated . INT No No Examples EXAMPLE 1 repeat( StRing 1 , 3) This returns a string value by repeating the string for a specified number of times. In this scenario, the output is \"StRing 1StRing 1StRing 1\".","title":"repeat (Function)"},{"location":"api/4.0.16/#replaceall-function","text":"Replaces each substring of this string that matches the given expression with the given replacement. Syntax STRING str:replaceAll( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No regex The regular expression to be matched with the input string. STRING No No replacement.string The striing with which each substring that matches the given expression should be replaced. STRING No No Examples EXAMPLE 1 replaceAll( hello hi hello , 'hello', 'test') This returns a string after replacing the substrings of the input string with the replacement string. In this scenario, the output is \"test hi test\" .","title":"replaceAll (Function)"},{"location":"api/4.0.16/#replacefirst-function","text":"Replaces the first substring of this string that matches the given expression, with the given replacement. Syntax STRING str:replaceFirst( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be replaced. STRING No No regex The regular expression with which the input string should be matched. STRING No No replacement.string The string with which the first substring of input string that matches the regular expression should be replaced. STRING No No Examples EXAMPLE 1 replaceFirst( hello WSO2 A hello , 'WSO2(.*)A', 'XXXX') This returns a string after replacing the first substring with the given replacement string. In this scenario, the output is \"hello XXXX hello\".","title":"replaceFirst (Function)"},{"location":"api/4.0.16/#reverse-function","text":"Returns the reverse ordered string of the input. Syntax STRING str:reverse( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be reversed. STRING No No Examples EXAMPLE 1 reverse( Hello World ) This outputs a string value by reversing the incoming input.string . In this scenario, the output is \"dlroW olleH\".","title":"reverse (Function)"},{"location":"api/4.0.16/#split-function","text":"Splits the source string by split.string and returns the substring specified via the group.number . Syntax STRING str:split( STRING input.string, STRING split.string, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No split.string The string value to be used to split the input.string . STRING No No group.number The index of the split group INT No No Examples EXAMPLE 1 split( WSO2,ABM,NSFT , , , 0) This splits the given input.string by given split.string and returns the string in the index given by group.number. In this scenario, the output will is \"WSO2\".","title":"split (Function)"},{"location":"api/4.0.16/#strcmp-function","text":"Compares two strings lexicographically. Syntax INT str:strcmp( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument that should be compared with the first argument lexicographically. STRING No No Examples EXAMPLE 1 strcmp( AbCDefghiJ KLMN , 'Hello') This compares two strings lexicographically and outputs an integer value","title":"strcmp (Function)"},{"location":"api/4.0.16/#substr-function","text":"This returns a new string that is a substring of this string Syntax STRING str:substr( STRING input.string, INT begin.index, INT length, STRING regex, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be processed. STRING No No begin.index Starting index to consider for the substring. INT No No length The length of the substring. INT No No regex The regular expression that should be matched with the input string.. STRING No No group.number The regex group number INT No No Examples EXAMPLE 1 substr( AbCDefghiJ KLMN , 4) This outputs the substring based on the given begin.index . In this scenario, the output is \"efghiJ KLMN\". EXAMPLE 2 substr( AbCDefghiJ KLMN , 2, 4) This outputs the substring based on the given begin.index and length. In this scenario, the output is \"CDef\". EXAMPLE 3 substr( WSO2D efghiJ KLMN , '^WSO2(.*)') This outputs the substring by applying the regex. In this scenario, the output is \"WSO2D efghiJ KLMN\". EXAMPLE 4 substr( WSO2 cep WSO2 XX E hi hA WSO2 heAllo , 'WSO2(.*)A(.*)', 2) This outputs the substring by applying the regex and considering the group.number . In this scenario, the output is \" ello\".","title":"substr (Function)"},{"location":"api/4.0.16/#trim-function","text":"Returns a copy of the string with leading and trailing whitespace omitted Syntax STRING str:trim( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that needs to be trimmed. STRING No No Examples EXAMPLE 1 trim( AbCDefghiJ KLMN ) This returns a copy of the input.string with the leading and/or trailing white-spaces omitted. In this scenario, the output is \"AbCDefghiJ KLMN\".","title":"trim (Function)"},{"location":"api/4.0.16/#unhex-function","text":"unhex(str) interprets each pair of characters in the argument as a hexadecimal number and converts it to the byte represented by the number Syntax STRING str:unhex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The hexadecimal input string that needs to be converted to string. STRING No No Examples EXAMPLE 1 unhex( 4d7953514c ) This converts the hexadecimal value to string","title":"unhex (Function)"},{"location":"api/4.0.16/#upper-function","text":"Converts the simple letters in the input string to the equivalent capital/block letters. Syntax STRING str:upper( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be converted to the upper case (equivalent capital/block letters). STRING No No Examples EXAMPLE 1 upper( Hello World ) This converts the simple letters in the input.string to theequivalent capital letters. In this scenario, the output is \"HELLO WORLD\".","title":"upper (Function)"},{"location":"api/4.0.16/#tokenize-stream-processor","text":"Tokenize the string by delimiters and return as tokens. A new event will be created for each token Syntax str:tokenize( STRING input.string, STRING regex, BOOL distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input text which should be split. STRING No No regex The string value to be used to tokenize the 'input.string'. STRING No No distinct Flag to return only distinct values false BOOL Yes No Extra Return Attributes Name Description Possible Types token Attribute which contains a single token. STRING Examples EXAMPLE 1 define stream inputStream (str string); @info(name = 'query1') from inputStream#str:tokenize(str , ',') select text insert into outputStream; This query performs tokenization for the given string. If the str is \"Android,Windows8,iOS\", then 3 events containing token attribute value, Android , Windows8 , iOS in order.","title":"tokenize (Stream Processor)"},{"location":"api/4.0.17/","text":"API Docs - v4.0.17 Str groupConcat (Aggregate Function) Returns concated string keys by aggregating all the events separating them by the given separator. Syntax STRING str:groupConcat( STRING key, STRING separator, STRING distinct, STRING order) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key The string that need to be aggregated. STRING No No separator The separator that separates each string key getting aggregated. , STRING Yes No distinct To only have distinct string keys in the the aggregation. false STRING Yes No order Accepts 'ASC' or 'DESC' strings to sort the string keys by ascending or descending order. No order STRING Yes No Examples EXAMPLE 1 from InputStream#window.time(5 min) select str:groupConcat( key ) as groupedKeys input OutputStream; This returns a string that is the result of the concatenated keys separated by the given separator. When we send events having values for the key 'A' , 'B' , 'S' , 'C' , 'A' it will return \"A,B,S,C,A\" as the output EXAMPLE 2 from InputStream#window.time(5 min) select groupConcat( key , - ,true, ASC ) as groupedKeys input OutputStream; This returns a string that is the result of the concatenated keys separated by the given separator. When we send events having values for the key 'A' , 'B' , 'S' , 'C' , 'A' it will return \"A-B-C-S\" as the output charAt (Function) Returns the char value as a string value at the specified index. Syntax STRING str:charAt( STRING input.value, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.value The input string that used to find the character. STRING No No index The variable that specifies the index. INT No No Examples EXAMPLE 1 charAt( WSO2 , 1) This will output the character that exists at index 1. In this case, it will output 'S'. coalesce (Function) Returns the value of the first of its input parameters that is not null Syntax INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT str:coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have one or more input parameters in any data type. All the specified parameters should be of the same type. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No No Examples EXAMPLE 1 coalesce(null, BBB , CCC ) This returns the first input parameter that is not null. In this example, it returns \"BBB\" concat (Function) Returns a string that is the result of concatenating two or more string values. Syntax STRING str:concat( STRING argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have two or more string type input parameters. STRING No No Examples EXAMPLE 1 concat( D533 , 8JU^ , XYZ ) This returns a string value by concatenating the given arguments. In this case, it will return \"D5338JU^XYZ\" as the output contains (Function) This method returns true if the input.string contains the specified sequence of char values in the search.string . Syntax BOOL str:contains( STRING input.string, STRING search.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string Input string value. STRING No No search.string The string value to be searched for in the input.string . STRING No No Examples EXAMPLE 1 contains( 21 products are produced by WSO2 currently , WSO2 ) This returns a boolean value as the output. In this case, it returns true . equalsIgnoreCase (Function) Compares two strings lexicographically. Syntax BOOL str:equalsIgnoreCase( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument. This is compared with the first argument. STRING No No Examples EXAMPLE 1 equalsIgnoreCase( WSO2 , wso2 ) This returns a boolean value as the output. In this scenario, it returns \"true\". fillTemplate (Function) Replaces the templated positions in a given template with provided strings which matches withthe index in the template. Syntax STRING str:fillTemplate( STRING template, STRING|INT|LONG|DOUBLE|FLOAT|BOOL replacement.strings) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic template The string with templated fields that needs to be filled with the given strings. Templated fields should be in following the format {{INDEX}} where INDEX is an integer. This index is used to map the strings which are used to replace the templated fields. STRING No No replacement.strings Strings to replace the templated positions in the template. There can be any number of arguments from the 2nd argument. STRING INT LONG DOUBLE FLOAT BOOL No No Examples EXAMPLE 1 str:fillTemplate( This is {{1}} for the {{2}} function , 'an example', 'fillTemplate') In this example, the template is 'This is {{1}} for the {{2}} function'.Here the templated string {{1}} will be replaced with the 1st string value provided ('an example'). {{2}} will be replaced with the 2nd string provided ('fillTemplate') The return string will be 'This is an example for the fillTemplate function'. hex (Function) Returns a hexadecimal string representation of str, where each byte of each character in str is converted to two hexadecimal digits Syntax STRING str:hex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the hexadecimal value. STRING No No Examples EXAMPLE 1 hex( MySQL ) This returns the hexadecimal value of the input.string. In this scenario, the output is \"4d7953514c\". length (Function) Returns the length of this string. Syntax INT str:length( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the length. STRING No No Examples EXAMPLE 1 length( Hello World ) This outputs the length of the provided string. In this scenario, the, output is 11 . lower (Function) Converts the capital letters in the input string to the equivalent simple letters. Syntax STRING str:lower( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to convert to the lower case (i.e., equivalent simple letters). STRING No No Examples EXAMPLE 1 lower( WSO2 cep ) This converts the capital letters in the input.string to the equivalent simple letters. In this scenario, the output is \"wso2 cep \". regexp (Function) Returns whether this 'string' matches the given regular expression 'regex' or not. Syntax BOOL str:regexp( STRING input.string, STRING regex) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to match with the given regular expression. STRING No No regex The regular expression to be matched with the input string. STRING No No Examples EXAMPLE 1 regexp( WSO2 abcdh , WSO(.*h) ) This returns a boolean value after matching regular expression with the given string. In this scenario, it returns \"true\" as the output. repeat (Function) Repeats a string for a specified number of times. Syntax STRING str:repeat( STRING input.string, INT times) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that is repeated the number of times as defined by the user. STRING No No times The number of times the input.string needs to be repeated . INT No No Examples EXAMPLE 1 repeat( StRing 1 , 3) This returns a string value by repeating the string for a specified number of times. In this scenario, the output is \"StRing 1StRing 1StRing 1\". replaceAll (Function) Replaces each substring of this string that matches the given expression with the given replacement. Syntax STRING str:replaceAll( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No regex The regular expression to be matched with the input string. STRING No No replacement.string The striing with which each substring that matches the given expression should be replaced. STRING No No Examples EXAMPLE 1 replaceAll( hello hi hello , 'hello', 'test') This returns a string after replacing the substrings of the input string with the replacement string. In this scenario, the output is \"test hi test\" . replaceFirst (Function) Replaces the first substring of this string that matches the given expression, with the given replacement. Syntax STRING str:replaceFirst( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be replaced. STRING No No regex The regular expression with which the input string should be matched. STRING No No replacement.string The string with which the first substring of input string that matches the regular expression should be replaced. STRING No No Examples EXAMPLE 1 replaceFirst( hello WSO2 A hello , 'WSO2(.*)A', 'XXXX') This returns a string after replacing the first substring with the given replacement string. In this scenario, the output is \"hello XXXX hello\". reverse (Function) Returns the reverse ordered string of the input. Syntax STRING str:reverse( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be reversed. STRING No No Examples EXAMPLE 1 reverse( Hello World ) This outputs a string value by reversing the incoming input.string . In this scenario, the output is \"dlroW olleH\". split (Function) Splits the source string by split.string and returns the substring specified via the group.number . Syntax STRING str:split( STRING input.string, STRING split.string, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No split.string The string value to be used to split the input.string . STRING No No group.number The index of the split group INT No No Examples EXAMPLE 1 split( WSO2,ABM,NSFT , , , 0) This splits the given input.string by given split.string and returns the string in the index given by group.number. In this scenario, the output will is \"WSO2\". strcmp (Function) Compares two strings lexicographically. Syntax INT str:strcmp( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument that should be compared with the first argument lexicographically. STRING No No Examples EXAMPLE 1 strcmp( AbCDefghiJ KLMN , 'Hello') This compares two strings lexicographically and outputs an integer value substr (Function) This returns a new string that is a substring of this string Syntax STRING str:substr( STRING input.string, INT begin.index, INT length, STRING regex, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be processed. STRING No No begin.index Starting index to consider for the substring. INT No No length The length of the substring. INT No No regex The regular expression that should be matched with the input string.. STRING No No group.number The regex group number INT No No Examples EXAMPLE 1 substr( AbCDefghiJ KLMN , 4) This outputs the substring based on the given begin.index . In this scenario, the output is \"efghiJ KLMN\". EXAMPLE 2 substr( AbCDefghiJ KLMN , 2, 4) This outputs the substring based on the given begin.index and length. In this scenario, the output is \"CDef\". EXAMPLE 3 substr( WSO2D efghiJ KLMN , '^WSO2(.*)') This outputs the substring by applying the regex. In this scenario, the output is \"WSO2D efghiJ KLMN\". EXAMPLE 4 substr( WSO2 cep WSO2 XX E hi hA WSO2 heAllo , 'WSO2(.*)A(.*)', 2) This outputs the substring by applying the regex and considering the group.number . In this scenario, the output is \" ello\". trim (Function) Returns a copy of the string with leading and trailing whitespace omitted Syntax STRING str:trim( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that needs to be trimmed. STRING No No Examples EXAMPLE 1 trim( AbCDefghiJ KLMN ) This returns a copy of the input.string with the leading and/or trailing white-spaces omitted. In this scenario, the output is \"AbCDefghiJ KLMN\". unhex (Function) unhex(str) interprets each pair of characters in the argument as a hexadecimal number and converts it to the byte represented by the number Syntax STRING str:unhex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The hexadecimal input string that needs to be converted to string. STRING No No Examples EXAMPLE 1 unhex( 4d7953514c ) This converts the hexadecimal value to string upper (Function) Converts the simple letters in the input string to the equivalent capital/block letters. Syntax STRING str:upper( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be converted to the upper case (equivalent capital/block letters). STRING No No Examples EXAMPLE 1 upper( Hello World ) This converts the simple letters in the input.string to theequivalent capital letters. In this scenario, the output is \"HELLO WORLD\". tokenize (Stream Processor) Tokenize the string by delimiters and return as tokens. A new event will be created for each token Syntax str:tokenize( STRING input.string, STRING regex, BOOL distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input text which should be split. STRING No No regex The string value to be used to tokenize the 'input.string'. STRING No No distinct Flag to return only distinct values false BOOL Yes No Extra Return Attributes Name Description Possible Types token Attribute which contains a single token. STRING Examples EXAMPLE 1 define stream inputStream (str string); @info(name = 'query1') from inputStream#str:tokenize(str , ',') select text insert into outputStream; This query performs tokenization for the given string. If the str is \"Android,Windows8,iOS\", then 3 events containing token attribute value, Android , Windows8 , iOS in order.","title":"4.0.17"},{"location":"api/4.0.17/#api-docs-v4017","text":"","title":"API Docs - v4.0.17"},{"location":"api/4.0.17/#str","text":"","title":"Str"},{"location":"api/4.0.17/#groupconcat-aggregate-function","text":"Returns concated string keys by aggregating all the events separating them by the given separator. Syntax STRING str:groupConcat( STRING key, STRING separator, STRING distinct, STRING order) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key The string that need to be aggregated. STRING No No separator The separator that separates each string key getting aggregated. , STRING Yes No distinct To only have distinct string keys in the the aggregation. false STRING Yes No order Accepts 'ASC' or 'DESC' strings to sort the string keys by ascending or descending order. No order STRING Yes No Examples EXAMPLE 1 from InputStream#window.time(5 min) select str:groupConcat( key ) as groupedKeys input OutputStream; This returns a string that is the result of the concatenated keys separated by the given separator. When we send events having values for the key 'A' , 'B' , 'S' , 'C' , 'A' it will return \"A,B,S,C,A\" as the output EXAMPLE 2 from InputStream#window.time(5 min) select groupConcat( key , - ,true, ASC ) as groupedKeys input OutputStream; This returns a string that is the result of the concatenated keys separated by the given separator. When we send events having values for the key 'A' , 'B' , 'S' , 'C' , 'A' it will return \"A-B-C-S\" as the output","title":"groupConcat (Aggregate Function)"},{"location":"api/4.0.17/#charat-function","text":"Returns the char value as a string value at the specified index. Syntax STRING str:charAt( STRING input.value, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.value The input string that used to find the character. STRING No No index The variable that specifies the index. INT No No Examples EXAMPLE 1 charAt( WSO2 , 1) This will output the character that exists at index 1. In this case, it will output 'S'.","title":"charAt (Function)"},{"location":"api/4.0.17/#coalesce-function","text":"Returns the value of the first of its input parameters that is not null Syntax INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT str:coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have one or more input parameters in any data type. All the specified parameters should be of the same type. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No No Examples EXAMPLE 1 coalesce(null, BBB , CCC ) This returns the first input parameter that is not null. In this example, it returns \"BBB\"","title":"coalesce (Function)"},{"location":"api/4.0.17/#concat-function","text":"Returns a string that is the result of concatenating two or more string values. Syntax STRING str:concat( STRING argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have two or more string type input parameters. STRING No No Examples EXAMPLE 1 concat( D533 , 8JU^ , XYZ ) This returns a string value by concatenating the given arguments. In this case, it will return \"D5338JU^XYZ\" as the output","title":"concat (Function)"},{"location":"api/4.0.17/#contains-function","text":"This method returns true if the input.string contains the specified sequence of char values in the search.string . Syntax BOOL str:contains( STRING input.string, STRING search.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string Input string value. STRING No No search.string The string value to be searched for in the input.string . STRING No No Examples EXAMPLE 1 contains( 21 products are produced by WSO2 currently , WSO2 ) This returns a boolean value as the output. In this case, it returns true .","title":"contains (Function)"},{"location":"api/4.0.17/#equalsignorecase-function","text":"Compares two strings lexicographically. Syntax BOOL str:equalsIgnoreCase( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument. This is compared with the first argument. STRING No No Examples EXAMPLE 1 equalsIgnoreCase( WSO2 , wso2 ) This returns a boolean value as the output. In this scenario, it returns \"true\".","title":"equalsIgnoreCase (Function)"},{"location":"api/4.0.17/#filltemplate-function","text":"Replaces the templated positions in a given template with provided strings which matches withthe index in the template. Syntax STRING str:fillTemplate( STRING template, STRING|INT|LONG|DOUBLE|FLOAT|BOOL replacement.strings) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic template The string with templated fields that needs to be filled with the given strings. Templated fields should be in following the format {{INDEX}} where INDEX is an integer. This index is used to map the strings which are used to replace the templated fields. STRING No No replacement.strings Strings to replace the templated positions in the template. There can be any number of arguments from the 2nd argument. STRING INT LONG DOUBLE FLOAT BOOL No No Examples EXAMPLE 1 str:fillTemplate( This is {{1}} for the {{2}} function , 'an example', 'fillTemplate') In this example, the template is 'This is {{1}} for the {{2}} function'.Here the templated string {{1}} will be replaced with the 1st string value provided ('an example'). {{2}} will be replaced with the 2nd string provided ('fillTemplate') The return string will be 'This is an example for the fillTemplate function'.","title":"fillTemplate (Function)"},{"location":"api/4.0.17/#hex-function","text":"Returns a hexadecimal string representation of str, where each byte of each character in str is converted to two hexadecimal digits Syntax STRING str:hex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the hexadecimal value. STRING No No Examples EXAMPLE 1 hex( MySQL ) This returns the hexadecimal value of the input.string. In this scenario, the output is \"4d7953514c\".","title":"hex (Function)"},{"location":"api/4.0.17/#length-function","text":"Returns the length of this string. Syntax INT str:length( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the length. STRING No No Examples EXAMPLE 1 length( Hello World ) This outputs the length of the provided string. In this scenario, the, output is 11 .","title":"length (Function)"},{"location":"api/4.0.17/#lower-function","text":"Converts the capital letters in the input string to the equivalent simple letters. Syntax STRING str:lower( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to convert to the lower case (i.e., equivalent simple letters). STRING No No Examples EXAMPLE 1 lower( WSO2 cep ) This converts the capital letters in the input.string to the equivalent simple letters. In this scenario, the output is \"wso2 cep \".","title":"lower (Function)"},{"location":"api/4.0.17/#regexp-function","text":"Returns whether this 'string' matches the given regular expression 'regex' or not. Syntax BOOL str:regexp( STRING input.string, STRING regex) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to match with the given regular expression. STRING No No regex The regular expression to be matched with the input string. STRING No No Examples EXAMPLE 1 regexp( WSO2 abcdh , WSO(.*h) ) This returns a boolean value after matching regular expression with the given string. In this scenario, it returns \"true\" as the output.","title":"regexp (Function)"},{"location":"api/4.0.17/#repeat-function","text":"Repeats a string for a specified number of times. Syntax STRING str:repeat( STRING input.string, INT times) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that is repeated the number of times as defined by the user. STRING No No times The number of times the input.string needs to be repeated . INT No No Examples EXAMPLE 1 repeat( StRing 1 , 3) This returns a string value by repeating the string for a specified number of times. In this scenario, the output is \"StRing 1StRing 1StRing 1\".","title":"repeat (Function)"},{"location":"api/4.0.17/#replaceall-function","text":"Replaces each substring of this string that matches the given expression with the given replacement. Syntax STRING str:replaceAll( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No regex The regular expression to be matched with the input string. STRING No No replacement.string The striing with which each substring that matches the given expression should be replaced. STRING No No Examples EXAMPLE 1 replaceAll( hello hi hello , 'hello', 'test') This returns a string after replacing the substrings of the input string with the replacement string. In this scenario, the output is \"test hi test\" .","title":"replaceAll (Function)"},{"location":"api/4.0.17/#replacefirst-function","text":"Replaces the first substring of this string that matches the given expression, with the given replacement. Syntax STRING str:replaceFirst( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be replaced. STRING No No regex The regular expression with which the input string should be matched. STRING No No replacement.string The string with which the first substring of input string that matches the regular expression should be replaced. STRING No No Examples EXAMPLE 1 replaceFirst( hello WSO2 A hello , 'WSO2(.*)A', 'XXXX') This returns a string after replacing the first substring with the given replacement string. In this scenario, the output is \"hello XXXX hello\".","title":"replaceFirst (Function)"},{"location":"api/4.0.17/#reverse-function","text":"Returns the reverse ordered string of the input. Syntax STRING str:reverse( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be reversed. STRING No No Examples EXAMPLE 1 reverse( Hello World ) This outputs a string value by reversing the incoming input.string . In this scenario, the output is \"dlroW olleH\".","title":"reverse (Function)"},{"location":"api/4.0.17/#split-function","text":"Splits the source string by split.string and returns the substring specified via the group.number . Syntax STRING str:split( STRING input.string, STRING split.string, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No split.string The string value to be used to split the input.string . STRING No No group.number The index of the split group INT No No Examples EXAMPLE 1 split( WSO2,ABM,NSFT , , , 0) This splits the given input.string by given split.string and returns the string in the index given by group.number. In this scenario, the output will is \"WSO2\".","title":"split (Function)"},{"location":"api/4.0.17/#strcmp-function","text":"Compares two strings lexicographically. Syntax INT str:strcmp( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument that should be compared with the first argument lexicographically. STRING No No Examples EXAMPLE 1 strcmp( AbCDefghiJ KLMN , 'Hello') This compares two strings lexicographically and outputs an integer value","title":"strcmp (Function)"},{"location":"api/4.0.17/#substr-function","text":"This returns a new string that is a substring of this string Syntax STRING str:substr( STRING input.string, INT begin.index, INT length, STRING regex, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be processed. STRING No No begin.index Starting index to consider for the substring. INT No No length The length of the substring. INT No No regex The regular expression that should be matched with the input string.. STRING No No group.number The regex group number INT No No Examples EXAMPLE 1 substr( AbCDefghiJ KLMN , 4) This outputs the substring based on the given begin.index . In this scenario, the output is \"efghiJ KLMN\". EXAMPLE 2 substr( AbCDefghiJ KLMN , 2, 4) This outputs the substring based on the given begin.index and length. In this scenario, the output is \"CDef\". EXAMPLE 3 substr( WSO2D efghiJ KLMN , '^WSO2(.*)') This outputs the substring by applying the regex. In this scenario, the output is \"WSO2D efghiJ KLMN\". EXAMPLE 4 substr( WSO2 cep WSO2 XX E hi hA WSO2 heAllo , 'WSO2(.*)A(.*)', 2) This outputs the substring by applying the regex and considering the group.number . In this scenario, the output is \" ello\".","title":"substr (Function)"},{"location":"api/4.0.17/#trim-function","text":"Returns a copy of the string with leading and trailing whitespace omitted Syntax STRING str:trim( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that needs to be trimmed. STRING No No Examples EXAMPLE 1 trim( AbCDefghiJ KLMN ) This returns a copy of the input.string with the leading and/or trailing white-spaces omitted. In this scenario, the output is \"AbCDefghiJ KLMN\".","title":"trim (Function)"},{"location":"api/4.0.17/#unhex-function","text":"unhex(str) interprets each pair of characters in the argument as a hexadecimal number and converts it to the byte represented by the number Syntax STRING str:unhex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The hexadecimal input string that needs to be converted to string. STRING No No Examples EXAMPLE 1 unhex( 4d7953514c ) This converts the hexadecimal value to string","title":"unhex (Function)"},{"location":"api/4.0.17/#upper-function","text":"Converts the simple letters in the input string to the equivalent capital/block letters. Syntax STRING str:upper( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be converted to the upper case (equivalent capital/block letters). STRING No No Examples EXAMPLE 1 upper( Hello World ) This converts the simple letters in the input.string to theequivalent capital letters. In this scenario, the output is \"HELLO WORLD\".","title":"upper (Function)"},{"location":"api/4.0.17/#tokenize-stream-processor","text":"Tokenize the string by delimiters and return as tokens. A new event will be created for each token Syntax str:tokenize( STRING input.string, STRING regex, BOOL distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input text which should be split. STRING No No regex The string value to be used to tokenize the 'input.string'. STRING No No distinct Flag to return only distinct values false BOOL Yes No Extra Return Attributes Name Description Possible Types token Attribute which contains a single token. STRING Examples EXAMPLE 1 define stream inputStream (str string); @info(name = 'query1') from inputStream#str:tokenize(str , ',') select text insert into outputStream; This query performs tokenization for the given string. If the str is \"Android,Windows8,iOS\", then 3 events containing token attribute value, Android , Windows8 , iOS in order.","title":"tokenize (Stream Processor)"},{"location":"api/4.0.18/","text":"API Docs - v4.0.18 Str groupConcat (Aggregate Function) Aggregates the received events by concatenating the keys of those events using a given separator, e.g., comma (,) and hyphen (-), and returns the concatenated key string. Syntax STRING str:groupConcat( STRING key, STRING separator, STRING distinct, STRING order) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key The string that need to be aggregated. STRING No No separator The separator that separates each string key getting aggregated. , STRING Yes No distinct To only have distinct string keys in the the aggregation. false STRING Yes No order Accepts 'ASC' or 'DESC' strings to sort the string keys by ascending or descending order. No order STRING Yes No Examples EXAMPLE 1 from InputStream#window.time(5 min) select str:groupConcat( key ) as groupedKeys input OutputStream; This returns a string that is the result of the concatenated keys separated by the given separator. When we send events having values for the key 'A' , 'B' , 'S' , 'C' , 'A' it will return \"A,B,S,C,A\" as the output EXAMPLE 2 from InputStream#window.time(5 min) select groupConcat( key , - ,true, ASC ) as groupedKeys input OutputStream; This returns a string that is the result of the concatenated keys separated by the given separator. When we send events having values for the key 'A' , 'B' , 'S' , 'C' , 'A' it will return \"A-B-C-S\" as the output charAt (Function) Returns the char value that exists at the given index position of the input string. Syntax STRING str:charAt( STRING input.value, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.value The input string that used to find the character. STRING No No index The variable that specifies the index. INT No No Examples EXAMPLE 1 charAt( WSO2 , 1) This will output the character that exists at index 1. In this case, it will output 'S'. coalesce (Function) Returns the first input parameter value that is not null of the given argument. Syntax INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT str:coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have one or more input parameters in any data type. All the specified parameters should be of the same type. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No No Examples EXAMPLE 1 coalesce(null, BBB , CCC ) This returns the first input parameter that is not null. In this example, it returns \"BBB\" concat (Function) Returns a string that is the result of concatenating two or more input string values. Syntax STRING str:concat( STRING argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have two or more string type input parameters. STRING No No Examples EXAMPLE 1 concat( D533 , 8JU^ , XYZ ) This returns a string value by concatenating the given arguments. In this case, it will return \"D5338JU^XYZ\" as the output contains (Function) Returns true if the input.string contains the specified sequence of char values in the search.string . Syntax BOOL str:contains( STRING input.string, STRING search.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string Input string value. STRING No No search.string The string value to be searched for in the input.string . STRING No No Examples EXAMPLE 1 contains( 21 products are produced by WSO2 currently , WSO2 ) This returns a boolean value as the output. In this case, it returns true . equalsIgnoreCase (Function) Returns a boolean value by comparing two strings lexicographically without considering the letter case. Syntax BOOL str:equalsIgnoreCase( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument. This is compared with the first argument. STRING No No Examples EXAMPLE 1 equalsIgnoreCase( WSO2 , wso2 ) This returns a boolean value as the output. In this scenario, it returns \"true\". fillTemplate (Function) Replaces the templated positions that are marked with an index value in a given template with the provided strings. Syntax STRING str:fillTemplate( STRING template, STRING|INT|LONG|DOUBLE|FLOAT|BOOL replacement.strings) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic template The string with templated fields that needs to be filled with the given strings. Templated fields should be in following the format {{INDEX}} where INDEX is an integer. This index is used to map the strings which are used to replace the templated fields. STRING No No replacement.strings Strings to replace the templated positions in the template. There can be any number of arguments from the 2nd argument. STRING INT LONG DOUBLE FLOAT BOOL No No Examples EXAMPLE 1 str:fillTemplate( This is {{1}} for the {{2}} function , 'an example', 'fillTemplate') In this example, the template is 'This is {{1}} for the {{2}} function'.Here the templated string {{1}} will be replaced with the 1st string value provided ('an example'). {{2}} will be replaced with the 2nd string provided ('fillTemplate') The return string will be 'This is an example for the fillTemplate function'. hex (Function) Returns a hexadecimal string by converting each byte of each character in the input string to two hexadecimal digits. Syntax STRING str:hex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the hexadecimal value. STRING No No Examples EXAMPLE 1 hex( MySQL ) This returns the hexadecimal value of the input.string. In this scenario, the output is \"4d7953514c\". length (Function) Returns the length of the input string. Syntax INT str:length( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the length. STRING No No Examples EXAMPLE 1 length( Hello World ) This outputs the length of the provided string. In this scenario, the, output is 11 . lower (Function) Converts the capital letters in the input string to the equivalent simple letters. Syntax STRING str:lower( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to convert to the lower case (i.e., equivalent simple letters). STRING No No Examples EXAMPLE 1 lower( WSO2 cep ) This converts the capital letters in the input.string to the equivalent simple letters. In this scenario, the output is \"wso2 cep \". regexp (Function) Returns a boolean value based on the matchability of the input string and the given regular expression. Syntax BOOL str:regexp( STRING input.string, STRING regex) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to match with the given regular expression. STRING No No regex The regular expression to be matched with the input string. STRING No No Examples EXAMPLE 1 regexp( WSO2 abcdh , WSO(.*h) ) This returns a boolean value after matching regular expression with the given string. In this scenario, it returns \"true\" as the output. repeat (Function) Repeats the input string for a specified number of times. Syntax STRING str:repeat( STRING input.string, INT times) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that is repeated the number of times as defined by the user. STRING No No times The number of times the input.string needs to be repeated . INT No No Examples EXAMPLE 1 repeat( StRing 1 , 3) This returns a string value by repeating the string for a specified number of times. In this scenario, the output is \"StRing 1StRing 1StRing 1\". replaceAll (Function) Finds all the substrings of the input string that matches with the given expression, and replaces them with the given replacement string. Syntax STRING str:replaceAll( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No regex The regular expression to be matched with the input string. STRING No No replacement.string The striing with which each substring that matches the given expression should be replaced. STRING No No Examples EXAMPLE 1 replaceAll( hello hi hello , 'hello', 'test') This returns a string after replacing the substrings of the input string with the replacement string. In this scenario, the output is \"test hi test\" . replaceFirst (Function) Finds the first substring of the input string that matches with the given regular expression, and replaces itwith the given replacement string. Syntax STRING str:replaceFirst( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be replaced. STRING No No regex The regular expression with which the input string should be matched. STRING No No replacement.string The string with which the first substring of input string that matches the regular expression should be replaced. STRING No No Examples EXAMPLE 1 replaceFirst( hello WSO2 A hello , 'WSO2(.*)A', 'XXXX') This returns a string after replacing the first substring with the given replacement string. In this scenario, the output is \"hello XXXX hello\". reverse (Function) Returns the input string in the reverse order character-wise and string-wise. Syntax STRING str:reverse( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be reversed. STRING No No Examples EXAMPLE 1 reverse( Hello World ) This outputs a string value by reversing the incoming input.string . In this scenario, the output is \"dlroW olleH\". split (Function) Splits the input.string into substrings using the value parsed in the split.string and returns the substring at the position specified in the group.number . Syntax STRING str:split( STRING input.string, STRING split.string, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No split.string The string value to be used to split the input.string . STRING No No group.number The index of the split group INT No No Examples EXAMPLE 1 split( WSO2,ABM,NSFT , , , 0) This splits the given input.string by given split.string and returns the string in the index given by group.number. In this scenario, the output will is \"WSO2\". strcmp (Function) Compares two strings lexicographically and returns an integer value. If both strings are equal, 0 is returned. If the first string is lexicographically greater than the second string, a positive value is returned. If the first string is lexicographically greater than the second string, a negative value is returned. Syntax INT str:strcmp( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument that should be compared with the first argument lexicographically. STRING No No Examples EXAMPLE 1 strcmp( AbCDefghiJ KLMN , 'Hello') This compares two strings lexicographically and outputs an integer value substr (Function) Returns a substring of the input string by considering a subset or all of the following factors: starting index, length, regular expression, and regex group number. Syntax STRING str:substr( STRING input.string, INT begin.index, INT length, STRING regex, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be processed. STRING No No begin.index Starting index to consider for the substring. INT No No length The length of the substring. INT No No regex The regular expression that should be matched with the input string.. STRING No No group.number The regex group number INT No No Examples EXAMPLE 1 substr( AbCDefghiJ KLMN , 4) This outputs the substring based on the given begin.index . In this scenario, the output is \"efghiJ KLMN\". EXAMPLE 2 substr( AbCDefghiJ KLMN , 2, 4) This outputs the substring based on the given begin.index and length. In this scenario, the output is \"CDef\". EXAMPLE 3 substr( WSO2D efghiJ KLMN , '^WSO2(.*)') This outputs the substring by applying the regex. In this scenario, the output is \"WSO2D efghiJ KLMN\". EXAMPLE 4 substr( WSO2 cep WSO2 XX E hi hA WSO2 heAllo , 'WSO2(.*)A(.*)', 2) This outputs the substring by applying the regex and considering the group.number . In this scenario, the output is \" ello\". trim (Function) Returns a copy of the input string without the leading and trailing whitespace (if any). Syntax STRING str:trim( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that needs to be trimmed. STRING No No Examples EXAMPLE 1 trim( AbCDefghiJ KLMN ) This returns a copy of the input.string with the leading and/or trailing white-spaces omitted. In this scenario, the output is \"AbCDefghiJ KLMN\". unhex (Function) Returns a string by converting the hexadecimal characters in the input string. Syntax STRING str:unhex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The hexadecimal input string that needs to be converted to string. STRING No No Examples EXAMPLE 1 unhex( 4d7953514c ) This converts the hexadecimal value to string upper (Function) Converts the simple letters in the input string to the equivalent capital/block letters. Syntax STRING str:upper( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be converted to the upper case (equivalent capital/block letters). STRING No No Examples EXAMPLE 1 upper( Hello World ) This converts the simple letters in the input.string to theequivalent capital letters. In this scenario, the output is \"HELLO WORLD\". tokenize (Stream Processor) Splits the input string to tokens using the given regular expression and returns the resultant tokens. Syntax str:tokenize( STRING input.string, STRING regex, BOOL distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input text which should be split. STRING No No regex The string value to be used to tokenize the 'input.string'. STRING No No distinct Flag to return only distinct values false BOOL Yes No Extra Return Attributes Name Description Possible Types token Attribute which contains a single token. STRING Examples EXAMPLE 1 define stream inputStream (str string); @info(name = 'query1') from inputStream#str:tokenize(str , ',') select text insert into outputStream; This query performs tokenization for the given string. If the str is \"Android,Windows8,iOS\", then 3 events containing token attribute value, Android , Windows8 , iOS in order.","title":"4.0.18"},{"location":"api/4.0.18/#api-docs-v4018","text":"","title":"API Docs - v4.0.18"},{"location":"api/4.0.18/#str","text":"","title":"Str"},{"location":"api/4.0.18/#groupconcat-aggregate-function","text":"Aggregates the received events by concatenating the keys of those events using a given separator, e.g., comma (,) and hyphen (-), and returns the concatenated key string. Syntax STRING str:groupConcat( STRING key, STRING separator, STRING distinct, STRING order) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key The string that need to be aggregated. STRING No No separator The separator that separates each string key getting aggregated. , STRING Yes No distinct To only have distinct string keys in the the aggregation. false STRING Yes No order Accepts 'ASC' or 'DESC' strings to sort the string keys by ascending or descending order. No order STRING Yes No Examples EXAMPLE 1 from InputStream#window.time(5 min) select str:groupConcat( key ) as groupedKeys input OutputStream; This returns a string that is the result of the concatenated keys separated by the given separator. When we send events having values for the key 'A' , 'B' , 'S' , 'C' , 'A' it will return \"A,B,S,C,A\" as the output EXAMPLE 2 from InputStream#window.time(5 min) select groupConcat( key , - ,true, ASC ) as groupedKeys input OutputStream; This returns a string that is the result of the concatenated keys separated by the given separator. When we send events having values for the key 'A' , 'B' , 'S' , 'C' , 'A' it will return \"A-B-C-S\" as the output","title":"groupConcat (Aggregate Function)"},{"location":"api/4.0.18/#charat-function","text":"Returns the char value that exists at the given index position of the input string. Syntax STRING str:charAt( STRING input.value, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.value The input string that used to find the character. STRING No No index The variable that specifies the index. INT No No Examples EXAMPLE 1 charAt( WSO2 , 1) This will output the character that exists at index 1. In this case, it will output 'S'.","title":"charAt (Function)"},{"location":"api/4.0.18/#coalesce-function","text":"Returns the first input parameter value that is not null of the given argument. Syntax INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT str:coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have one or more input parameters in any data type. All the specified parameters should be of the same type. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No No Examples EXAMPLE 1 coalesce(null, BBB , CCC ) This returns the first input parameter that is not null. In this example, it returns \"BBB\"","title":"coalesce (Function)"},{"location":"api/4.0.18/#concat-function","text":"Returns a string that is the result of concatenating two or more input string values. Syntax STRING str:concat( STRING argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have two or more string type input parameters. STRING No No Examples EXAMPLE 1 concat( D533 , 8JU^ , XYZ ) This returns a string value by concatenating the given arguments. In this case, it will return \"D5338JU^XYZ\" as the output","title":"concat (Function)"},{"location":"api/4.0.18/#contains-function","text":"Returns true if the input.string contains the specified sequence of char values in the search.string . Syntax BOOL str:contains( STRING input.string, STRING search.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string Input string value. STRING No No search.string The string value to be searched for in the input.string . STRING No No Examples EXAMPLE 1 contains( 21 products are produced by WSO2 currently , WSO2 ) This returns a boolean value as the output. In this case, it returns true .","title":"contains (Function)"},{"location":"api/4.0.18/#equalsignorecase-function","text":"Returns a boolean value by comparing two strings lexicographically without considering the letter case. Syntax BOOL str:equalsIgnoreCase( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument. This is compared with the first argument. STRING No No Examples EXAMPLE 1 equalsIgnoreCase( WSO2 , wso2 ) This returns a boolean value as the output. In this scenario, it returns \"true\".","title":"equalsIgnoreCase (Function)"},{"location":"api/4.0.18/#filltemplate-function","text":"Replaces the templated positions that are marked with an index value in a given template with the provided strings. Syntax STRING str:fillTemplate( STRING template, STRING|INT|LONG|DOUBLE|FLOAT|BOOL replacement.strings) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic template The string with templated fields that needs to be filled with the given strings. Templated fields should be in following the format {{INDEX}} where INDEX is an integer. This index is used to map the strings which are used to replace the templated fields. STRING No No replacement.strings Strings to replace the templated positions in the template. There can be any number of arguments from the 2nd argument. STRING INT LONG DOUBLE FLOAT BOOL No No Examples EXAMPLE 1 str:fillTemplate( This is {{1}} for the {{2}} function , 'an example', 'fillTemplate') In this example, the template is 'This is {{1}} for the {{2}} function'.Here the templated string {{1}} will be replaced with the 1st string value provided ('an example'). {{2}} will be replaced with the 2nd string provided ('fillTemplate') The return string will be 'This is an example for the fillTemplate function'.","title":"fillTemplate (Function)"},{"location":"api/4.0.18/#hex-function","text":"Returns a hexadecimal string by converting each byte of each character in the input string to two hexadecimal digits. Syntax STRING str:hex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the hexadecimal value. STRING No No Examples EXAMPLE 1 hex( MySQL ) This returns the hexadecimal value of the input.string. In this scenario, the output is \"4d7953514c\".","title":"hex (Function)"},{"location":"api/4.0.18/#length-function","text":"Returns the length of the input string. Syntax INT str:length( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the length. STRING No No Examples EXAMPLE 1 length( Hello World ) This outputs the length of the provided string. In this scenario, the, output is 11 .","title":"length (Function)"},{"location":"api/4.0.18/#lower-function","text":"Converts the capital letters in the input string to the equivalent simple letters. Syntax STRING str:lower( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to convert to the lower case (i.e., equivalent simple letters). STRING No No Examples EXAMPLE 1 lower( WSO2 cep ) This converts the capital letters in the input.string to the equivalent simple letters. In this scenario, the output is \"wso2 cep \".","title":"lower (Function)"},{"location":"api/4.0.18/#regexp-function","text":"Returns a boolean value based on the matchability of the input string and the given regular expression. Syntax BOOL str:regexp( STRING input.string, STRING regex) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to match with the given regular expression. STRING No No regex The regular expression to be matched with the input string. STRING No No Examples EXAMPLE 1 regexp( WSO2 abcdh , WSO(.*h) ) This returns a boolean value after matching regular expression with the given string. In this scenario, it returns \"true\" as the output.","title":"regexp (Function)"},{"location":"api/4.0.18/#repeat-function","text":"Repeats the input string for a specified number of times. Syntax STRING str:repeat( STRING input.string, INT times) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that is repeated the number of times as defined by the user. STRING No No times The number of times the input.string needs to be repeated . INT No No Examples EXAMPLE 1 repeat( StRing 1 , 3) This returns a string value by repeating the string for a specified number of times. In this scenario, the output is \"StRing 1StRing 1StRing 1\".","title":"repeat (Function)"},{"location":"api/4.0.18/#replaceall-function","text":"Finds all the substrings of the input string that matches with the given expression, and replaces them with the given replacement string. Syntax STRING str:replaceAll( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No regex The regular expression to be matched with the input string. STRING No No replacement.string The striing with which each substring that matches the given expression should be replaced. STRING No No Examples EXAMPLE 1 replaceAll( hello hi hello , 'hello', 'test') This returns a string after replacing the substrings of the input string with the replacement string. In this scenario, the output is \"test hi test\" .","title":"replaceAll (Function)"},{"location":"api/4.0.18/#replacefirst-function","text":"Finds the first substring of the input string that matches with the given regular expression, and replaces itwith the given replacement string. Syntax STRING str:replaceFirst( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be replaced. STRING No No regex The regular expression with which the input string should be matched. STRING No No replacement.string The string with which the first substring of input string that matches the regular expression should be replaced. STRING No No Examples EXAMPLE 1 replaceFirst( hello WSO2 A hello , 'WSO2(.*)A', 'XXXX') This returns a string after replacing the first substring with the given replacement string. In this scenario, the output is \"hello XXXX hello\".","title":"replaceFirst (Function)"},{"location":"api/4.0.18/#reverse-function","text":"Returns the input string in the reverse order character-wise and string-wise. Syntax STRING str:reverse( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be reversed. STRING No No Examples EXAMPLE 1 reverse( Hello World ) This outputs a string value by reversing the incoming input.string . In this scenario, the output is \"dlroW olleH\".","title":"reverse (Function)"},{"location":"api/4.0.18/#split-function","text":"Splits the input.string into substrings using the value parsed in the split.string and returns the substring at the position specified in the group.number . Syntax STRING str:split( STRING input.string, STRING split.string, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No split.string The string value to be used to split the input.string . STRING No No group.number The index of the split group INT No No Examples EXAMPLE 1 split( WSO2,ABM,NSFT , , , 0) This splits the given input.string by given split.string and returns the string in the index given by group.number. In this scenario, the output will is \"WSO2\".","title":"split (Function)"},{"location":"api/4.0.18/#strcmp-function","text":"Compares two strings lexicographically and returns an integer value. If both strings are equal, 0 is returned. If the first string is lexicographically greater than the second string, a positive value is returned. If the first string is lexicographically greater than the second string, a negative value is returned. Syntax INT str:strcmp( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument that should be compared with the first argument lexicographically. STRING No No Examples EXAMPLE 1 strcmp( AbCDefghiJ KLMN , 'Hello') This compares two strings lexicographically and outputs an integer value","title":"strcmp (Function)"},{"location":"api/4.0.18/#substr-function","text":"Returns a substring of the input string by considering a subset or all of the following factors: starting index, length, regular expression, and regex group number. Syntax STRING str:substr( STRING input.string, INT begin.index, INT length, STRING regex, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be processed. STRING No No begin.index Starting index to consider for the substring. INT No No length The length of the substring. INT No No regex The regular expression that should be matched with the input string.. STRING No No group.number The regex group number INT No No Examples EXAMPLE 1 substr( AbCDefghiJ KLMN , 4) This outputs the substring based on the given begin.index . In this scenario, the output is \"efghiJ KLMN\". EXAMPLE 2 substr( AbCDefghiJ KLMN , 2, 4) This outputs the substring based on the given begin.index and length. In this scenario, the output is \"CDef\". EXAMPLE 3 substr( WSO2D efghiJ KLMN , '^WSO2(.*)') This outputs the substring by applying the regex. In this scenario, the output is \"WSO2D efghiJ KLMN\". EXAMPLE 4 substr( WSO2 cep WSO2 XX E hi hA WSO2 heAllo , 'WSO2(.*)A(.*)', 2) This outputs the substring by applying the regex and considering the group.number . In this scenario, the output is \" ello\".","title":"substr (Function)"},{"location":"api/4.0.18/#trim-function","text":"Returns a copy of the input string without the leading and trailing whitespace (if any). Syntax STRING str:trim( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that needs to be trimmed. STRING No No Examples EXAMPLE 1 trim( AbCDefghiJ KLMN ) This returns a copy of the input.string with the leading and/or trailing white-spaces omitted. In this scenario, the output is \"AbCDefghiJ KLMN\".","title":"trim (Function)"},{"location":"api/4.0.18/#unhex-function","text":"Returns a string by converting the hexadecimal characters in the input string. Syntax STRING str:unhex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The hexadecimal input string that needs to be converted to string. STRING No No Examples EXAMPLE 1 unhex( 4d7953514c ) This converts the hexadecimal value to string","title":"unhex (Function)"},{"location":"api/4.0.18/#upper-function","text":"Converts the simple letters in the input string to the equivalent capital/block letters. Syntax STRING str:upper( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be converted to the upper case (equivalent capital/block letters). STRING No No Examples EXAMPLE 1 upper( Hello World ) This converts the simple letters in the input.string to theequivalent capital letters. In this scenario, the output is \"HELLO WORLD\".","title":"upper (Function)"},{"location":"api/4.0.18/#tokenize-stream-processor","text":"Splits the input string to tokens using the given regular expression and returns the resultant tokens. Syntax str:tokenize( STRING input.string, STRING regex, BOOL distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input text which should be split. STRING No No regex The string value to be used to tokenize the 'input.string'. STRING No No distinct Flag to return only distinct values false BOOL Yes No Extra Return Attributes Name Description Possible Types token Attribute which contains a single token. STRING Examples EXAMPLE 1 define stream inputStream (str string); @info(name = 'query1') from inputStream#str:tokenize(str , ',') select text insert into outputStream; This query performs tokenization for the given string. If the str is \"Android,Windows8,iOS\", then 3 events containing token attribute value, Android , Windows8 , iOS in order.","title":"tokenize (Stream Processor)"},{"location":"api/4.0.19/","text":"API Docs - v4.0.19 Str groupConcat (Aggregate Function) Aggregates the received events by concatenating the keys of those events using a given separator, e.g., comma (,) and hyphen (-), and returns the concatenated key string. Syntax STRING str:groupConcat( STRING key, STRING separator, STRING distinct, STRING order) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key The string that need to be aggregated. STRING No No separator The separator that separates each string key getting aggregated. , STRING Yes No distinct To only have distinct string keys in the the aggregation. false STRING Yes No order Accepts 'ASC' or 'DESC' strings to sort the string keys by ascending or descending order. No order STRING Yes No Examples EXAMPLE 1 from InputStream#window.time(5 min) select str:groupConcat( key ) as groupedKeys input OutputStream; This returns a string that is the result of the concatenated keys separated by the given separator. When we send events having values for the key 'A' , 'B' , 'S' , 'C' , 'A' it will return \"A,B,S,C,A\" as the output EXAMPLE 2 from InputStream#window.time(5 min) select groupConcat( key , - ,true, ASC ) as groupedKeys input OutputStream; This returns a string that is the result of the concatenated keys separated by the given separator. When we send events having values for the key 'A' , 'B' , 'S' , 'C' , 'A' it will return \"A-B-C-S\" as the output charAt (Function) Returns the char value that exists at the given index position of the input string. Syntax STRING str:charAt( STRING input.value, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.value The input string that used to find the character. STRING No No index The variable that specifies the index. INT No No Examples EXAMPLE 1 charAt( WSO2 , 1) This will output the character that exists at index 1. In this case, it will output 'S'. coalesce (Function) Returns the first input parameter value that is not null of the given argument. Syntax INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT str:coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have one or more input parameters in any data type. All the specified parameters should be of the same type. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No No Examples EXAMPLE 1 coalesce(null, BBB , CCC ) This returns the first input parameter that is not null. In this example, it returns \"BBB\" concat (Function) Returns a string that is the result of concatenating two or more input string values. Syntax STRING str:concat( STRING argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have two or more string type input parameters. STRING No No Examples EXAMPLE 1 concat( D533 , 8JU^ , XYZ ) This returns a string value by concatenating the given arguments. In this case, it will return \"D5338JU^XYZ\" as the output contains (Function) Returns true if the input.string contains the specified sequence of char values in the search.string . Syntax BOOL str:contains( STRING input.string, STRING search.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string Input string value. STRING No No search.string The string value to be searched for in the input.string . STRING No No Examples EXAMPLE 1 contains( 21 products are produced by WSO2 currently , WSO2 ) This returns a boolean value as the output. In this case, it returns true . equalsIgnoreCase (Function) Returns a boolean value by comparing two strings lexicographically without considering the letter case. Syntax BOOL str:equalsIgnoreCase( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument. This is compared with the first argument. STRING No No Examples EXAMPLE 1 equalsIgnoreCase( WSO2 , wso2 ) This returns a boolean value as the output. In this scenario, it returns \"true\". fillTemplate (Function) Replaces the templated positions that are marked with an index value in a given template with the provided strings. Syntax STRING str:fillTemplate( STRING template, STRING|INT|LONG|DOUBLE|FLOAT|BOOL replacement.strings) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic template The string with templated fields that needs to be filled with the given strings. Templated fields should be in following the format {{INDEX}} where INDEX is an integer. This index is used to map the strings which are used to replace the templated fields. STRING No No replacement.strings Strings to replace the templated positions in the template. There can be any number of arguments from the 2nd argument. STRING INT LONG DOUBLE FLOAT BOOL No No Examples EXAMPLE 1 str:fillTemplate( This is {{1}} for the {{2}} function , 'an example', 'fillTemplate') In this example, the template is 'This is {{1}} for the {{2}} function'.Here the templated string {{1}} will be replaced with the 1st string value provided ('an example'). {{2}} will be replaced with the 2nd string provided ('fillTemplate') The return string will be 'This is an example for the fillTemplate function'. hex (Function) Returns a hexadecimal string by converting each byte of each character in the input string to two hexadecimal digits. Syntax STRING str:hex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the hexadecimal value. STRING No No Examples EXAMPLE 1 hex( MySQL ) This returns the hexadecimal value of the input.string. In this scenario, the output is \"4d7953514c\". length (Function) Returns the length of the input string. Syntax INT str:length( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the length. STRING No No Examples EXAMPLE 1 length( Hello World ) This outputs the length of the provided string. In this scenario, the, output is 11 . lower (Function) Converts the capital letters in the input string to the equivalent simple letters. Syntax STRING str:lower( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to convert to the lower case (i.e., equivalent simple letters). STRING No No Examples EXAMPLE 1 lower( WSO2 cep ) This converts the capital letters in the input.string to the equivalent simple letters. In this scenario, the output is \"wso2 cep \". regexp (Function) Returns a boolean value based on the matchability of the input string and the given regular expression. Syntax BOOL str:regexp( STRING input.string, STRING regex) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to match with the given regular expression. STRING No No regex The regular expression to be matched with the input string. STRING No No Examples EXAMPLE 1 regexp( WSO2 abcdh , WSO(.*h) ) This returns a boolean value after matching regular expression with the given string. In this scenario, it returns \"true\" as the output. repeat (Function) Repeats the input string for a specified number of times. Syntax STRING str:repeat( STRING input.string, INT times) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that is repeated the number of times as defined by the user. STRING No No times The number of times the input.string needs to be repeated . INT No No Examples EXAMPLE 1 repeat( StRing 1 , 3) This returns a string value by repeating the string for a specified number of times. In this scenario, the output is \"StRing 1StRing 1StRing 1\". replaceAll (Function) Finds all the substrings of the input string that matches with the given expression, and replaces them with the given replacement string. Syntax STRING str:replaceAll( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No regex The regular expression to be matched with the input string. STRING No No replacement.string The striing with which each substring that matches the given expression should be replaced. STRING No No Examples EXAMPLE 1 replaceAll( hello hi hello , 'hello', 'test') This returns a string after replacing the substrings of the input string with the replacement string. In this scenario, the output is \"test hi test\" . replaceFirst (Function) Finds the first substring of the input string that matches with the given regular expression, and replaces itwith the given replacement string. Syntax STRING str:replaceFirst( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be replaced. STRING No No regex The regular expression with which the input string should be matched. STRING No No replacement.string The string with which the first substring of input string that matches the regular expression should be replaced. STRING No No Examples EXAMPLE 1 replaceFirst( hello WSO2 A hello , 'WSO2(.*)A', 'XXXX') This returns a string after replacing the first substring with the given replacement string. In this scenario, the output is \"hello XXXX hello\". reverse (Function) Returns the input string in the reverse order character-wise and string-wise. Syntax STRING str:reverse( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be reversed. STRING No No Examples EXAMPLE 1 reverse( Hello World ) This outputs a string value by reversing the incoming input.string . In this scenario, the output is \"dlroW olleH\". split (Function) Splits the input.string into substrings using the value parsed in the split.string and returns the substring at the position specified in the group.number . Syntax STRING str:split( STRING input.string, STRING split.string, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No split.string The string value to be used to split the input.string . STRING No No group.number The index of the split group INT No No Examples EXAMPLE 1 split( WSO2,ABM,NSFT , , , 0) This splits the given input.string by given split.string and returns the string in the index given by group.number. In this scenario, the output will is \"WSO2\". strcmp (Function) Compares two strings lexicographically and returns an integer value. If both strings are equal, 0 is returned. If the first string is lexicographically greater than the second string, a positive value is returned. If the first string is lexicographically greater than the second string, a negative value is returned. Syntax INT str:strcmp( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument that should be compared with the first argument lexicographically. STRING No No Examples EXAMPLE 1 strcmp( AbCDefghiJ KLMN , 'Hello') This compares two strings lexicographically and outputs an integer value substr (Function) Returns a substring of the input string by considering a subset or all of the following factors: starting index, length, regular expression, and regex group number. Syntax STRING str:substr( STRING input.string, INT begin.index, INT length, STRING regex, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be processed. STRING No No begin.index Starting index to consider for the substring. INT No No length The length of the substring. INT No No regex The regular expression that should be matched with the input string.. STRING No No group.number The regex group number INT No No Examples EXAMPLE 1 substr( AbCDefghiJ KLMN , 4) This outputs the substring based on the given begin.index . In this scenario, the output is \"efghiJ KLMN\". EXAMPLE 2 substr( AbCDefghiJ KLMN , 2, 4) This outputs the substring based on the given begin.index and length. In this scenario, the output is \"CDef\". EXAMPLE 3 substr( WSO2D efghiJ KLMN , '^WSO2(.*)') This outputs the substring by applying the regex. In this scenario, the output is \"WSO2D efghiJ KLMN\". EXAMPLE 4 substr( WSO2 cep WSO2 XX E hi hA WSO2 heAllo , 'WSO2(.*)A(.*)', 2) This outputs the substring by applying the regex and considering the group.number . In this scenario, the output is \" ello\". trim (Function) Returns a copy of the input string without the leading and trailing whitespace (if any). Syntax STRING str:trim( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that needs to be trimmed. STRING No No Examples EXAMPLE 1 trim( AbCDefghiJ KLMN ) This returns a copy of the input.string with the leading and/or trailing white-spaces omitted. In this scenario, the output is \"AbCDefghiJ KLMN\". unhex (Function) Returns a string by converting the hexadecimal characters in the input string. Syntax STRING str:unhex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The hexadecimal input string that needs to be converted to string. STRING No No Examples EXAMPLE 1 unhex( 4d7953514c ) This converts the hexadecimal value to string upper (Function) Converts the simple letters in the input string to the equivalent capital/block letters. Syntax STRING str:upper( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be converted to the upper case (equivalent capital/block letters). STRING No No Examples EXAMPLE 1 upper( Hello World ) This converts the simple letters in the input.string to theequivalent capital letters. In this scenario, the output is \"HELLO WORLD\". tokenize (Stream Processor) Splits the input string to tokens using the given regular expression and returns the resultant tokens. Syntax str:tokenize( STRING input.string, STRING regex, BOOL distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input text which should be split. STRING No No regex The string value to be used to tokenize the 'input.string'. STRING No No distinct Flag to return only distinct values false BOOL Yes No Extra Return Attributes Name Description Possible Types token Attribute which contains a single token. STRING Examples EXAMPLE 1 define stream inputStream (str string); @info(name = 'query1') from inputStream#str:tokenize(str , ',') select text insert into outputStream; This query performs tokenization for the given string. If the str is \"Android,Windows8,iOS\", then 3 events containing token attribute value, Android , Windows8 , iOS in order.","title":"4.0.19"},{"location":"api/4.0.19/#api-docs-v4019","text":"","title":"API Docs - v4.0.19"},{"location":"api/4.0.19/#str","text":"","title":"Str"},{"location":"api/4.0.19/#groupconcat-aggregate-function","text":"Aggregates the received events by concatenating the keys of those events using a given separator, e.g., comma (,) and hyphen (-), and returns the concatenated key string. Syntax STRING str:groupConcat( STRING key, STRING separator, STRING distinct, STRING order) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key The string that need to be aggregated. STRING No No separator The separator that separates each string key getting aggregated. , STRING Yes No distinct To only have distinct string keys in the the aggregation. false STRING Yes No order Accepts 'ASC' or 'DESC' strings to sort the string keys by ascending or descending order. No order STRING Yes No Examples EXAMPLE 1 from InputStream#window.time(5 min) select str:groupConcat( key ) as groupedKeys input OutputStream; This returns a string that is the result of the concatenated keys separated by the given separator. When we send events having values for the key 'A' , 'B' , 'S' , 'C' , 'A' it will return \"A,B,S,C,A\" as the output EXAMPLE 2 from InputStream#window.time(5 min) select groupConcat( key , - ,true, ASC ) as groupedKeys input OutputStream; This returns a string that is the result of the concatenated keys separated by the given separator. When we send events having values for the key 'A' , 'B' , 'S' , 'C' , 'A' it will return \"A-B-C-S\" as the output","title":"groupConcat (Aggregate Function)"},{"location":"api/4.0.19/#charat-function","text":"Returns the char value that exists at the given index position of the input string. Syntax STRING str:charAt( STRING input.value, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.value The input string that used to find the character. STRING No No index The variable that specifies the index. INT No No Examples EXAMPLE 1 charAt( WSO2 , 1) This will output the character that exists at index 1. In this case, it will output 'S'.","title":"charAt (Function)"},{"location":"api/4.0.19/#coalesce-function","text":"Returns the first input parameter value that is not null of the given argument. Syntax INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT str:coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have one or more input parameters in any data type. All the specified parameters should be of the same type. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No No Examples EXAMPLE 1 coalesce(null, BBB , CCC ) This returns the first input parameter that is not null. In this example, it returns \"BBB\"","title":"coalesce (Function)"},{"location":"api/4.0.19/#concat-function","text":"Returns a string that is the result of concatenating two or more input string values. Syntax STRING str:concat( STRING argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have two or more string type input parameters. STRING No No Examples EXAMPLE 1 concat( D533 , 8JU^ , XYZ ) This returns a string value by concatenating the given arguments. In this case, it will return \"D5338JU^XYZ\" as the output","title":"concat (Function)"},{"location":"api/4.0.19/#contains-function","text":"Returns true if the input.string contains the specified sequence of char values in the search.string . Syntax BOOL str:contains( STRING input.string, STRING search.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string Input string value. STRING No No search.string The string value to be searched for in the input.string . STRING No No Examples EXAMPLE 1 contains( 21 products are produced by WSO2 currently , WSO2 ) This returns a boolean value as the output. In this case, it returns true .","title":"contains (Function)"},{"location":"api/4.0.19/#equalsignorecase-function","text":"Returns a boolean value by comparing two strings lexicographically without considering the letter case. Syntax BOOL str:equalsIgnoreCase( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument. This is compared with the first argument. STRING No No Examples EXAMPLE 1 equalsIgnoreCase( WSO2 , wso2 ) This returns a boolean value as the output. In this scenario, it returns \"true\".","title":"equalsIgnoreCase (Function)"},{"location":"api/4.0.19/#filltemplate-function","text":"Replaces the templated positions that are marked with an index value in a given template with the provided strings. Syntax STRING str:fillTemplate( STRING template, STRING|INT|LONG|DOUBLE|FLOAT|BOOL replacement.strings) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic template The string with templated fields that needs to be filled with the given strings. Templated fields should be in following the format {{INDEX}} where INDEX is an integer. This index is used to map the strings which are used to replace the templated fields. STRING No No replacement.strings Strings to replace the templated positions in the template. There can be any number of arguments from the 2nd argument. STRING INT LONG DOUBLE FLOAT BOOL No No Examples EXAMPLE 1 str:fillTemplate( This is {{1}} for the {{2}} function , 'an example', 'fillTemplate') In this example, the template is 'This is {{1}} for the {{2}} function'.Here the templated string {{1}} will be replaced with the 1st string value provided ('an example'). {{2}} will be replaced with the 2nd string provided ('fillTemplate') The return string will be 'This is an example for the fillTemplate function'.","title":"fillTemplate (Function)"},{"location":"api/4.0.19/#hex-function","text":"Returns a hexadecimal string by converting each byte of each character in the input string to two hexadecimal digits. Syntax STRING str:hex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the hexadecimal value. STRING No No Examples EXAMPLE 1 hex( MySQL ) This returns the hexadecimal value of the input.string. In this scenario, the output is \"4d7953514c\".","title":"hex (Function)"},{"location":"api/4.0.19/#length-function","text":"Returns the length of the input string. Syntax INT str:length( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the length. STRING No No Examples EXAMPLE 1 length( Hello World ) This outputs the length of the provided string. In this scenario, the, output is 11 .","title":"length (Function)"},{"location":"api/4.0.19/#lower-function","text":"Converts the capital letters in the input string to the equivalent simple letters. Syntax STRING str:lower( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to convert to the lower case (i.e., equivalent simple letters). STRING No No Examples EXAMPLE 1 lower( WSO2 cep ) This converts the capital letters in the input.string to the equivalent simple letters. In this scenario, the output is \"wso2 cep \".","title":"lower (Function)"},{"location":"api/4.0.19/#regexp-function","text":"Returns a boolean value based on the matchability of the input string and the given regular expression. Syntax BOOL str:regexp( STRING input.string, STRING regex) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to match with the given regular expression. STRING No No regex The regular expression to be matched with the input string. STRING No No Examples EXAMPLE 1 regexp( WSO2 abcdh , WSO(.*h) ) This returns a boolean value after matching regular expression with the given string. In this scenario, it returns \"true\" as the output.","title":"regexp (Function)"},{"location":"api/4.0.19/#repeat-function","text":"Repeats the input string for a specified number of times. Syntax STRING str:repeat( STRING input.string, INT times) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that is repeated the number of times as defined by the user. STRING No No times The number of times the input.string needs to be repeated . INT No No Examples EXAMPLE 1 repeat( StRing 1 , 3) This returns a string value by repeating the string for a specified number of times. In this scenario, the output is \"StRing 1StRing 1StRing 1\".","title":"repeat (Function)"},{"location":"api/4.0.19/#replaceall-function","text":"Finds all the substrings of the input string that matches with the given expression, and replaces them with the given replacement string. Syntax STRING str:replaceAll( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No regex The regular expression to be matched with the input string. STRING No No replacement.string The striing with which each substring that matches the given expression should be replaced. STRING No No Examples EXAMPLE 1 replaceAll( hello hi hello , 'hello', 'test') This returns a string after replacing the substrings of the input string with the replacement string. In this scenario, the output is \"test hi test\" .","title":"replaceAll (Function)"},{"location":"api/4.0.19/#replacefirst-function","text":"Finds the first substring of the input string that matches with the given regular expression, and replaces itwith the given replacement string. Syntax STRING str:replaceFirst( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be replaced. STRING No No regex The regular expression with which the input string should be matched. STRING No No replacement.string The string with which the first substring of input string that matches the regular expression should be replaced. STRING No No Examples EXAMPLE 1 replaceFirst( hello WSO2 A hello , 'WSO2(.*)A', 'XXXX') This returns a string after replacing the first substring with the given replacement string. In this scenario, the output is \"hello XXXX hello\".","title":"replaceFirst (Function)"},{"location":"api/4.0.19/#reverse-function","text":"Returns the input string in the reverse order character-wise and string-wise. Syntax STRING str:reverse( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be reversed. STRING No No Examples EXAMPLE 1 reverse( Hello World ) This outputs a string value by reversing the incoming input.string . In this scenario, the output is \"dlroW olleH\".","title":"reverse (Function)"},{"location":"api/4.0.19/#split-function","text":"Splits the input.string into substrings using the value parsed in the split.string and returns the substring at the position specified in the group.number . Syntax STRING str:split( STRING input.string, STRING split.string, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No split.string The string value to be used to split the input.string . STRING No No group.number The index of the split group INT No No Examples EXAMPLE 1 split( WSO2,ABM,NSFT , , , 0) This splits the given input.string by given split.string and returns the string in the index given by group.number. In this scenario, the output will is \"WSO2\".","title":"split (Function)"},{"location":"api/4.0.19/#strcmp-function","text":"Compares two strings lexicographically and returns an integer value. If both strings are equal, 0 is returned. If the first string is lexicographically greater than the second string, a positive value is returned. If the first string is lexicographically greater than the second string, a negative value is returned. Syntax INT str:strcmp( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument that should be compared with the first argument lexicographically. STRING No No Examples EXAMPLE 1 strcmp( AbCDefghiJ KLMN , 'Hello') This compares two strings lexicographically and outputs an integer value","title":"strcmp (Function)"},{"location":"api/4.0.19/#substr-function","text":"Returns a substring of the input string by considering a subset or all of the following factors: starting index, length, regular expression, and regex group number. Syntax STRING str:substr( STRING input.string, INT begin.index, INT length, STRING regex, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be processed. STRING No No begin.index Starting index to consider for the substring. INT No No length The length of the substring. INT No No regex The regular expression that should be matched with the input string.. STRING No No group.number The regex group number INT No No Examples EXAMPLE 1 substr( AbCDefghiJ KLMN , 4) This outputs the substring based on the given begin.index . In this scenario, the output is \"efghiJ KLMN\". EXAMPLE 2 substr( AbCDefghiJ KLMN , 2, 4) This outputs the substring based on the given begin.index and length. In this scenario, the output is \"CDef\". EXAMPLE 3 substr( WSO2D efghiJ KLMN , '^WSO2(.*)') This outputs the substring by applying the regex. In this scenario, the output is \"WSO2D efghiJ KLMN\". EXAMPLE 4 substr( WSO2 cep WSO2 XX E hi hA WSO2 heAllo , 'WSO2(.*)A(.*)', 2) This outputs the substring by applying the regex and considering the group.number . In this scenario, the output is \" ello\".","title":"substr (Function)"},{"location":"api/4.0.19/#trim-function","text":"Returns a copy of the input string without the leading and trailing whitespace (if any). Syntax STRING str:trim( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that needs to be trimmed. STRING No No Examples EXAMPLE 1 trim( AbCDefghiJ KLMN ) This returns a copy of the input.string with the leading and/or trailing white-spaces omitted. In this scenario, the output is \"AbCDefghiJ KLMN\".","title":"trim (Function)"},{"location":"api/4.0.19/#unhex-function","text":"Returns a string by converting the hexadecimal characters in the input string. Syntax STRING str:unhex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The hexadecimal input string that needs to be converted to string. STRING No No Examples EXAMPLE 1 unhex( 4d7953514c ) This converts the hexadecimal value to string","title":"unhex (Function)"},{"location":"api/4.0.19/#upper-function","text":"Converts the simple letters in the input string to the equivalent capital/block letters. Syntax STRING str:upper( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be converted to the upper case (equivalent capital/block letters). STRING No No Examples EXAMPLE 1 upper( Hello World ) This converts the simple letters in the input.string to theequivalent capital letters. In this scenario, the output is \"HELLO WORLD\".","title":"upper (Function)"},{"location":"api/4.0.19/#tokenize-stream-processor","text":"Splits the input string to tokens using the given regular expression and returns the resultant tokens. Syntax str:tokenize( STRING input.string, STRING regex, BOOL distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input text which should be split. STRING No No regex The string value to be used to tokenize the 'input.string'. STRING No No distinct Flag to return only distinct values false BOOL Yes No Extra Return Attributes Name Description Possible Types token Attribute which contains a single token. STRING Examples EXAMPLE 1 define stream inputStream (str string); @info(name = 'query1') from inputStream#str:tokenize(str , ',') select text insert into outputStream; This query performs tokenization for the given string. If the str is \"Android,Windows8,iOS\", then 3 events containing token attribute value, Android , Windows8 , iOS in order.","title":"tokenize (Stream Processor)"},{"location":"api/4.0.20/","text":"API Docs - v4.0.20 Str groupConcat (Aggregate Function) Aggregates the received events by concatenating the keys of those events using a given separator, e.g., comma (,) and hyphen (-), and returns the concatenated key string. Syntax STRING str:groupConcat( STRING key, STRING separator, STRING distinct, STRING order) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key The string that need to be aggregated. STRING No No separator The separator that separates each string key getting aggregated. , STRING Yes No distinct To only have distinct string keys in the the aggregation. false STRING Yes No order Accepts 'ASC' or 'DESC' strings to sort the string keys by ascending or descending order. No order STRING Yes No Examples EXAMPLE 1 from InputStream#window.time(5 min) select str:groupConcat( key ) as groupedKeys input OutputStream; This returns a string that is the result of the concatenated keys separated by the given separator. When we send events having values for the key 'A' , 'B' , 'S' , 'C' , 'A' it will return \"A,B,S,C,A\" as the output EXAMPLE 2 from InputStream#window.time(5 min) select groupConcat( key , - ,true, ASC ) as groupedKeys input OutputStream; This returns a string that is the result of the concatenated keys separated by the given separator. When we send events having values for the key 'A' , 'B' , 'S' , 'C' , 'A' it will return \"A-B-C-S\" as the output charAt (Function) Returns the char value that exists at the given index position of the input string. Syntax STRING str:charAt( STRING input.value, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.value The input string that used to find the character. STRING No No index The variable that specifies the index. INT No No Examples EXAMPLE 1 charAt( WSO2 , 1) This will output the character that exists at index 1. In this case, it will output 'S'. coalesce (Function) Returns the first input parameter value that is not null of the given argument. Syntax INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT str:coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have one or more input parameters in any data type. All the specified parameters should be of the same type. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No No Examples EXAMPLE 1 coalesce(null, BBB , CCC ) This returns the first input parameter that is not null. In this example, it returns \"BBB\" concat (Function) Returns a string that is the result of concatenating two or more input string values. Syntax STRING str:concat( STRING argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have two or more string type input parameters. STRING No No Examples EXAMPLE 1 concat( D533 , 8JU^ , XYZ ) This returns a string value by concatenating the given arguments. In this case, it will return \"D5338JU^XYZ\" as the output contains (Function) Returns true if the input.string contains the specified sequence of char values in the search.string . Syntax BOOL str:contains( STRING input.string, STRING search.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string Input string value. STRING No No search.string The string value to be searched for in the input.string . STRING No No Examples EXAMPLE 1 contains( 21 products are produced by WSO2 currently , WSO2 ) This returns a boolean value as the output. In this case, it returns true . equalsIgnoreCase (Function) Returns a boolean value by comparing two strings lexicographically without considering the letter case. Syntax BOOL str:equalsIgnoreCase( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument. This is compared with the first argument. STRING No No Examples EXAMPLE 1 equalsIgnoreCase( WSO2 , wso2 ) This returns a boolean value as the output. In this scenario, it returns \"true\". fillTemplate (Function) Replaces the templated positions that are marked with an index value in a given template with the provided strings. Syntax STRING str:fillTemplate( STRING template, STRING|INT|LONG|DOUBLE|FLOAT|BOOL replacement.strings) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic template The string with templated fields that needs to be filled with the given strings. Templated fields should be in following the format {{INDEX}} where INDEX is an integer. This index is used to map the strings which are used to replace the templated fields. STRING No No replacement.strings Strings to replace the templated positions in the template. There can be any number of arguments from the 2nd argument. STRING INT LONG DOUBLE FLOAT BOOL No No Examples EXAMPLE 1 str:fillTemplate( This is {{1}} for the {{2}} function , 'an example', 'fillTemplate') In this example, the template is 'This is {{1}} for the {{2}} function'.Here the templated string {{1}} will be replaced with the 1st string value provided ('an example'). {{2}} will be replaced with the 2nd string provided ('fillTemplate') The return string will be 'This is an example for the fillTemplate function'. hex (Function) Returns a hexadecimal string by converting each byte of each character in the input string to two hexadecimal digits. Syntax STRING str:hex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the hexadecimal value. STRING No No Examples EXAMPLE 1 hex( MySQL ) This returns the hexadecimal value of the input.string. In this scenario, the output is \"4d7953514c\". length (Function) Returns the length of the input string. Syntax INT str:length( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the length. STRING No No Examples EXAMPLE 1 length( Hello World ) This outputs the length of the provided string. In this scenario, the, output is 11 . lower (Function) Converts the capital letters in the input string to the equivalent simple letters. Syntax STRING str:lower( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to convert to the lower case (i.e., equivalent simple letters). STRING No No Examples EXAMPLE 1 lower( WSO2 cep ) This converts the capital letters in the input.string to the equivalent simple letters. In this scenario, the output is \"wso2 cep \". regexp (Function) Returns a boolean value based on the matchability of the input string and the given regular expression. Syntax BOOL str:regexp( STRING input.string, STRING regex) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to match with the given regular expression. STRING No No regex The regular expression to be matched with the input string. STRING No No Examples EXAMPLE 1 regexp( WSO2 abcdh , WSO(.*h) ) This returns a boolean value after matching regular expression with the given string. In this scenario, it returns \"true\" as the output. repeat (Function) Repeats the input string for a specified number of times. Syntax STRING str:repeat( STRING input.string, INT times) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that is repeated the number of times as defined by the user. STRING No No times The number of times the input.string needs to be repeated . INT No No Examples EXAMPLE 1 repeat( StRing 1 , 3) This returns a string value by repeating the string for a specified number of times. In this scenario, the output is \"StRing 1StRing 1StRing 1\". replaceAll (Function) Finds all the substrings of the input string that matches with the given expression, and replaces them with the given replacement string. Syntax STRING str:replaceAll( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No regex The regular expression to be matched with the input string. STRING No No replacement.string The striing with which each substring that matches the given expression should be replaced. STRING No No Examples EXAMPLE 1 replaceAll( hello hi hello , 'hello', 'test') This returns a string after replacing the substrings of the input string with the replacement string. In this scenario, the output is \"test hi test\" . replaceFirst (Function) Finds the first substring of the input string that matches with the given regular expression, and replaces itwith the given replacement string. Syntax STRING str:replaceFirst( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be replaced. STRING No No regex The regular expression with which the input string should be matched. STRING No No replacement.string The string with which the first substring of input string that matches the regular expression should be replaced. STRING No No Examples EXAMPLE 1 replaceFirst( hello WSO2 A hello , 'WSO2(.*)A', 'XXXX') This returns a string after replacing the first substring with the given replacement string. In this scenario, the output is \"hello XXXX hello\". reverse (Function) Returns the input string in the reverse order character-wise and string-wise. Syntax STRING str:reverse( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be reversed. STRING No No Examples EXAMPLE 1 reverse( Hello World ) This outputs a string value by reversing the incoming input.string . In this scenario, the output is \"dlroW olleH\". split (Function) Splits the input.string into substrings using the value parsed in the split.string and returns the substring at the position specified in the group.number . Syntax STRING str:split( STRING input.string, STRING split.string, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No split.string The string value to be used to split the input.string . STRING No No group.number The index of the split group INT No No Examples EXAMPLE 1 split( WSO2,ABM,NSFT , , , 0) This splits the given input.string by given split.string and returns the string in the index given by group.number. In this scenario, the output will is \"WSO2\". strcmp (Function) Compares two strings lexicographically and returns an integer value. If both strings are equal, 0 is returned. If the first string is lexicographically greater than the second string, a positive value is returned. If the first string is lexicographically greater than the second string, a negative value is returned. Syntax INT str:strcmp( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument that should be compared with the first argument lexicographically. STRING No No Examples EXAMPLE 1 strcmp( AbCDefghiJ KLMN , 'Hello') This compares two strings lexicographically and outputs an integer value substr (Function) Returns a substring of the input string by considering a subset or all of the following factors: starting index, length, regular expression, and regex group number. Syntax STRING str:substr( STRING input.string, INT begin.index, INT length, STRING regex, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be processed. STRING No No begin.index Starting index to consider for the substring. INT No No length The length of the substring. INT No No regex The regular expression that should be matched with the input string.. STRING No No group.number The regex group number INT No No Examples EXAMPLE 1 substr( AbCDefghiJ KLMN , 4) This outputs the substring based on the given begin.index . In this scenario, the output is \"efghiJ KLMN\". EXAMPLE 2 substr( AbCDefghiJ KLMN , 2, 4) This outputs the substring based on the given begin.index and length. In this scenario, the output is \"CDef\". EXAMPLE 3 substr( WSO2D efghiJ KLMN , '^WSO2(.*)') This outputs the substring by applying the regex. In this scenario, the output is \"WSO2D efghiJ KLMN\". EXAMPLE 4 substr( WSO2 cep WSO2 XX E hi hA WSO2 heAllo , 'WSO2(.*)A(.*)', 2) This outputs the substring by applying the regex and considering the group.number . In this scenario, the output is \" ello\". trim (Function) Returns a copy of the input string without the leading and trailing whitespace (if any). Syntax STRING str:trim( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that needs to be trimmed. STRING No No Examples EXAMPLE 1 trim( AbCDefghiJ KLMN ) This returns a copy of the input.string with the leading and/or trailing white-spaces omitted. In this scenario, the output is \"AbCDefghiJ KLMN\". unhex (Function) Returns a string by converting the hexadecimal characters in the input string. Syntax STRING str:unhex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The hexadecimal input string that needs to be converted to string. STRING No No Examples EXAMPLE 1 unhex( 4d7953514c ) This converts the hexadecimal value to string upper (Function) Converts the simple letters in the input string to the equivalent capital/block letters. Syntax STRING str:upper( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be converted to the upper case (equivalent capital/block letters). STRING No No Examples EXAMPLE 1 upper( Hello World ) This converts the simple letters in the input.string to theequivalent capital letters. In this scenario, the output is \"HELLO WORLD\". tokenize (Stream Processor) Splits the input string to tokens using the given regular expression and returns the resultant tokens. Syntax str:tokenize( STRING input.string, STRING regex, BOOL distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input text which should be split. STRING No No regex The string value to be used to tokenize the 'input.string'. STRING No No distinct Flag to return only distinct values false BOOL Yes No Extra Return Attributes Name Description Possible Types token Attribute which contains a single token. STRING Examples EXAMPLE 1 define stream inputStream (str string); @info(name = 'query1') from inputStream#str:tokenize(str , ',') select text insert into outputStream; This query performs tokenization for the given string. If the str is \"Android,Windows8,iOS\", then 3 events containing token attribute value, Android , Windows8 , iOS in order.","title":"4.0.20"},{"location":"api/4.0.20/#api-docs-v4020","text":"","title":"API Docs - v4.0.20"},{"location":"api/4.0.20/#str","text":"","title":"Str"},{"location":"api/4.0.20/#groupconcat-aggregate-function","text":"Aggregates the received events by concatenating the keys of those events using a given separator, e.g., comma (,) and hyphen (-), and returns the concatenated key string. Syntax STRING str:groupConcat( STRING key, STRING separator, STRING distinct, STRING order) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key The string that need to be aggregated. STRING No No separator The separator that separates each string key getting aggregated. , STRING Yes No distinct To only have distinct string keys in the the aggregation. false STRING Yes No order Accepts 'ASC' or 'DESC' strings to sort the string keys by ascending or descending order. No order STRING Yes No Examples EXAMPLE 1 from InputStream#window.time(5 min) select str:groupConcat( key ) as groupedKeys input OutputStream; This returns a string that is the result of the concatenated keys separated by the given separator. When we send events having values for the key 'A' , 'B' , 'S' , 'C' , 'A' it will return \"A,B,S,C,A\" as the output EXAMPLE 2 from InputStream#window.time(5 min) select groupConcat( key , - ,true, ASC ) as groupedKeys input OutputStream; This returns a string that is the result of the concatenated keys separated by the given separator. When we send events having values for the key 'A' , 'B' , 'S' , 'C' , 'A' it will return \"A-B-C-S\" as the output","title":"groupConcat (Aggregate Function)"},{"location":"api/4.0.20/#charat-function","text":"Returns the char value that exists at the given index position of the input string. Syntax STRING str:charAt( STRING input.value, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.value The input string that used to find the character. STRING No No index The variable that specifies the index. INT No No Examples EXAMPLE 1 charAt( WSO2 , 1) This will output the character that exists at index 1. In this case, it will output 'S'.","title":"charAt (Function)"},{"location":"api/4.0.20/#coalesce-function","text":"Returns the first input parameter value that is not null of the given argument. Syntax INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT str:coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have one or more input parameters in any data type. All the specified parameters should be of the same type. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No No Examples EXAMPLE 1 coalesce(null, BBB , CCC ) This returns the first input parameter that is not null. In this example, it returns \"BBB\"","title":"coalesce (Function)"},{"location":"api/4.0.20/#concat-function","text":"Returns a string that is the result of concatenating two or more input string values. Syntax STRING str:concat( STRING argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have two or more string type input parameters. STRING No No Examples EXAMPLE 1 concat( D533 , 8JU^ , XYZ ) This returns a string value by concatenating the given arguments. In this case, it will return \"D5338JU^XYZ\" as the output","title":"concat (Function)"},{"location":"api/4.0.20/#contains-function","text":"Returns true if the input.string contains the specified sequence of char values in the search.string . Syntax BOOL str:contains( STRING input.string, STRING search.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string Input string value. STRING No No search.string The string value to be searched for in the input.string . STRING No No Examples EXAMPLE 1 contains( 21 products are produced by WSO2 currently , WSO2 ) This returns a boolean value as the output. In this case, it returns true .","title":"contains (Function)"},{"location":"api/4.0.20/#equalsignorecase-function","text":"Returns a boolean value by comparing two strings lexicographically without considering the letter case. Syntax BOOL str:equalsIgnoreCase( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument. This is compared with the first argument. STRING No No Examples EXAMPLE 1 equalsIgnoreCase( WSO2 , wso2 ) This returns a boolean value as the output. In this scenario, it returns \"true\".","title":"equalsIgnoreCase (Function)"},{"location":"api/4.0.20/#filltemplate-function","text":"Replaces the templated positions that are marked with an index value in a given template with the provided strings. Syntax STRING str:fillTemplate( STRING template, STRING|INT|LONG|DOUBLE|FLOAT|BOOL replacement.strings) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic template The string with templated fields that needs to be filled with the given strings. Templated fields should be in following the format {{INDEX}} where INDEX is an integer. This index is used to map the strings which are used to replace the templated fields. STRING No No replacement.strings Strings to replace the templated positions in the template. There can be any number of arguments from the 2nd argument. STRING INT LONG DOUBLE FLOAT BOOL No No Examples EXAMPLE 1 str:fillTemplate( This is {{1}} for the {{2}} function , 'an example', 'fillTemplate') In this example, the template is 'This is {{1}} for the {{2}} function'.Here the templated string {{1}} will be replaced with the 1st string value provided ('an example'). {{2}} will be replaced with the 2nd string provided ('fillTemplate') The return string will be 'This is an example for the fillTemplate function'.","title":"fillTemplate (Function)"},{"location":"api/4.0.20/#hex-function","text":"Returns a hexadecimal string by converting each byte of each character in the input string to two hexadecimal digits. Syntax STRING str:hex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the hexadecimal value. STRING No No Examples EXAMPLE 1 hex( MySQL ) This returns the hexadecimal value of the input.string. In this scenario, the output is \"4d7953514c\".","title":"hex (Function)"},{"location":"api/4.0.20/#length-function","text":"Returns the length of the input string. Syntax INT str:length( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the length. STRING No No Examples EXAMPLE 1 length( Hello World ) This outputs the length of the provided string. In this scenario, the, output is 11 .","title":"length (Function)"},{"location":"api/4.0.20/#lower-function","text":"Converts the capital letters in the input string to the equivalent simple letters. Syntax STRING str:lower( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to convert to the lower case (i.e., equivalent simple letters). STRING No No Examples EXAMPLE 1 lower( WSO2 cep ) This converts the capital letters in the input.string to the equivalent simple letters. In this scenario, the output is \"wso2 cep \".","title":"lower (Function)"},{"location":"api/4.0.20/#regexp-function","text":"Returns a boolean value based on the matchability of the input string and the given regular expression. Syntax BOOL str:regexp( STRING input.string, STRING regex) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to match with the given regular expression. STRING No No regex The regular expression to be matched with the input string. STRING No No Examples EXAMPLE 1 regexp( WSO2 abcdh , WSO(.*h) ) This returns a boolean value after matching regular expression with the given string. In this scenario, it returns \"true\" as the output.","title":"regexp (Function)"},{"location":"api/4.0.20/#repeat-function","text":"Repeats the input string for a specified number of times. Syntax STRING str:repeat( STRING input.string, INT times) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that is repeated the number of times as defined by the user. STRING No No times The number of times the input.string needs to be repeated . INT No No Examples EXAMPLE 1 repeat( StRing 1 , 3) This returns a string value by repeating the string for a specified number of times. In this scenario, the output is \"StRing 1StRing 1StRing 1\".","title":"repeat (Function)"},{"location":"api/4.0.20/#replaceall-function","text":"Finds all the substrings of the input string that matches with the given expression, and replaces them with the given replacement string. Syntax STRING str:replaceAll( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No regex The regular expression to be matched with the input string. STRING No No replacement.string The striing with which each substring that matches the given expression should be replaced. STRING No No Examples EXAMPLE 1 replaceAll( hello hi hello , 'hello', 'test') This returns a string after replacing the substrings of the input string with the replacement string. In this scenario, the output is \"test hi test\" .","title":"replaceAll (Function)"},{"location":"api/4.0.20/#replacefirst-function","text":"Finds the first substring of the input string that matches with the given regular expression, and replaces itwith the given replacement string. Syntax STRING str:replaceFirst( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be replaced. STRING No No regex The regular expression with which the input string should be matched. STRING No No replacement.string The string with which the first substring of input string that matches the regular expression should be replaced. STRING No No Examples EXAMPLE 1 replaceFirst( hello WSO2 A hello , 'WSO2(.*)A', 'XXXX') This returns a string after replacing the first substring with the given replacement string. In this scenario, the output is \"hello XXXX hello\".","title":"replaceFirst (Function)"},{"location":"api/4.0.20/#reverse-function","text":"Returns the input string in the reverse order character-wise and string-wise. Syntax STRING str:reverse( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be reversed. STRING No No Examples EXAMPLE 1 reverse( Hello World ) This outputs a string value by reversing the incoming input.string . In this scenario, the output is \"dlroW olleH\".","title":"reverse (Function)"},{"location":"api/4.0.20/#split-function","text":"Splits the input.string into substrings using the value parsed in the split.string and returns the substring at the position specified in the group.number . Syntax STRING str:split( STRING input.string, STRING split.string, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No split.string The string value to be used to split the input.string . STRING No No group.number The index of the split group INT No No Examples EXAMPLE 1 split( WSO2,ABM,NSFT , , , 0) This splits the given input.string by given split.string and returns the string in the index given by group.number. In this scenario, the output will is \"WSO2\".","title":"split (Function)"},{"location":"api/4.0.20/#strcmp-function","text":"Compares two strings lexicographically and returns an integer value. If both strings are equal, 0 is returned. If the first string is lexicographically greater than the second string, a positive value is returned. If the first string is lexicographically greater than the second string, a negative value is returned. Syntax INT str:strcmp( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument that should be compared with the first argument lexicographically. STRING No No Examples EXAMPLE 1 strcmp( AbCDefghiJ KLMN , 'Hello') This compares two strings lexicographically and outputs an integer value","title":"strcmp (Function)"},{"location":"api/4.0.20/#substr-function","text":"Returns a substring of the input string by considering a subset or all of the following factors: starting index, length, regular expression, and regex group number. Syntax STRING str:substr( STRING input.string, INT begin.index, INT length, STRING regex, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be processed. STRING No No begin.index Starting index to consider for the substring. INT No No length The length of the substring. INT No No regex The regular expression that should be matched with the input string.. STRING No No group.number The regex group number INT No No Examples EXAMPLE 1 substr( AbCDefghiJ KLMN , 4) This outputs the substring based on the given begin.index . In this scenario, the output is \"efghiJ KLMN\". EXAMPLE 2 substr( AbCDefghiJ KLMN , 2, 4) This outputs the substring based on the given begin.index and length. In this scenario, the output is \"CDef\". EXAMPLE 3 substr( WSO2D efghiJ KLMN , '^WSO2(.*)') This outputs the substring by applying the regex. In this scenario, the output is \"WSO2D efghiJ KLMN\". EXAMPLE 4 substr( WSO2 cep WSO2 XX E hi hA WSO2 heAllo , 'WSO2(.*)A(.*)', 2) This outputs the substring by applying the regex and considering the group.number . In this scenario, the output is \" ello\".","title":"substr (Function)"},{"location":"api/4.0.20/#trim-function","text":"Returns a copy of the input string without the leading and trailing whitespace (if any). Syntax STRING str:trim( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that needs to be trimmed. STRING No No Examples EXAMPLE 1 trim( AbCDefghiJ KLMN ) This returns a copy of the input.string with the leading and/or trailing white-spaces omitted. In this scenario, the output is \"AbCDefghiJ KLMN\".","title":"trim (Function)"},{"location":"api/4.0.20/#unhex-function","text":"Returns a string by converting the hexadecimal characters in the input string. Syntax STRING str:unhex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The hexadecimal input string that needs to be converted to string. STRING No No Examples EXAMPLE 1 unhex( 4d7953514c ) This converts the hexadecimal value to string","title":"unhex (Function)"},{"location":"api/4.0.20/#upper-function","text":"Converts the simple letters in the input string to the equivalent capital/block letters. Syntax STRING str:upper( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be converted to the upper case (equivalent capital/block letters). STRING No No Examples EXAMPLE 1 upper( Hello World ) This converts the simple letters in the input.string to theequivalent capital letters. In this scenario, the output is \"HELLO WORLD\".","title":"upper (Function)"},{"location":"api/4.0.20/#tokenize-stream-processor","text":"Splits the input string to tokens using the given regular expression and returns the resultant tokens. Syntax str:tokenize( STRING input.string, STRING regex, BOOL distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input text which should be split. STRING No No regex The string value to be used to tokenize the 'input.string'. STRING No No distinct Flag to return only distinct values false BOOL Yes No Extra Return Attributes Name Description Possible Types token Attribute which contains a single token. STRING Examples EXAMPLE 1 define stream inputStream (str string); @info(name = 'query1') from inputStream#str:tokenize(str , ',') select text insert into outputStream; This query performs tokenization for the given string. If the str is \"Android,Windows8,iOS\", then 3 events containing token attribute value, Android , Windows8 , iOS in order.","title":"tokenize (Stream Processor)"},{"location":"api/4.0.21/","text":"API Docs - v4.0.21 Str groupConcat (Aggregate Function) Aggregates the received events by concatenating the keys of those events using a given separator, e.g., comma (,) and hyphen (-), and returns the concatenated key string. Syntax STRING str:groupConcat( STRING key, STRING separator, STRING distinct, STRING order) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key The string that need to be aggregated. STRING No No separator The separator that separates each string key getting aggregated. , STRING Yes No distinct To only have distinct string keys in the the aggregation. false STRING Yes No order Accepts 'ASC' or 'DESC' strings to sort the string keys by ascending or descending order. No order STRING Yes No Examples EXAMPLE 1 from InputStream#window.time(5 min) select str:groupConcat( key ) as groupedKeys input OutputStream; This returns a string that is the result of the concatenated keys separated by the given separator. When we send events having values for the key 'A' , 'B' , 'S' , 'C' , 'A' it will return \"A,B,S,C,A\" as the output EXAMPLE 2 from InputStream#window.time(5 min) select groupConcat( key , - ,true, ASC ) as groupedKeys input OutputStream; This returns a string that is the result of the concatenated keys separated by the given separator. When we send events having values for the key 'A' , 'B' , 'S' , 'C' , 'A' it will return \"A-B-C-S\" as the output charAt (Function) Returns the char value that exists at the given index position of the input string. Syntax STRING str:charAt( STRING input.value, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.value The input string that used to find the character. STRING No No index The variable that specifies the index. INT No No Examples EXAMPLE 1 charAt( WSO2 , 1) This will output the character that exists at index 1. In this case, it will output 'S'. coalesce (Function) Returns the first input parameter value that is not null of the given argument. Syntax INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT str:coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have one or more input parameters in any data type. All the specified parameters should be of the same type. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No No Examples EXAMPLE 1 coalesce(null, BBB , CCC ) This returns the first input parameter that is not null. In this example, it returns \"BBB\" concat (Function) Returns a string that is the result of concatenating two or more input string values. Syntax STRING str:concat( STRING argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have two or more string type input parameters. STRING No No Examples EXAMPLE 1 concat( D533 , 8JU^ , XYZ ) This returns a string value by concatenating the given arguments. In this case, it will return \"D5338JU^XYZ\" as the output contains (Function) Returns true if the input.string contains the specified sequence of char values in the search.string . Syntax BOOL str:contains( STRING input.string, STRING search.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string Input string value. STRING No No search.string The string value to be searched for in the input.string . STRING No No Examples EXAMPLE 1 contains( 21 products are produced by WSO2 currently , WSO2 ) This returns a boolean value as the output. In this case, it returns true . equalsIgnoreCase (Function) Returns a boolean value by comparing two strings lexicographically without considering the letter case. Syntax BOOL str:equalsIgnoreCase( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument. This is compared with the first argument. STRING No No Examples EXAMPLE 1 equalsIgnoreCase( WSO2 , wso2 ) This returns a boolean value as the output. In this scenario, it returns \"true\". fillTemplate (Function) This extension replaces the templated positions that are marked with an index value in a specified template with the strings provided. Syntax STRING str:fillTemplate( STRING template, STRING|INT|LONG|DOUBLE|FLOAT|BOOL replacement.strings) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic template The string with templated fields that needs to be filled with the given strings. The format of the templated fields should be as follows: {{INDEX}} where 'INDEX' is an integer. This index is used to map the strings that are used to replace the templated fields. STRING No No replacement.strings The strings with which the templated positions in the template need to be replaced. The minimum of two arguments need to be included in the execution string. There is no upper limit on the number of arguments allowed to be included. STRING INT LONG DOUBLE FLOAT BOOL No No Examples EXAMPLE 1 str:fillTemplate( This is {{1}} for the {{2}} function , 'an example', 'fillTemplate') In this example, the template is 'This is {{1}} for the {{2}} function'.Here, the templated string {{1}} is replaced with the 1st string value provided, which is 'an example'. {{2}} is replaced with the 2nd string provided, which is 'fillTemplate' The complete return string is 'This is an example for the fillTemplate function'. hex (Function) Returns a hexadecimal string by converting each byte of each character in the input string to two hexadecimal digits. Syntax STRING str:hex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the hexadecimal value. STRING No No Examples EXAMPLE 1 hex( MySQL ) This returns the hexadecimal value of the input.string. In this scenario, the output is \"4d7953514c\". length (Function) Returns the length of the input string. Syntax INT str:length( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the length. STRING No No Examples EXAMPLE 1 length( Hello World ) This outputs the length of the provided string. In this scenario, the, output is 11 . lower (Function) Converts the capital letters in the input string to the equivalent simple letters. Syntax STRING str:lower( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to convert to the lower case (i.e., equivalent simple letters). STRING No No Examples EXAMPLE 1 lower( WSO2 cep ) This converts the capital letters in the input.string to the equivalent simple letters. In this scenario, the output is \"wso2 cep \". regexp (Function) Returns a boolean value based on the matchability of the input string and the given regular expression. Syntax BOOL str:regexp( STRING input.string, STRING regex) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to match with the given regular expression. STRING No No regex The regular expression to be matched with the input string. STRING No No Examples EXAMPLE 1 regexp( WSO2 abcdh , WSO(.*h) ) This returns a boolean value after matching regular expression with the given string. In this scenario, it returns \"true\" as the output. repeat (Function) Repeats the input string for a specified number of times. Syntax STRING str:repeat( STRING input.string, INT times) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that is repeated the number of times as defined by the user. STRING No No times The number of times the input.string needs to be repeated . INT No No Examples EXAMPLE 1 repeat( StRing 1 , 3) This returns a string value by repeating the string for a specified number of times. In this scenario, the output is \"StRing 1StRing 1StRing 1\". replaceAll (Function) Finds all the substrings of the input string that matches with the given expression, and replaces them with the given replacement string. Syntax STRING str:replaceAll( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No regex The regular expression to be matched with the input string. STRING No No replacement.string The striing with which each substring that matches the given expression should be replaced. STRING No No Examples EXAMPLE 1 replaceAll( hello hi hello , 'hello', 'test') This returns a string after replacing the substrings of the input string with the replacement string. In this scenario, the output is \"test hi test\" . replaceFirst (Function) Finds the first substring of the input string that matches with the given regular expression, and replaces itwith the given replacement string. Syntax STRING str:replaceFirst( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be replaced. STRING No No regex The regular expression with which the input string should be matched. STRING No No replacement.string The string with which the first substring of input string that matches the regular expression should be replaced. STRING No No Examples EXAMPLE 1 replaceFirst( hello WSO2 A hello , 'WSO2(.*)A', 'XXXX') This returns a string after replacing the first substring with the given replacement string. In this scenario, the output is \"hello XXXX hello\". reverse (Function) Returns the input string in the reverse order character-wise and string-wise. Syntax STRING str:reverse( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be reversed. STRING No No Examples EXAMPLE 1 reverse( Hello World ) This outputs a string value by reversing the incoming input.string . In this scenario, the output is \"dlroW olleH\". split (Function) Splits the input.string into substrings using the value parsed in the split.string and returns the substring at the position specified in the group.number . Syntax STRING str:split( STRING input.string, STRING split.string, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No split.string The string value to be used to split the input.string . STRING No No group.number The index of the split group INT No No Examples EXAMPLE 1 split( WSO2,ABM,NSFT , , , 0) This splits the given input.string by given split.string and returns the string in the index given by group.number. In this scenario, the output will is \"WSO2\". strcmp (Function) Compares two strings lexicographically and returns an integer value. If both strings are equal, 0 is returned. If the first string is lexicographically greater than the second string, a positive value is returned. If the first string is lexicographically greater than the second string, a negative value is returned. Syntax INT str:strcmp( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument that should be compared with the first argument lexicographically. STRING No No Examples EXAMPLE 1 strcmp( AbCDefghiJ KLMN , 'Hello') This compares two strings lexicographically and outputs an integer value substr (Function) Returns a substring of the input string by considering a subset or all of the following factors: starting index, length, regular expression, and regex group number. Syntax STRING str:substr( STRING input.string, INT begin.index, INT length, STRING regex, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be processed. STRING No No begin.index Starting index to consider for the substring. INT No No length The length of the substring. INT No No regex The regular expression that should be matched with the input string.. STRING No No group.number The regex group number INT No No Examples EXAMPLE 1 substr( AbCDefghiJ KLMN , 4) This outputs the substring based on the given begin.index . In this scenario, the output is \"efghiJ KLMN\". EXAMPLE 2 substr( AbCDefghiJ KLMN , 2, 4) This outputs the substring based on the given begin.index and length. In this scenario, the output is \"CDef\". EXAMPLE 3 substr( WSO2D efghiJ KLMN , '^WSO2(.*)') This outputs the substring by applying the regex. In this scenario, the output is \"WSO2D efghiJ KLMN\". EXAMPLE 4 substr( WSO2 cep WSO2 XX E hi hA WSO2 heAllo , 'WSO2(.*)A(.*)', 2) This outputs the substring by applying the regex and considering the group.number . In this scenario, the output is \" ello\". trim (Function) Returns a copy of the input string without the leading and trailing whitespace (if any). Syntax STRING str:trim( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that needs to be trimmed. STRING No No Examples EXAMPLE 1 trim( AbCDefghiJ KLMN ) This returns a copy of the input.string with the leading and/or trailing white-spaces omitted. In this scenario, the output is \"AbCDefghiJ KLMN\". unhex (Function) Returns a string by converting the hexadecimal characters in the input string. Syntax STRING str:unhex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The hexadecimal input string that needs to be converted to string. STRING No No Examples EXAMPLE 1 unhex( 4d7953514c ) This converts the hexadecimal value to string upper (Function) Converts the simple letters in the input string to the equivalent capital/block letters. Syntax STRING str:upper( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be converted to the upper case (equivalent capital/block letters). STRING No No Examples EXAMPLE 1 upper( Hello World ) This converts the simple letters in the input.string to theequivalent capital letters. In this scenario, the output is \"HELLO WORLD\". tokenize (Stream Processor) Splits the input string to tokens using the given regular expression and returns the resultant tokens. Syntax str:tokenize( STRING input.string, STRING regex, BOOL distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input text which should be split. STRING No No regex The string value to be used to tokenize the 'input.string'. STRING No No distinct Flag to return only distinct values false BOOL Yes No Extra Return Attributes Name Description Possible Types token Attribute which contains a single token. STRING Examples EXAMPLE 1 define stream inputStream (str string); @info(name = 'query1') from inputStream#str:tokenize(str , ',') select text insert into outputStream; This query performs tokenization for the given string. If the str is \"Android,Windows8,iOS\", then 3 events containing token attribute value, Android , Windows8 , iOS in order.","title":"4.0.21"},{"location":"api/4.0.21/#api-docs-v4021","text":"","title":"API Docs - v4.0.21"},{"location":"api/4.0.21/#str","text":"","title":"Str"},{"location":"api/4.0.21/#groupconcat-aggregate-function","text":"Aggregates the received events by concatenating the keys of those events using a given separator, e.g., comma (,) and hyphen (-), and returns the concatenated key string. Syntax STRING str:groupConcat( STRING key, STRING separator, STRING distinct, STRING order) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key The string that need to be aggregated. STRING No No separator The separator that separates each string key getting aggregated. , STRING Yes No distinct To only have distinct string keys in the the aggregation. false STRING Yes No order Accepts 'ASC' or 'DESC' strings to sort the string keys by ascending or descending order. No order STRING Yes No Examples EXAMPLE 1 from InputStream#window.time(5 min) select str:groupConcat( key ) as groupedKeys input OutputStream; This returns a string that is the result of the concatenated keys separated by the given separator. When we send events having values for the key 'A' , 'B' , 'S' , 'C' , 'A' it will return \"A,B,S,C,A\" as the output EXAMPLE 2 from InputStream#window.time(5 min) select groupConcat( key , - ,true, ASC ) as groupedKeys input OutputStream; This returns a string that is the result of the concatenated keys separated by the given separator. When we send events having values for the key 'A' , 'B' , 'S' , 'C' , 'A' it will return \"A-B-C-S\" as the output","title":"groupConcat (Aggregate Function)"},{"location":"api/4.0.21/#charat-function","text":"Returns the char value that exists at the given index position of the input string. Syntax STRING str:charAt( STRING input.value, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.value The input string that used to find the character. STRING No No index The variable that specifies the index. INT No No Examples EXAMPLE 1 charAt( WSO2 , 1) This will output the character that exists at index 1. In this case, it will output 'S'.","title":"charAt (Function)"},{"location":"api/4.0.21/#coalesce-function","text":"Returns the first input parameter value that is not null of the given argument. Syntax INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT str:coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have one or more input parameters in any data type. All the specified parameters should be of the same type. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No No Examples EXAMPLE 1 coalesce(null, BBB , CCC ) This returns the first input parameter that is not null. In this example, it returns \"BBB\"","title":"coalesce (Function)"},{"location":"api/4.0.21/#concat-function","text":"Returns a string that is the result of concatenating two or more input string values. Syntax STRING str:concat( STRING argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have two or more string type input parameters. STRING No No Examples EXAMPLE 1 concat( D533 , 8JU^ , XYZ ) This returns a string value by concatenating the given arguments. In this case, it will return \"D5338JU^XYZ\" as the output","title":"concat (Function)"},{"location":"api/4.0.21/#contains-function","text":"Returns true if the input.string contains the specified sequence of char values in the search.string . Syntax BOOL str:contains( STRING input.string, STRING search.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string Input string value. STRING No No search.string The string value to be searched for in the input.string . STRING No No Examples EXAMPLE 1 contains( 21 products are produced by WSO2 currently , WSO2 ) This returns a boolean value as the output. In this case, it returns true .","title":"contains (Function)"},{"location":"api/4.0.21/#equalsignorecase-function","text":"Returns a boolean value by comparing two strings lexicographically without considering the letter case. Syntax BOOL str:equalsIgnoreCase( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument. This is compared with the first argument. STRING No No Examples EXAMPLE 1 equalsIgnoreCase( WSO2 , wso2 ) This returns a boolean value as the output. In this scenario, it returns \"true\".","title":"equalsIgnoreCase (Function)"},{"location":"api/4.0.21/#filltemplate-function","text":"This extension replaces the templated positions that are marked with an index value in a specified template with the strings provided. Syntax STRING str:fillTemplate( STRING template, STRING|INT|LONG|DOUBLE|FLOAT|BOOL replacement.strings) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic template The string with templated fields that needs to be filled with the given strings. The format of the templated fields should be as follows: {{INDEX}} where 'INDEX' is an integer. This index is used to map the strings that are used to replace the templated fields. STRING No No replacement.strings The strings with which the templated positions in the template need to be replaced. The minimum of two arguments need to be included in the execution string. There is no upper limit on the number of arguments allowed to be included. STRING INT LONG DOUBLE FLOAT BOOL No No Examples EXAMPLE 1 str:fillTemplate( This is {{1}} for the {{2}} function , 'an example', 'fillTemplate') In this example, the template is 'This is {{1}} for the {{2}} function'.Here, the templated string {{1}} is replaced with the 1st string value provided, which is 'an example'. {{2}} is replaced with the 2nd string provided, which is 'fillTemplate' The complete return string is 'This is an example for the fillTemplate function'.","title":"fillTemplate (Function)"},{"location":"api/4.0.21/#hex-function","text":"Returns a hexadecimal string by converting each byte of each character in the input string to two hexadecimal digits. Syntax STRING str:hex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the hexadecimal value. STRING No No Examples EXAMPLE 1 hex( MySQL ) This returns the hexadecimal value of the input.string. In this scenario, the output is \"4d7953514c\".","title":"hex (Function)"},{"location":"api/4.0.21/#length-function","text":"Returns the length of the input string. Syntax INT str:length( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the length. STRING No No Examples EXAMPLE 1 length( Hello World ) This outputs the length of the provided string. In this scenario, the, output is 11 .","title":"length (Function)"},{"location":"api/4.0.21/#lower-function","text":"Converts the capital letters in the input string to the equivalent simple letters. Syntax STRING str:lower( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to convert to the lower case (i.e., equivalent simple letters). STRING No No Examples EXAMPLE 1 lower( WSO2 cep ) This converts the capital letters in the input.string to the equivalent simple letters. In this scenario, the output is \"wso2 cep \".","title":"lower (Function)"},{"location":"api/4.0.21/#regexp-function","text":"Returns a boolean value based on the matchability of the input string and the given regular expression. Syntax BOOL str:regexp( STRING input.string, STRING regex) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to match with the given regular expression. STRING No No regex The regular expression to be matched with the input string. STRING No No Examples EXAMPLE 1 regexp( WSO2 abcdh , WSO(.*h) ) This returns a boolean value after matching regular expression with the given string. In this scenario, it returns \"true\" as the output.","title":"regexp (Function)"},{"location":"api/4.0.21/#repeat-function","text":"Repeats the input string for a specified number of times. Syntax STRING str:repeat( STRING input.string, INT times) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that is repeated the number of times as defined by the user. STRING No No times The number of times the input.string needs to be repeated . INT No No Examples EXAMPLE 1 repeat( StRing 1 , 3) This returns a string value by repeating the string for a specified number of times. In this scenario, the output is \"StRing 1StRing 1StRing 1\".","title":"repeat (Function)"},{"location":"api/4.0.21/#replaceall-function","text":"Finds all the substrings of the input string that matches with the given expression, and replaces them with the given replacement string. Syntax STRING str:replaceAll( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No regex The regular expression to be matched with the input string. STRING No No replacement.string The striing with which each substring that matches the given expression should be replaced. STRING No No Examples EXAMPLE 1 replaceAll( hello hi hello , 'hello', 'test') This returns a string after replacing the substrings of the input string with the replacement string. In this scenario, the output is \"test hi test\" .","title":"replaceAll (Function)"},{"location":"api/4.0.21/#replacefirst-function","text":"Finds the first substring of the input string that matches with the given regular expression, and replaces itwith the given replacement string. Syntax STRING str:replaceFirst( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be replaced. STRING No No regex The regular expression with which the input string should be matched. STRING No No replacement.string The string with which the first substring of input string that matches the regular expression should be replaced. STRING No No Examples EXAMPLE 1 replaceFirst( hello WSO2 A hello , 'WSO2(.*)A', 'XXXX') This returns a string after replacing the first substring with the given replacement string. In this scenario, the output is \"hello XXXX hello\".","title":"replaceFirst (Function)"},{"location":"api/4.0.21/#reverse-function","text":"Returns the input string in the reverse order character-wise and string-wise. Syntax STRING str:reverse( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be reversed. STRING No No Examples EXAMPLE 1 reverse( Hello World ) This outputs a string value by reversing the incoming input.string . In this scenario, the output is \"dlroW olleH\".","title":"reverse (Function)"},{"location":"api/4.0.21/#split-function","text":"Splits the input.string into substrings using the value parsed in the split.string and returns the substring at the position specified in the group.number . Syntax STRING str:split( STRING input.string, STRING split.string, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No split.string The string value to be used to split the input.string . STRING No No group.number The index of the split group INT No No Examples EXAMPLE 1 split( WSO2,ABM,NSFT , , , 0) This splits the given input.string by given split.string and returns the string in the index given by group.number. In this scenario, the output will is \"WSO2\".","title":"split (Function)"},{"location":"api/4.0.21/#strcmp-function","text":"Compares two strings lexicographically and returns an integer value. If both strings are equal, 0 is returned. If the first string is lexicographically greater than the second string, a positive value is returned. If the first string is lexicographically greater than the second string, a negative value is returned. Syntax INT str:strcmp( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument that should be compared with the first argument lexicographically. STRING No No Examples EXAMPLE 1 strcmp( AbCDefghiJ KLMN , 'Hello') This compares two strings lexicographically and outputs an integer value","title":"strcmp (Function)"},{"location":"api/4.0.21/#substr-function","text":"Returns a substring of the input string by considering a subset or all of the following factors: starting index, length, regular expression, and regex group number. Syntax STRING str:substr( STRING input.string, INT begin.index, INT length, STRING regex, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be processed. STRING No No begin.index Starting index to consider for the substring. INT No No length The length of the substring. INT No No regex The regular expression that should be matched with the input string.. STRING No No group.number The regex group number INT No No Examples EXAMPLE 1 substr( AbCDefghiJ KLMN , 4) This outputs the substring based on the given begin.index . In this scenario, the output is \"efghiJ KLMN\". EXAMPLE 2 substr( AbCDefghiJ KLMN , 2, 4) This outputs the substring based on the given begin.index and length. In this scenario, the output is \"CDef\". EXAMPLE 3 substr( WSO2D efghiJ KLMN , '^WSO2(.*)') This outputs the substring by applying the regex. In this scenario, the output is \"WSO2D efghiJ KLMN\". EXAMPLE 4 substr( WSO2 cep WSO2 XX E hi hA WSO2 heAllo , 'WSO2(.*)A(.*)', 2) This outputs the substring by applying the regex and considering the group.number . In this scenario, the output is \" ello\".","title":"substr (Function)"},{"location":"api/4.0.21/#trim-function","text":"Returns a copy of the input string without the leading and trailing whitespace (if any). Syntax STRING str:trim( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that needs to be trimmed. STRING No No Examples EXAMPLE 1 trim( AbCDefghiJ KLMN ) This returns a copy of the input.string with the leading and/or trailing white-spaces omitted. In this scenario, the output is \"AbCDefghiJ KLMN\".","title":"trim (Function)"},{"location":"api/4.0.21/#unhex-function","text":"Returns a string by converting the hexadecimal characters in the input string. Syntax STRING str:unhex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The hexadecimal input string that needs to be converted to string. STRING No No Examples EXAMPLE 1 unhex( 4d7953514c ) This converts the hexadecimal value to string","title":"unhex (Function)"},{"location":"api/4.0.21/#upper-function","text":"Converts the simple letters in the input string to the equivalent capital/block letters. Syntax STRING str:upper( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be converted to the upper case (equivalent capital/block letters). STRING No No Examples EXAMPLE 1 upper( Hello World ) This converts the simple letters in the input.string to theequivalent capital letters. In this scenario, the output is \"HELLO WORLD\".","title":"upper (Function)"},{"location":"api/4.0.21/#tokenize-stream-processor","text":"Splits the input string to tokens using the given regular expression and returns the resultant tokens. Syntax str:tokenize( STRING input.string, STRING regex, BOOL distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input text which should be split. STRING No No regex The string value to be used to tokenize the 'input.string'. STRING No No distinct Flag to return only distinct values false BOOL Yes No Extra Return Attributes Name Description Possible Types token Attribute which contains a single token. STRING Examples EXAMPLE 1 define stream inputStream (str string); @info(name = 'query1') from inputStream#str:tokenize(str , ',') select text insert into outputStream; This query performs tokenization for the given string. If the str is \"Android,Windows8,iOS\", then 3 events containing token attribute value, Android , Windows8 , iOS in order.","title":"tokenize (Stream Processor)"},{"location":"api/4.0.22/","text":"API Docs - v4.0.22 Str groupConcat (Aggregate Function) Aggregates the received events by concatenating the keys of those events using a given separator, e.g., comma (,) and hyphen (-), and returns the concatenated key string. Syntax STRING str:groupConcat( STRING key, STRING separator, STRING distinct, STRING order) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key The string that need to be aggregated. STRING No No separator The separator that separates each string key getting aggregated. , STRING Yes No distinct To only have distinct string keys in the the aggregation. false STRING Yes No order Accepts 'ASC' or 'DESC' strings to sort the string keys by ascending or descending order. No order STRING Yes No Examples EXAMPLE 1 from InputStream#window.time(5 min) select str:groupConcat( key ) as groupedKeys input OutputStream; This returns a string that is the result of the concatenated keys separated by the given separator. When we send events having values for the key 'A' , 'B' , 'S' , 'C' , 'A' it will return \"A,B,S,C,A\" as the output EXAMPLE 2 from InputStream#window.time(5 min) select groupConcat( key , - ,true, ASC ) as groupedKeys input OutputStream; This returns a string that is the result of the concatenated keys separated by the given separator. When we send events having values for the key 'A' , 'B' , 'S' , 'C' , 'A' it will return \"A-B-C-S\" as the output charAt (Function) Returns the char value that exists at the given index position of the input string. Syntax STRING str:charAt( STRING input.value, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.value The input string that used to find the character. STRING No No index The variable that specifies the index. INT No No Examples EXAMPLE 1 charAt( WSO2 , 1) This will output the character that exists at index 1. In this case, it will output 'S'. coalesce (Function) Returns the first input parameter value that is not null of the given argument. Syntax INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT str:coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have one or more input parameters in any data type. All the specified parameters should be of the same type. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No No Examples EXAMPLE 1 coalesce(null, BBB , CCC ) This returns the first input parameter that is not null. In this example, it returns \"BBB\" concat (Function) Returns a string that is the result of concatenating two or more input string values. Syntax STRING str:concat( STRING argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have two or more string type input parameters. STRING No No Examples EXAMPLE 1 concat( D533 , 8JU^ , XYZ ) This returns a string value by concatenating the given arguments. In this case, it will return \"D5338JU^XYZ\" as the output contains (Function) Returns true if the input.string contains the specified sequence of char values in the search.string . Syntax BOOL str:contains( STRING input.string, STRING search.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string Input string value. STRING No No search.string The string value to be searched for in the input.string . STRING No No Examples EXAMPLE 1 contains( 21 products are produced by WSO2 currently , WSO2 ) This returns a boolean value as the output. In this case, it returns true . equalsIgnoreCase (Function) Returns a boolean value by comparing two strings lexicographically without considering the letter case. Syntax BOOL str:equalsIgnoreCase( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument. This is compared with the first argument. STRING No No Examples EXAMPLE 1 equalsIgnoreCase( WSO2 , wso2 ) This returns a boolean value as the output. In this scenario, it returns \"true\". fillTemplate (Function) This extension replaces the templated positions that are marked with an index value in a specified template with the strings provided. Syntax STRING str:fillTemplate( STRING template, STRING|INT|LONG|DOUBLE|FLOAT|BOOL replacement.strings) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic template The string with templated fields that needs to be filled with the given strings. The format of the templated fields should be as follows: {{INDEX}} where 'INDEX' is an integer. This index is used to map the strings that are used to replace the templated fields. STRING No No replacement.strings The strings with which the templated positions in the template need to be replaced. The minimum of two arguments need to be included in the execution string. There is no upper limit on the number of arguments allowed to be included. STRING INT LONG DOUBLE FLOAT BOOL No No Examples EXAMPLE 1 str:fillTemplate( This is {{1}} for the {{2}} function , 'an example', 'fillTemplate') In this example, the template is 'This is {{1}} for the {{2}} function'.Here, the templated string {{1}} is replaced with the 1st string value provided, which is 'an example'. {{2}} is replaced with the 2nd string provided, which is 'fillTemplate' The complete return string is 'This is an example for the fillTemplate function'. hex (Function) Returns a hexadecimal string by converting each byte of each character in the input string to two hexadecimal digits. Syntax STRING str:hex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the hexadecimal value. STRING No No Examples EXAMPLE 1 hex( MySQL ) This returns the hexadecimal value of the input.string. In this scenario, the output is \"4d7953514c\". length (Function) Returns the length of the input string. Syntax INT str:length( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the length. STRING No No Examples EXAMPLE 1 length( Hello World ) This outputs the length of the provided string. In this scenario, the, output is 11 . lower (Function) Converts the capital letters in the input string to the equivalent simple letters. Syntax STRING str:lower( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to convert to the lower case (i.e., equivalent simple letters). STRING No No Examples EXAMPLE 1 lower( WSO2 cep ) This converts the capital letters in the input.string to the equivalent simple letters. In this scenario, the output is \"wso2 cep \". regexp (Function) Returns a boolean value based on the matchability of the input string and the given regular expression. Syntax BOOL str:regexp( STRING input.string, STRING regex) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to match with the given regular expression. STRING No No regex The regular expression to be matched with the input string. STRING No No Examples EXAMPLE 1 regexp( WSO2 abcdh , WSO(.*h) ) This returns a boolean value after matching regular expression with the given string. In this scenario, it returns \"true\" as the output. repeat (Function) Repeats the input string for a specified number of times. Syntax STRING str:repeat( STRING input.string, INT times) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that is repeated the number of times as defined by the user. STRING No No times The number of times the input.string needs to be repeated . INT No No Examples EXAMPLE 1 repeat( StRing 1 , 3) This returns a string value by repeating the string for a specified number of times. In this scenario, the output is \"StRing 1StRing 1StRing 1\". replaceAll (Function) Finds all the substrings of the input string that matches with the given expression, and replaces them with the given replacement string. Syntax STRING str:replaceAll( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No regex The regular expression to be matched with the input string. STRING No No replacement.string The striing with which each substring that matches the given expression should be replaced. STRING No No Examples EXAMPLE 1 replaceAll( hello hi hello , 'hello', 'test') This returns a string after replacing the substrings of the input string with the replacement string. In this scenario, the output is \"test hi test\" . replaceFirst (Function) Finds the first substring of the input string that matches with the given regular expression, and replaces itwith the given replacement string. Syntax STRING str:replaceFirst( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be replaced. STRING No No regex The regular expression with which the input string should be matched. STRING No No replacement.string The string with which the first substring of input string that matches the regular expression should be replaced. STRING No No Examples EXAMPLE 1 replaceFirst( hello WSO2 A hello , 'WSO2(.*)A', 'XXXX') This returns a string after replacing the first substring with the given replacement string. In this scenario, the output is \"hello XXXX hello\". reverse (Function) Returns the input string in the reverse order character-wise and string-wise. Syntax STRING str:reverse( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be reversed. STRING No No Examples EXAMPLE 1 reverse( Hello World ) This outputs a string value by reversing the incoming input.string . In this scenario, the output is \"dlroW olleH\". split (Function) Splits the input.string into substrings using the value parsed in the split.string and returns the substring at the position specified in the group.number . Syntax STRING str:split( STRING input.string, STRING split.string, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No split.string The string value to be used to split the input.string . STRING No No group.number The index of the split group INT No No Examples EXAMPLE 1 split( WSO2,ABM,NSFT , , , 0) This splits the given input.string by given split.string and returns the string in the index given by group.number. In this scenario, the output will is \"WSO2\". strcmp (Function) Compares two strings lexicographically and returns an integer value. If both strings are equal, 0 is returned. If the first string is lexicographically greater than the second string, a positive value is returned. If the first string is lexicographically greater than the second string, a negative value is returned. Syntax INT str:strcmp( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument that should be compared with the first argument lexicographically. STRING No No Examples EXAMPLE 1 strcmp( AbCDefghiJ KLMN , 'Hello') This compares two strings lexicographically and outputs an integer value substr (Function) Returns a substring of the input string by considering a subset or all of the following factors: starting index, length, regular expression, and regex group number. Syntax STRING str:substr( STRING input.string, INT begin.index, INT length, STRING regex, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be processed. STRING No No begin.index Starting index to consider for the substring. INT No No length The length of the substring. INT No No regex The regular expression that should be matched with the input string.. STRING No No group.number The regex group number INT No No Examples EXAMPLE 1 substr( AbCDefghiJ KLMN , 4) This outputs the substring based on the given begin.index . In this scenario, the output is \"efghiJ KLMN\". EXAMPLE 2 substr( AbCDefghiJ KLMN , 2, 4) This outputs the substring based on the given begin.index and length. In this scenario, the output is \"CDef\". EXAMPLE 3 substr( WSO2D efghiJ KLMN , '^WSO2(.*)') This outputs the substring by applying the regex. In this scenario, the output is \"WSO2D efghiJ KLMN\". EXAMPLE 4 substr( WSO2 cep WSO2 XX E hi hA WSO2 heAllo , 'WSO2(.*)A(.*)', 2) This outputs the substring by applying the regex and considering the group.number . In this scenario, the output is \" ello\". trim (Function) Returns a copy of the input string without the leading and trailing whitespace (if any). Syntax STRING str:trim( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that needs to be trimmed. STRING No No Examples EXAMPLE 1 trim( AbCDefghiJ KLMN ) This returns a copy of the input.string with the leading and/or trailing white-spaces omitted. In this scenario, the output is \"AbCDefghiJ KLMN\". unhex (Function) Returns a string by converting the hexadecimal characters in the input string. Syntax STRING str:unhex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The hexadecimal input string that needs to be converted to string. STRING No No Examples EXAMPLE 1 unhex( 4d7953514c ) This converts the hexadecimal value to string upper (Function) Converts the simple letters in the input string to the equivalent capital/block letters. Syntax STRING str:upper( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be converted to the upper case (equivalent capital/block letters). STRING No No Examples EXAMPLE 1 upper( Hello World ) This converts the simple letters in the input.string to theequivalent capital letters. In this scenario, the output is \"HELLO WORLD\". tokenize (Stream Processor) Splits the input string to tokens using the given regular expression and returns the resultant tokens. Syntax str:tokenize( STRING input.string, STRING regex, BOOL distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input text which should be split. STRING No No regex The string value to be used to tokenize the 'input.string'. STRING No No distinct Flag to return only distinct values false BOOL Yes No Extra Return Attributes Name Description Possible Types token Attribute which contains a single token. STRING Examples EXAMPLE 1 define stream inputStream (str string); @info(name = 'query1') from inputStream#str:tokenize(str , ',') select text insert into outputStream; This query performs tokenization for the given string. If the str is \"Android,Windows8,iOS\", then 3 events containing token attribute value, Android , Windows8 , iOS in order.","title":"4.0.22"},{"location":"api/4.0.22/#api-docs-v4022","text":"","title":"API Docs - v4.0.22"},{"location":"api/4.0.22/#str","text":"","title":"Str"},{"location":"api/4.0.22/#groupconcat-aggregate-function","text":"Aggregates the received events by concatenating the keys of those events using a given separator, e.g., comma (,) and hyphen (-), and returns the concatenated key string. Syntax STRING str:groupConcat( STRING key, STRING separator, STRING distinct, STRING order) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key The string that need to be aggregated. STRING No No separator The separator that separates each string key getting aggregated. , STRING Yes No distinct To only have distinct string keys in the the aggregation. false STRING Yes No order Accepts 'ASC' or 'DESC' strings to sort the string keys by ascending or descending order. No order STRING Yes No Examples EXAMPLE 1 from InputStream#window.time(5 min) select str:groupConcat( key ) as groupedKeys input OutputStream; This returns a string that is the result of the concatenated keys separated by the given separator. When we send events having values for the key 'A' , 'B' , 'S' , 'C' , 'A' it will return \"A,B,S,C,A\" as the output EXAMPLE 2 from InputStream#window.time(5 min) select groupConcat( key , - ,true, ASC ) as groupedKeys input OutputStream; This returns a string that is the result of the concatenated keys separated by the given separator. When we send events having values for the key 'A' , 'B' , 'S' , 'C' , 'A' it will return \"A-B-C-S\" as the output","title":"groupConcat (Aggregate Function)"},{"location":"api/4.0.22/#charat-function","text":"Returns the char value that exists at the given index position of the input string. Syntax STRING str:charAt( STRING input.value, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.value The input string that used to find the character. STRING No No index The variable that specifies the index. INT No No Examples EXAMPLE 1 charAt( WSO2 , 1) This will output the character that exists at index 1. In this case, it will output 'S'.","title":"charAt (Function)"},{"location":"api/4.0.22/#coalesce-function","text":"Returns the first input parameter value that is not null of the given argument. Syntax INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT str:coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have one or more input parameters in any data type. All the specified parameters should be of the same type. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No No Examples EXAMPLE 1 coalesce(null, BBB , CCC ) This returns the first input parameter that is not null. In this example, it returns \"BBB\"","title":"coalesce (Function)"},{"location":"api/4.0.22/#concat-function","text":"Returns a string that is the result of concatenating two or more input string values. Syntax STRING str:concat( STRING argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have two or more string type input parameters. STRING No No Examples EXAMPLE 1 concat( D533 , 8JU^ , XYZ ) This returns a string value by concatenating the given arguments. In this case, it will return \"D5338JU^XYZ\" as the output","title":"concat (Function)"},{"location":"api/4.0.22/#contains-function","text":"Returns true if the input.string contains the specified sequence of char values in the search.string . Syntax BOOL str:contains( STRING input.string, STRING search.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string Input string value. STRING No No search.string The string value to be searched for in the input.string . STRING No No Examples EXAMPLE 1 contains( 21 products are produced by WSO2 currently , WSO2 ) This returns a boolean value as the output. In this case, it returns true .","title":"contains (Function)"},{"location":"api/4.0.22/#equalsignorecase-function","text":"Returns a boolean value by comparing two strings lexicographically without considering the letter case. Syntax BOOL str:equalsIgnoreCase( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument. This is compared with the first argument. STRING No No Examples EXAMPLE 1 equalsIgnoreCase( WSO2 , wso2 ) This returns a boolean value as the output. In this scenario, it returns \"true\".","title":"equalsIgnoreCase (Function)"},{"location":"api/4.0.22/#filltemplate-function","text":"This extension replaces the templated positions that are marked with an index value in a specified template with the strings provided. Syntax STRING str:fillTemplate( STRING template, STRING|INT|LONG|DOUBLE|FLOAT|BOOL replacement.strings) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic template The string with templated fields that needs to be filled with the given strings. The format of the templated fields should be as follows: {{INDEX}} where 'INDEX' is an integer. This index is used to map the strings that are used to replace the templated fields. STRING No No replacement.strings The strings with which the templated positions in the template need to be replaced. The minimum of two arguments need to be included in the execution string. There is no upper limit on the number of arguments allowed to be included. STRING INT LONG DOUBLE FLOAT BOOL No No Examples EXAMPLE 1 str:fillTemplate( This is {{1}} for the {{2}} function , 'an example', 'fillTemplate') In this example, the template is 'This is {{1}} for the {{2}} function'.Here, the templated string {{1}} is replaced with the 1st string value provided, which is 'an example'. {{2}} is replaced with the 2nd string provided, which is 'fillTemplate' The complete return string is 'This is an example for the fillTemplate function'.","title":"fillTemplate (Function)"},{"location":"api/4.0.22/#hex-function","text":"Returns a hexadecimal string by converting each byte of each character in the input string to two hexadecimal digits. Syntax STRING str:hex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the hexadecimal value. STRING No No Examples EXAMPLE 1 hex( MySQL ) This returns the hexadecimal value of the input.string. In this scenario, the output is \"4d7953514c\".","title":"hex (Function)"},{"location":"api/4.0.22/#length-function","text":"Returns the length of the input string. Syntax INT str:length( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the length. STRING No No Examples EXAMPLE 1 length( Hello World ) This outputs the length of the provided string. In this scenario, the, output is 11 .","title":"length (Function)"},{"location":"api/4.0.22/#lower-function","text":"Converts the capital letters in the input string to the equivalent simple letters. Syntax STRING str:lower( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to convert to the lower case (i.e., equivalent simple letters). STRING No No Examples EXAMPLE 1 lower( WSO2 cep ) This converts the capital letters in the input.string to the equivalent simple letters. In this scenario, the output is \"wso2 cep \".","title":"lower (Function)"},{"location":"api/4.0.22/#regexp-function","text":"Returns a boolean value based on the matchability of the input string and the given regular expression. Syntax BOOL str:regexp( STRING input.string, STRING regex) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to match with the given regular expression. STRING No No regex The regular expression to be matched with the input string. STRING No No Examples EXAMPLE 1 regexp( WSO2 abcdh , WSO(.*h) ) This returns a boolean value after matching regular expression with the given string. In this scenario, it returns \"true\" as the output.","title":"regexp (Function)"},{"location":"api/4.0.22/#repeat-function","text":"Repeats the input string for a specified number of times. Syntax STRING str:repeat( STRING input.string, INT times) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that is repeated the number of times as defined by the user. STRING No No times The number of times the input.string needs to be repeated . INT No No Examples EXAMPLE 1 repeat( StRing 1 , 3) This returns a string value by repeating the string for a specified number of times. In this scenario, the output is \"StRing 1StRing 1StRing 1\".","title":"repeat (Function)"},{"location":"api/4.0.22/#replaceall-function","text":"Finds all the substrings of the input string that matches with the given expression, and replaces them with the given replacement string. Syntax STRING str:replaceAll( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No regex The regular expression to be matched with the input string. STRING No No replacement.string The striing with which each substring that matches the given expression should be replaced. STRING No No Examples EXAMPLE 1 replaceAll( hello hi hello , 'hello', 'test') This returns a string after replacing the substrings of the input string with the replacement string. In this scenario, the output is \"test hi test\" .","title":"replaceAll (Function)"},{"location":"api/4.0.22/#replacefirst-function","text":"Finds the first substring of the input string that matches with the given regular expression, and replaces itwith the given replacement string. Syntax STRING str:replaceFirst( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be replaced. STRING No No regex The regular expression with which the input string should be matched. STRING No No replacement.string The string with which the first substring of input string that matches the regular expression should be replaced. STRING No No Examples EXAMPLE 1 replaceFirst( hello WSO2 A hello , 'WSO2(.*)A', 'XXXX') This returns a string after replacing the first substring with the given replacement string. In this scenario, the output is \"hello XXXX hello\".","title":"replaceFirst (Function)"},{"location":"api/4.0.22/#reverse-function","text":"Returns the input string in the reverse order character-wise and string-wise. Syntax STRING str:reverse( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be reversed. STRING No No Examples EXAMPLE 1 reverse( Hello World ) This outputs a string value by reversing the incoming input.string . In this scenario, the output is \"dlroW olleH\".","title":"reverse (Function)"},{"location":"api/4.0.22/#split-function","text":"Splits the input.string into substrings using the value parsed in the split.string and returns the substring at the position specified in the group.number . Syntax STRING str:split( STRING input.string, STRING split.string, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No split.string The string value to be used to split the input.string . STRING No No group.number The index of the split group INT No No Examples EXAMPLE 1 split( WSO2,ABM,NSFT , , , 0) This splits the given input.string by given split.string and returns the string in the index given by group.number. In this scenario, the output will is \"WSO2\".","title":"split (Function)"},{"location":"api/4.0.22/#strcmp-function","text":"Compares two strings lexicographically and returns an integer value. If both strings are equal, 0 is returned. If the first string is lexicographically greater than the second string, a positive value is returned. If the first string is lexicographically greater than the second string, a negative value is returned. Syntax INT str:strcmp( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument that should be compared with the first argument lexicographically. STRING No No Examples EXAMPLE 1 strcmp( AbCDefghiJ KLMN , 'Hello') This compares two strings lexicographically and outputs an integer value","title":"strcmp (Function)"},{"location":"api/4.0.22/#substr-function","text":"Returns a substring of the input string by considering a subset or all of the following factors: starting index, length, regular expression, and regex group number. Syntax STRING str:substr( STRING input.string, INT begin.index, INT length, STRING regex, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be processed. STRING No No begin.index Starting index to consider for the substring. INT No No length The length of the substring. INT No No regex The regular expression that should be matched with the input string.. STRING No No group.number The regex group number INT No No Examples EXAMPLE 1 substr( AbCDefghiJ KLMN , 4) This outputs the substring based on the given begin.index . In this scenario, the output is \"efghiJ KLMN\". EXAMPLE 2 substr( AbCDefghiJ KLMN , 2, 4) This outputs the substring based on the given begin.index and length. In this scenario, the output is \"CDef\". EXAMPLE 3 substr( WSO2D efghiJ KLMN , '^WSO2(.*)') This outputs the substring by applying the regex. In this scenario, the output is \"WSO2D efghiJ KLMN\". EXAMPLE 4 substr( WSO2 cep WSO2 XX E hi hA WSO2 heAllo , 'WSO2(.*)A(.*)', 2) This outputs the substring by applying the regex and considering the group.number . In this scenario, the output is \" ello\".","title":"substr (Function)"},{"location":"api/4.0.22/#trim-function","text":"Returns a copy of the input string without the leading and trailing whitespace (if any). Syntax STRING str:trim( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that needs to be trimmed. STRING No No Examples EXAMPLE 1 trim( AbCDefghiJ KLMN ) This returns a copy of the input.string with the leading and/or trailing white-spaces omitted. In this scenario, the output is \"AbCDefghiJ KLMN\".","title":"trim (Function)"},{"location":"api/4.0.22/#unhex-function","text":"Returns a string by converting the hexadecimal characters in the input string. Syntax STRING str:unhex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The hexadecimal input string that needs to be converted to string. STRING No No Examples EXAMPLE 1 unhex( 4d7953514c ) This converts the hexadecimal value to string","title":"unhex (Function)"},{"location":"api/4.0.22/#upper-function","text":"Converts the simple letters in the input string to the equivalent capital/block letters. Syntax STRING str:upper( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be converted to the upper case (equivalent capital/block letters). STRING No No Examples EXAMPLE 1 upper( Hello World ) This converts the simple letters in the input.string to theequivalent capital letters. In this scenario, the output is \"HELLO WORLD\".","title":"upper (Function)"},{"location":"api/4.0.22/#tokenize-stream-processor","text":"Splits the input string to tokens using the given regular expression and returns the resultant tokens. Syntax str:tokenize( STRING input.string, STRING regex, BOOL distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input text which should be split. STRING No No regex The string value to be used to tokenize the 'input.string'. STRING No No distinct Flag to return only distinct values false BOOL Yes No Extra Return Attributes Name Description Possible Types token Attribute which contains a single token. STRING Examples EXAMPLE 1 define stream inputStream (str string); @info(name = 'query1') from inputStream#str:tokenize(str , ',') select text insert into outputStream; This query performs tokenization for the given string. If the str is \"Android,Windows8,iOS\", then 3 events containing token attribute value, Android , Windows8 , iOS in order.","title":"tokenize (Stream Processor)"},{"location":"api/4.0.23/","text":"API Docs - v4.0.23 Str groupConcat (Aggregate Function) Aggregates the received events by concatenating the keys of those events using a given separator, e.g., comma (,) and hyphen (-), and returns the concatenated key string. Syntax STRING str:groupConcat( STRING key, STRING separator, STRING distinct, STRING order) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key The string that need to be aggregated. STRING No No separator The separator that separates each string key getting aggregated. , STRING Yes No distinct To only have distinct string keys in the the aggregation. false STRING Yes No order Accepts 'ASC' or 'DESC' strings to sort the string keys by ascending or descending order. No order STRING Yes No Examples EXAMPLE 1 from InputStream#window.time(5 min) select str:groupConcat( key ) as groupedKeys input OutputStream; This returns a string that is the result of the concatenated keys separated by the given separator. When we send events having values for the key 'A' , 'B' , 'S' , 'C' , 'A' it will return \"A,B,S,C,A\" as the output EXAMPLE 2 from InputStream#window.time(5 min) select groupConcat( key , - ,true, ASC ) as groupedKeys input OutputStream; This returns a string that is the result of the concatenated keys separated by the given separator. When we send events having values for the key 'A' , 'B' , 'S' , 'C' , 'A' it will return \"A-B-C-S\" as the output charAt (Function) Returns the char value that exists at the given index position of the input string. Syntax STRING str:charAt( STRING input.value, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.value The input string that used to find the character. STRING No No index The variable that specifies the index. INT No No Examples EXAMPLE 1 charAt( WSO2 , 1) This will output the character that exists at index 1. In this case, it will output 'S'. coalesce (Function) Returns the first input parameter value that is not null of the given argument. Syntax INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT str:coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have one or more input parameters in any data type. All the specified parameters should be of the same type. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No No Examples EXAMPLE 1 coalesce(null, BBB , CCC ) This returns the first input parameter that is not null. In this example, it returns \"BBB\" concat (Function) Returns a string that is the result of concatenating two or more input string values. Syntax STRING str:concat( STRING argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have two or more string type input parameters. STRING No No Examples EXAMPLE 1 concat( D533 , 8JU^ , XYZ ) This returns a string value by concatenating the given arguments. In this case, it will return \"D5338JU^XYZ\" as the output contains (Function) Returns true if the input.string contains the specified sequence of char values in the search.string . Syntax BOOL str:contains( STRING input.string, STRING search.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string Input string value. STRING No No search.string The string value to be searched for in the input.string . STRING No No Examples EXAMPLE 1 contains( 21 products are produced by WSO2 currently , WSO2 ) This returns a boolean value as the output. In this case, it returns true . equalsIgnoreCase (Function) Returns a boolean value by comparing two strings lexicographically without considering the letter case. Syntax BOOL str:equalsIgnoreCase( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument. This is compared with the first argument. STRING No No Examples EXAMPLE 1 equalsIgnoreCase( WSO2 , wso2 ) This returns a boolean value as the output. In this scenario, it returns \"true\". fillTemplate (Function) This extension replaces the templated positions that are marked with an index value in a specified template with the strings provided. Syntax STRING str:fillTemplate( STRING template, STRING|INT|LONG|DOUBLE|FLOAT|BOOL replacement.strings) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic template The string with templated fields that needs to be filled with the given strings. The format of the templated fields should be as follows: {{INDEX}} where 'INDEX' is an integer. This index is used to map the strings that are used to replace the templated fields. STRING No No replacement.strings The strings with which the templated positions in the template need to be replaced. The minimum of two arguments need to be included in the execution string. There is no upper limit on the number of arguments allowed to be included. STRING INT LONG DOUBLE FLOAT BOOL No No Examples EXAMPLE 1 str:fillTemplate( This is {{1}} for the {{2}} function , 'an example', 'fillTemplate') In this example, the template is 'This is {{1}} for the {{2}} function'.Here, the templated string {{1}} is replaced with the 1st string value provided, which is 'an example'. {{2}} is replaced with the 2nd string provided, which is 'fillTemplate' The complete return string is 'This is an example for the fillTemplate function'. hex (Function) Returns a hexadecimal string by converting each byte of each character in the input string to two hexadecimal digits. Syntax STRING str:hex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the hexadecimal value. STRING No No Examples EXAMPLE 1 hex( MySQL ) This returns the hexadecimal value of the input.string. In this scenario, the output is \"4d7953514c\". length (Function) Returns the length of the input string. Syntax INT str:length( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the length. STRING No No Examples EXAMPLE 1 length( Hello World ) This outputs the length of the provided string. In this scenario, the, output is 11 . lower (Function) Converts the capital letters in the input string to the equivalent simple letters. Syntax STRING str:lower( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to convert to the lower case (i.e., equivalent simple letters). STRING No No Examples EXAMPLE 1 lower( WSO2 cep ) This converts the capital letters in the input.string to the equivalent simple letters. In this scenario, the output is \"wso2 cep \". regexp (Function) Returns a boolean value based on the matchability of the input string and the given regular expression. Syntax BOOL str:regexp( STRING input.string, STRING regex) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to match with the given regular expression. STRING No No regex The regular expression to be matched with the input string. STRING No No Examples EXAMPLE 1 regexp( WSO2 abcdh , WSO(.*h) ) This returns a boolean value after matching regular expression with the given string. In this scenario, it returns \"true\" as the output. repeat (Function) Repeats the input string for a specified number of times. Syntax STRING str:repeat( STRING input.string, INT times) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that is repeated the number of times as defined by the user. STRING No No times The number of times the input.string needs to be repeated . INT No No Examples EXAMPLE 1 repeat( StRing 1 , 3) This returns a string value by repeating the string for a specified number of times. In this scenario, the output is \"StRing 1StRing 1StRing 1\". replaceAll (Function) Finds all the substrings of the input string that matches with the given expression, and replaces them with the given replacement string. Syntax STRING str:replaceAll( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No regex The regular expression to be matched with the input string. STRING No No replacement.string The striing with which each substring that matches the given expression should be replaced. STRING No No Examples EXAMPLE 1 replaceAll( hello hi hello , 'hello', 'test') This returns a string after replacing the substrings of the input string with the replacement string. In this scenario, the output is \"test hi test\" . replaceFirst (Function) Finds the first substring of the input string that matches with the given regular expression, and replaces itwith the given replacement string. Syntax STRING str:replaceFirst( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be replaced. STRING No No regex The regular expression with which the input string should be matched. STRING No No replacement.string The string with which the first substring of input string that matches the regular expression should be replaced. STRING No No Examples EXAMPLE 1 replaceFirst( hello WSO2 A hello , 'WSO2(.*)A', 'XXXX') This returns a string after replacing the first substring with the given replacement string. In this scenario, the output is \"hello XXXX hello\". reverse (Function) Returns the input string in the reverse order character-wise and string-wise. Syntax STRING str:reverse( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be reversed. STRING No No Examples EXAMPLE 1 reverse( Hello World ) This outputs a string value by reversing the incoming input.string . In this scenario, the output is \"dlroW olleH\". split (Function) Splits the input.string into substrings using the value parsed in the split.string and returns the substring at the position specified in the group.number . Syntax STRING str:split( STRING input.string, STRING split.string, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No split.string The string value to be used to split the input.string . STRING No No group.number The index of the split group INT No No Examples EXAMPLE 1 split( WSO2,ABM,NSFT , , , 0) This splits the given input.string by given split.string and returns the string in the index given by group.number. In this scenario, the output will is \"WSO2\". strcmp (Function) Compares two strings lexicographically and returns an integer value. If both strings are equal, 0 is returned. If the first string is lexicographically greater than the second string, a positive value is returned. If the first string is lexicographically greater than the second string, a negative value is returned. Syntax INT str:strcmp( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument that should be compared with the first argument lexicographically. STRING No No Examples EXAMPLE 1 strcmp( AbCDefghiJ KLMN , 'Hello') This compares two strings lexicographically and outputs an integer value substr (Function) Returns a substring of the input string by considering a subset or all of the following factors: starting index, length, regular expression, and regex group number. Syntax STRING str:substr( STRING input.string, INT begin.index, INT length, STRING regex, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be processed. STRING No No begin.index Starting index to consider for the substring. INT No No length The length of the substring. INT No No regex The regular expression that should be matched with the input string.. STRING No No group.number The regex group number INT No No Examples EXAMPLE 1 substr( AbCDefghiJ KLMN , 4) This outputs the substring based on the given begin.index . In this scenario, the output is \"efghiJ KLMN\". EXAMPLE 2 substr( AbCDefghiJ KLMN , 2, 4) This outputs the substring based on the given begin.index and length. In this scenario, the output is \"CDef\". EXAMPLE 3 substr( WSO2D efghiJ KLMN , '^WSO2(.*)') This outputs the substring by applying the regex. In this scenario, the output is \"WSO2D efghiJ KLMN\". EXAMPLE 4 substr( WSO2 cep WSO2 XX E hi hA WSO2 heAllo , 'WSO2(.*)A(.*)', 2) This outputs the substring by applying the regex and considering the group.number . In this scenario, the output is \" ello\". trim (Function) Returns a copy of the input string without the leading and trailing whitespace (if any). Syntax STRING str:trim( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that needs to be trimmed. STRING No No Examples EXAMPLE 1 trim( AbCDefghiJ KLMN ) This returns a copy of the input.string with the leading and/or trailing white-spaces omitted. In this scenario, the output is \"AbCDefghiJ KLMN\". unhex (Function) Returns a string by converting the hexadecimal characters in the input string. Syntax STRING str:unhex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The hexadecimal input string that needs to be converted to string. STRING No No Examples EXAMPLE 1 unhex( 4d7953514c ) This converts the hexadecimal value to string upper (Function) Converts the simple letters in the input string to the equivalent capital/block letters. Syntax STRING str:upper( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be converted to the upper case (equivalent capital/block letters). STRING No No Examples EXAMPLE 1 upper( Hello World ) This converts the simple letters in the input.string to theequivalent capital letters. In this scenario, the output is \"HELLO WORLD\". tokenize (Stream Processor) Splits the input string to tokens using the given regular expression and returns the resultant tokens. Syntax str:tokenize( STRING input.string, STRING regex, BOOL distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input text which should be split. STRING No No regex The string value to be used to tokenize the 'input.string'. STRING No No distinct Flag to return only distinct values false BOOL Yes No Extra Return Attributes Name Description Possible Types token Attribute which contains a single token. STRING Examples EXAMPLE 1 define stream inputStream (str string); @info(name = 'query1') from inputStream#str:tokenize(str , ',') select text insert into outputStream; This query performs tokenization for the given string. If the str is \"Android,Windows8,iOS\", then 3 events containing token attribute value, Android , Windows8 , iOS in order.","title":"4.0.23"},{"location":"api/4.0.23/#api-docs-v4023","text":"","title":"API Docs - v4.0.23"},{"location":"api/4.0.23/#str","text":"","title":"Str"},{"location":"api/4.0.23/#groupconcat-aggregate-function","text":"Aggregates the received events by concatenating the keys of those events using a given separator, e.g., comma (,) and hyphen (-), and returns the concatenated key string. Syntax STRING str:groupConcat( STRING key, STRING separator, STRING distinct, STRING order) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key The string that need to be aggregated. STRING No No separator The separator that separates each string key getting aggregated. , STRING Yes No distinct To only have distinct string keys in the the aggregation. false STRING Yes No order Accepts 'ASC' or 'DESC' strings to sort the string keys by ascending or descending order. No order STRING Yes No Examples EXAMPLE 1 from InputStream#window.time(5 min) select str:groupConcat( key ) as groupedKeys input OutputStream; This returns a string that is the result of the concatenated keys separated by the given separator. When we send events having values for the key 'A' , 'B' , 'S' , 'C' , 'A' it will return \"A,B,S,C,A\" as the output EXAMPLE 2 from InputStream#window.time(5 min) select groupConcat( key , - ,true, ASC ) as groupedKeys input OutputStream; This returns a string that is the result of the concatenated keys separated by the given separator. When we send events having values for the key 'A' , 'B' , 'S' , 'C' , 'A' it will return \"A-B-C-S\" as the output","title":"groupConcat (Aggregate Function)"},{"location":"api/4.0.23/#charat-function","text":"Returns the char value that exists at the given index position of the input string. Syntax STRING str:charAt( STRING input.value, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.value The input string that used to find the character. STRING No No index The variable that specifies the index. INT No No Examples EXAMPLE 1 charAt( WSO2 , 1) This will output the character that exists at index 1. In this case, it will output 'S'.","title":"charAt (Function)"},{"location":"api/4.0.23/#coalesce-function","text":"Returns the first input parameter value that is not null of the given argument. Syntax INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT str:coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have one or more input parameters in any data type. All the specified parameters should be of the same type. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No No Examples EXAMPLE 1 coalesce(null, BBB , CCC ) This returns the first input parameter that is not null. In this example, it returns \"BBB\"","title":"coalesce (Function)"},{"location":"api/4.0.23/#concat-function","text":"Returns a string that is the result of concatenating two or more input string values. Syntax STRING str:concat( STRING argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have two or more string type input parameters. STRING No No Examples EXAMPLE 1 concat( D533 , 8JU^ , XYZ ) This returns a string value by concatenating the given arguments. In this case, it will return \"D5338JU^XYZ\" as the output","title":"concat (Function)"},{"location":"api/4.0.23/#contains-function","text":"Returns true if the input.string contains the specified sequence of char values in the search.string . Syntax BOOL str:contains( STRING input.string, STRING search.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string Input string value. STRING No No search.string The string value to be searched for in the input.string . STRING No No Examples EXAMPLE 1 contains( 21 products are produced by WSO2 currently , WSO2 ) This returns a boolean value as the output. In this case, it returns true .","title":"contains (Function)"},{"location":"api/4.0.23/#equalsignorecase-function","text":"Returns a boolean value by comparing two strings lexicographically without considering the letter case. Syntax BOOL str:equalsIgnoreCase( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument. This is compared with the first argument. STRING No No Examples EXAMPLE 1 equalsIgnoreCase( WSO2 , wso2 ) This returns a boolean value as the output. In this scenario, it returns \"true\".","title":"equalsIgnoreCase (Function)"},{"location":"api/4.0.23/#filltemplate-function","text":"This extension replaces the templated positions that are marked with an index value in a specified template with the strings provided. Syntax STRING str:fillTemplate( STRING template, STRING|INT|LONG|DOUBLE|FLOAT|BOOL replacement.strings) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic template The string with templated fields that needs to be filled with the given strings. The format of the templated fields should be as follows: {{INDEX}} where 'INDEX' is an integer. This index is used to map the strings that are used to replace the templated fields. STRING No No replacement.strings The strings with which the templated positions in the template need to be replaced. The minimum of two arguments need to be included in the execution string. There is no upper limit on the number of arguments allowed to be included. STRING INT LONG DOUBLE FLOAT BOOL No No Examples EXAMPLE 1 str:fillTemplate( This is {{1}} for the {{2}} function , 'an example', 'fillTemplate') In this example, the template is 'This is {{1}} for the {{2}} function'.Here, the templated string {{1}} is replaced with the 1st string value provided, which is 'an example'. {{2}} is replaced with the 2nd string provided, which is 'fillTemplate' The complete return string is 'This is an example for the fillTemplate function'.","title":"fillTemplate (Function)"},{"location":"api/4.0.23/#hex-function","text":"Returns a hexadecimal string by converting each byte of each character in the input string to two hexadecimal digits. Syntax STRING str:hex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the hexadecimal value. STRING No No Examples EXAMPLE 1 hex( MySQL ) This returns the hexadecimal value of the input.string. In this scenario, the output is \"4d7953514c\".","title":"hex (Function)"},{"location":"api/4.0.23/#length-function","text":"Returns the length of the input string. Syntax INT str:length( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the length. STRING No No Examples EXAMPLE 1 length( Hello World ) This outputs the length of the provided string. In this scenario, the, output is 11 .","title":"length (Function)"},{"location":"api/4.0.23/#lower-function","text":"Converts the capital letters in the input string to the equivalent simple letters. Syntax STRING str:lower( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to convert to the lower case (i.e., equivalent simple letters). STRING No No Examples EXAMPLE 1 lower( WSO2 cep ) This converts the capital letters in the input.string to the equivalent simple letters. In this scenario, the output is \"wso2 cep \".","title":"lower (Function)"},{"location":"api/4.0.23/#regexp-function","text":"Returns a boolean value based on the matchability of the input string and the given regular expression. Syntax BOOL str:regexp( STRING input.string, STRING regex) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to match with the given regular expression. STRING No No regex The regular expression to be matched with the input string. STRING No No Examples EXAMPLE 1 regexp( WSO2 abcdh , WSO(.*h) ) This returns a boolean value after matching regular expression with the given string. In this scenario, it returns \"true\" as the output.","title":"regexp (Function)"},{"location":"api/4.0.23/#repeat-function","text":"Repeats the input string for a specified number of times. Syntax STRING str:repeat( STRING input.string, INT times) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that is repeated the number of times as defined by the user. STRING No No times The number of times the input.string needs to be repeated . INT No No Examples EXAMPLE 1 repeat( StRing 1 , 3) This returns a string value by repeating the string for a specified number of times. In this scenario, the output is \"StRing 1StRing 1StRing 1\".","title":"repeat (Function)"},{"location":"api/4.0.23/#replaceall-function","text":"Finds all the substrings of the input string that matches with the given expression, and replaces them with the given replacement string. Syntax STRING str:replaceAll( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No regex The regular expression to be matched with the input string. STRING No No replacement.string The striing with which each substring that matches the given expression should be replaced. STRING No No Examples EXAMPLE 1 replaceAll( hello hi hello , 'hello', 'test') This returns a string after replacing the substrings of the input string with the replacement string. In this scenario, the output is \"test hi test\" .","title":"replaceAll (Function)"},{"location":"api/4.0.23/#replacefirst-function","text":"Finds the first substring of the input string that matches with the given regular expression, and replaces itwith the given replacement string. Syntax STRING str:replaceFirst( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be replaced. STRING No No regex The regular expression with which the input string should be matched. STRING No No replacement.string The string with which the first substring of input string that matches the regular expression should be replaced. STRING No No Examples EXAMPLE 1 replaceFirst( hello WSO2 A hello , 'WSO2(.*)A', 'XXXX') This returns a string after replacing the first substring with the given replacement string. In this scenario, the output is \"hello XXXX hello\".","title":"replaceFirst (Function)"},{"location":"api/4.0.23/#reverse-function","text":"Returns the input string in the reverse order character-wise and string-wise. Syntax STRING str:reverse( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be reversed. STRING No No Examples EXAMPLE 1 reverse( Hello World ) This outputs a string value by reversing the incoming input.string . In this scenario, the output is \"dlroW olleH\".","title":"reverse (Function)"},{"location":"api/4.0.23/#split-function","text":"Splits the input.string into substrings using the value parsed in the split.string and returns the substring at the position specified in the group.number . Syntax STRING str:split( STRING input.string, STRING split.string, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No split.string The string value to be used to split the input.string . STRING No No group.number The index of the split group INT No No Examples EXAMPLE 1 split( WSO2,ABM,NSFT , , , 0) This splits the given input.string by given split.string and returns the string in the index given by group.number. In this scenario, the output will is \"WSO2\".","title":"split (Function)"},{"location":"api/4.0.23/#strcmp-function","text":"Compares two strings lexicographically and returns an integer value. If both strings are equal, 0 is returned. If the first string is lexicographically greater than the second string, a positive value is returned. If the first string is lexicographically greater than the second string, a negative value is returned. Syntax INT str:strcmp( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument that should be compared with the first argument lexicographically. STRING No No Examples EXAMPLE 1 strcmp( AbCDefghiJ KLMN , 'Hello') This compares two strings lexicographically and outputs an integer value","title":"strcmp (Function)"},{"location":"api/4.0.23/#substr-function","text":"Returns a substring of the input string by considering a subset or all of the following factors: starting index, length, regular expression, and regex group number. Syntax STRING str:substr( STRING input.string, INT begin.index, INT length, STRING regex, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be processed. STRING No No begin.index Starting index to consider for the substring. INT No No length The length of the substring. INT No No regex The regular expression that should be matched with the input string.. STRING No No group.number The regex group number INT No No Examples EXAMPLE 1 substr( AbCDefghiJ KLMN , 4) This outputs the substring based on the given begin.index . In this scenario, the output is \"efghiJ KLMN\". EXAMPLE 2 substr( AbCDefghiJ KLMN , 2, 4) This outputs the substring based on the given begin.index and length. In this scenario, the output is \"CDef\". EXAMPLE 3 substr( WSO2D efghiJ KLMN , '^WSO2(.*)') This outputs the substring by applying the regex. In this scenario, the output is \"WSO2D efghiJ KLMN\". EXAMPLE 4 substr( WSO2 cep WSO2 XX E hi hA WSO2 heAllo , 'WSO2(.*)A(.*)', 2) This outputs the substring by applying the regex and considering the group.number . In this scenario, the output is \" ello\".","title":"substr (Function)"},{"location":"api/4.0.23/#trim-function","text":"Returns a copy of the input string without the leading and trailing whitespace (if any). Syntax STRING str:trim( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that needs to be trimmed. STRING No No Examples EXAMPLE 1 trim( AbCDefghiJ KLMN ) This returns a copy of the input.string with the leading and/or trailing white-spaces omitted. In this scenario, the output is \"AbCDefghiJ KLMN\".","title":"trim (Function)"},{"location":"api/4.0.23/#unhex-function","text":"Returns a string by converting the hexadecimal characters in the input string. Syntax STRING str:unhex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The hexadecimal input string that needs to be converted to string. STRING No No Examples EXAMPLE 1 unhex( 4d7953514c ) This converts the hexadecimal value to string","title":"unhex (Function)"},{"location":"api/4.0.23/#upper-function","text":"Converts the simple letters in the input string to the equivalent capital/block letters. Syntax STRING str:upper( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be converted to the upper case (equivalent capital/block letters). STRING No No Examples EXAMPLE 1 upper( Hello World ) This converts the simple letters in the input.string to theequivalent capital letters. In this scenario, the output is \"HELLO WORLD\".","title":"upper (Function)"},{"location":"api/4.0.23/#tokenize-stream-processor","text":"Splits the input string to tokens using the given regular expression and returns the resultant tokens. Syntax str:tokenize( STRING input.string, STRING regex, BOOL distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input text which should be split. STRING No No regex The string value to be used to tokenize the 'input.string'. STRING No No distinct Flag to return only distinct values false BOOL Yes No Extra Return Attributes Name Description Possible Types token Attribute which contains a single token. STRING Examples EXAMPLE 1 define stream inputStream (str string); @info(name = 'query1') from inputStream#str:tokenize(str , ',') select text insert into outputStream; This query performs tokenization for the given string. If the str is \"Android,Windows8,iOS\", then 3 events containing token attribute value, Android , Windows8 , iOS in order.","title":"tokenize (Stream Processor)"},{"location":"api/4.0.24/","text":"API Docs - v4.0.24 Str groupConcat (Aggregate Function) Aggregates the received events by concatenating the keys of those events using a given separator, e.g., comma (,) and hyphen (-), and returns the concatenated key string. Syntax STRING str:groupConcat( STRING key, STRING separator, STRING distinct, STRING order) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key The string that need to be aggregated. STRING No No separator The separator that separates each string key getting aggregated. , STRING Yes No distinct To only have distinct string keys in the the aggregation. false STRING Yes No order Accepts 'ASC' or 'DESC' strings to sort the string keys by ascending or descending order. No order STRING Yes No Examples EXAMPLE 1 from InputStream#window.time(5 min) select str:groupConcat( key ) as groupedKeys input OutputStream; This returns a string that is the result of the concatenated keys separated by the given separator. When we send events having values for the key 'A' , 'B' , 'S' , 'C' , 'A' it will return \"A,B,S,C,A\" as the output EXAMPLE 2 from InputStream#window.time(5 min) select groupConcat( key , - ,true, ASC ) as groupedKeys input OutputStream; This returns a string that is the result of the concatenated keys separated by the given separator. When we send events having values for the key 'A' , 'B' , 'S' , 'C' , 'A' it will return \"A-B-C-S\" as the output charAt (Function) Returns the char value that exists at the given index position of the input string. Syntax STRING str:charAt( STRING input.value, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.value The input string that used to find the character. STRING No No index The variable that specifies the index. INT No No Examples EXAMPLE 1 charAt( WSO2 , 1) This will output the character that exists at index 1. In this case, it will output 'S'. coalesce (Function) Returns the first input parameter value that is not null of the given argument. Syntax INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT str:coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have one or more input parameters in any data type. All the specified parameters should be of the same type. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No No Examples EXAMPLE 1 coalesce(null, BBB , CCC ) This returns the first input parameter that is not null. In this example, it returns \"BBB\" concat (Function) Returns a string that is the result of concatenating two or more input string values. Syntax STRING str:concat( STRING argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have two or more string type input parameters. STRING No No Examples EXAMPLE 1 concat( D533 , 8JU^ , XYZ ) This returns a string value by concatenating the given arguments. In this case, it will return \"D5338JU^XYZ\" as the output contains (Function) Returns true if the input.string contains the specified sequence of char values in the search.string . Syntax BOOL str:contains( STRING input.string, STRING search.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string Input string value. STRING No No search.string The string value to be searched for in the input.string . STRING No No Examples EXAMPLE 1 contains( 21 products are produced by WSO2 currently , WSO2 ) This returns a boolean value as the output. In this case, it returns true . equalsIgnoreCase (Function) Returns a boolean value by comparing two strings lexicographically without considering the letter case. Syntax BOOL str:equalsIgnoreCase( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument. This is compared with the first argument. STRING No No Examples EXAMPLE 1 equalsIgnoreCase( WSO2 , wso2 ) This returns a boolean value as the output. In this scenario, it returns \"true\". fillTemplate (Function) This extension replaces the templated positions that are marked with an index value in a specified template with the strings provided. Syntax STRING str:fillTemplate( STRING template, STRING|INT|LONG|DOUBLE|FLOAT|BOOL replacement.strings) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic template The string with templated fields that needs to be filled with the given strings. The format of the templated fields should be as follows: {{INDEX}} where 'INDEX' is an integer. This index is used to map the strings that are used to replace the templated fields. STRING No No replacement.strings The strings with which the templated positions in the template need to be replaced. The minimum of two arguments need to be included in the execution string. There is no upper limit on the number of arguments allowed to be included. STRING INT LONG DOUBLE FLOAT BOOL No No Examples EXAMPLE 1 str:fillTemplate( This is {{1}} for the {{2}} function , 'an example', 'fillTemplate') In this example, the template is 'This is {{1}} for the {{2}} function'.Here, the templated string {{1}} is replaced with the 1st string value provided, which is 'an example'. {{2}} is replaced with the 2nd string provided, which is 'fillTemplate' The complete return string is 'This is an example for the fillTemplate function'. hex (Function) Returns a hexadecimal string by converting each byte of each character in the input string to two hexadecimal digits. Syntax STRING str:hex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the hexadecimal value. STRING No No Examples EXAMPLE 1 hex( MySQL ) This returns the hexadecimal value of the input.string. In this scenario, the output is \"4d7953514c\". length (Function) Returns the length of the input string. Syntax INT str:length( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the length. STRING No No Examples EXAMPLE 1 length( Hello World ) This outputs the length of the provided string. In this scenario, the, output is 11 . lower (Function) Converts the capital letters in the input string to the equivalent simple letters. Syntax STRING str:lower( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to convert to the lower case (i.e., equivalent simple letters). STRING No No Examples EXAMPLE 1 lower( WSO2 cep ) This converts the capital letters in the input.string to the equivalent simple letters. In this scenario, the output is \"wso2 cep \". regexp (Function) Returns a boolean value based on the matchability of the input string and the given regular expression. Syntax BOOL str:regexp( STRING input.string, STRING regex) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to match with the given regular expression. STRING No No regex The regular expression to be matched with the input string. STRING No No Examples EXAMPLE 1 regexp( WSO2 abcdh , WSO(.*h) ) This returns a boolean value after matching regular expression with the given string. In this scenario, it returns \"true\" as the output. repeat (Function) Repeats the input string for a specified number of times. Syntax STRING str:repeat( STRING input.string, INT times) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that is repeated the number of times as defined by the user. STRING No No times The number of times the input.string needs to be repeated . INT No No Examples EXAMPLE 1 repeat( StRing 1 , 3) This returns a string value by repeating the string for a specified number of times. In this scenario, the output is \"StRing 1StRing 1StRing 1\". replaceAll (Function) Finds all the substrings of the input string that matches with the given expression, and replaces them with the given replacement string. Syntax STRING str:replaceAll( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No regex The regular expression to be matched with the input string. STRING No No replacement.string The striing with which each substring that matches the given expression should be replaced. STRING No No Examples EXAMPLE 1 replaceAll( hello hi hello , 'hello', 'test') This returns a string after replacing the substrings of the input string with the replacement string. In this scenario, the output is \"test hi test\" . replaceFirst (Function) Finds the first substring of the input string that matches with the given regular expression, and replaces itwith the given replacement string. Syntax STRING str:replaceFirst( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be replaced. STRING No No regex The regular expression with which the input string should be matched. STRING No No replacement.string The string with which the first substring of input string that matches the regular expression should be replaced. STRING No No Examples EXAMPLE 1 replaceFirst( hello WSO2 A hello , 'WSO2(.*)A', 'XXXX') This returns a string after replacing the first substring with the given replacement string. In this scenario, the output is \"hello XXXX hello\". reverse (Function) Returns the input string in the reverse order character-wise and string-wise. Syntax STRING str:reverse( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be reversed. STRING No No Examples EXAMPLE 1 reverse( Hello World ) This outputs a string value by reversing the incoming input.string . In this scenario, the output is \"dlroW olleH\". split (Function) Splits the input.string into substrings using the value parsed in the split.string and returns the substring at the position specified in the group.number . Syntax STRING str:split( STRING input.string, STRING split.string, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No split.string The string value to be used to split the input.string . STRING No No group.number The index of the split group INT No No Examples EXAMPLE 1 split( WSO2,ABM,NSFT , , , 0) This splits the given input.string by given split.string and returns the string in the index given by group.number. In this scenario, the output will is \"WSO2\". strcmp (Function) Compares two strings lexicographically and returns an integer value. If both strings are equal, 0 is returned. If the first string is lexicographically greater than the second string, a positive value is returned. If the first string is lexicographically greater than the second string, a negative value is returned. Syntax INT str:strcmp( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument that should be compared with the first argument lexicographically. STRING No No Examples EXAMPLE 1 strcmp( AbCDefghiJ KLMN , 'Hello') This compares two strings lexicographically and outputs an integer value substr (Function) Returns a substring of the input string by considering a subset or all of the following factors: starting index, length, regular expression, and regex group number. Syntax STRING str:substr( STRING input.string, INT begin.index, INT length, STRING regex, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be processed. STRING No No begin.index Starting index to consider for the substring. INT No No length The length of the substring. INT No No regex The regular expression that should be matched with the input string.. STRING No No group.number The regex group number INT No No Examples EXAMPLE 1 substr( AbCDefghiJ KLMN , 4) This outputs the substring based on the given begin.index . In this scenario, the output is \"efghiJ KLMN\". EXAMPLE 2 substr( AbCDefghiJ KLMN , 2, 4) This outputs the substring based on the given begin.index and length. In this scenario, the output is \"CDef\". EXAMPLE 3 substr( WSO2D efghiJ KLMN , '^WSO2(.*)') This outputs the substring by applying the regex. In this scenario, the output is \"WSO2D efghiJ KLMN\". EXAMPLE 4 substr( WSO2 cep WSO2 XX E hi hA WSO2 heAllo , 'WSO2(.*)A(.*)', 2) This outputs the substring by applying the regex and considering the group.number . In this scenario, the output is \" ello\". trim (Function) Returns a copy of the input string without the leading and trailing whitespace (if any). Syntax STRING str:trim( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that needs to be trimmed. STRING No No Examples EXAMPLE 1 trim( AbCDefghiJ KLMN ) This returns a copy of the input.string with the leading and/or trailing white-spaces omitted. In this scenario, the output is \"AbCDefghiJ KLMN\". unhex (Function) Returns a string by converting the hexadecimal characters in the input string. Syntax STRING str:unhex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The hexadecimal input string that needs to be converted to string. STRING No No Examples EXAMPLE 1 unhex( 4d7953514c ) This converts the hexadecimal value to string upper (Function) Converts the simple letters in the input string to the equivalent capital/block letters. Syntax STRING str:upper( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be converted to the upper case (equivalent capital/block letters). STRING No No Examples EXAMPLE 1 upper( Hello World ) This converts the simple letters in the input.string to theequivalent capital letters. In this scenario, the output is \"HELLO WORLD\". tokenize (Stream Processor) Splits the input string to tokens using the given regular expression and returns the resultant tokens. Syntax str:tokenize( STRING input.string, STRING regex, BOOL distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input text which should be split. STRING No No regex The string value to be used to tokenize the 'input.string'. STRING No No distinct Flag to return only distinct values false BOOL Yes No Extra Return Attributes Name Description Possible Types token Attribute which contains a single token. STRING Examples EXAMPLE 1 define stream inputStream (str string); @info(name = 'query1') from inputStream#str:tokenize(str , ',') select text insert into outputStream; This query performs tokenization for the given string. If the str is \"Android,Windows8,iOS\", then 3 events containing token attribute value, Android , Windows8 , iOS in order.","title":"4.0.24"},{"location":"api/4.0.24/#api-docs-v4024","text":"","title":"API Docs - v4.0.24"},{"location":"api/4.0.24/#str","text":"","title":"Str"},{"location":"api/4.0.24/#groupconcat-aggregate-function","text":"Aggregates the received events by concatenating the keys of those events using a given separator, e.g., comma (,) and hyphen (-), and returns the concatenated key string. Syntax STRING str:groupConcat( STRING key, STRING separator, STRING distinct, STRING order) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key The string that need to be aggregated. STRING No No separator The separator that separates each string key getting aggregated. , STRING Yes No distinct To only have distinct string keys in the the aggregation. false STRING Yes No order Accepts 'ASC' or 'DESC' strings to sort the string keys by ascending or descending order. No order STRING Yes No Examples EXAMPLE 1 from InputStream#window.time(5 min) select str:groupConcat( key ) as groupedKeys input OutputStream; This returns a string that is the result of the concatenated keys separated by the given separator. When we send events having values for the key 'A' , 'B' , 'S' , 'C' , 'A' it will return \"A,B,S,C,A\" as the output EXAMPLE 2 from InputStream#window.time(5 min) select groupConcat( key , - ,true, ASC ) as groupedKeys input OutputStream; This returns a string that is the result of the concatenated keys separated by the given separator. When we send events having values for the key 'A' , 'B' , 'S' , 'C' , 'A' it will return \"A-B-C-S\" as the output","title":"groupConcat (Aggregate Function)"},{"location":"api/4.0.24/#charat-function","text":"Returns the char value that exists at the given index position of the input string. Syntax STRING str:charAt( STRING input.value, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.value The input string that used to find the character. STRING No No index The variable that specifies the index. INT No No Examples EXAMPLE 1 charAt( WSO2 , 1) This will output the character that exists at index 1. In this case, it will output 'S'.","title":"charAt (Function)"},{"location":"api/4.0.24/#coalesce-function","text":"Returns the first input parameter value that is not null of the given argument. Syntax INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT str:coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have one or more input parameters in any data type. All the specified parameters should be of the same type. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No No Examples EXAMPLE 1 coalesce(null, BBB , CCC ) This returns the first input parameter that is not null. In this example, it returns \"BBB\"","title":"coalesce (Function)"},{"location":"api/4.0.24/#concat-function","text":"Returns a string that is the result of concatenating two or more input string values. Syntax STRING str:concat( STRING argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have two or more string type input parameters. STRING No No Examples EXAMPLE 1 concat( D533 , 8JU^ , XYZ ) This returns a string value by concatenating the given arguments. In this case, it will return \"D5338JU^XYZ\" as the output","title":"concat (Function)"},{"location":"api/4.0.24/#contains-function","text":"Returns true if the input.string contains the specified sequence of char values in the search.string . Syntax BOOL str:contains( STRING input.string, STRING search.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string Input string value. STRING No No search.string The string value to be searched for in the input.string . STRING No No Examples EXAMPLE 1 contains( 21 products are produced by WSO2 currently , WSO2 ) This returns a boolean value as the output. In this case, it returns true .","title":"contains (Function)"},{"location":"api/4.0.24/#equalsignorecase-function","text":"Returns a boolean value by comparing two strings lexicographically without considering the letter case. Syntax BOOL str:equalsIgnoreCase( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument. This is compared with the first argument. STRING No No Examples EXAMPLE 1 equalsIgnoreCase( WSO2 , wso2 ) This returns a boolean value as the output. In this scenario, it returns \"true\".","title":"equalsIgnoreCase (Function)"},{"location":"api/4.0.24/#filltemplate-function","text":"This extension replaces the templated positions that are marked with an index value in a specified template with the strings provided. Syntax STRING str:fillTemplate( STRING template, STRING|INT|LONG|DOUBLE|FLOAT|BOOL replacement.strings) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic template The string with templated fields that needs to be filled with the given strings. The format of the templated fields should be as follows: {{INDEX}} where 'INDEX' is an integer. This index is used to map the strings that are used to replace the templated fields. STRING No No replacement.strings The strings with which the templated positions in the template need to be replaced. The minimum of two arguments need to be included in the execution string. There is no upper limit on the number of arguments allowed to be included. STRING INT LONG DOUBLE FLOAT BOOL No No Examples EXAMPLE 1 str:fillTemplate( This is {{1}} for the {{2}} function , 'an example', 'fillTemplate') In this example, the template is 'This is {{1}} for the {{2}} function'.Here, the templated string {{1}} is replaced with the 1st string value provided, which is 'an example'. {{2}} is replaced with the 2nd string provided, which is 'fillTemplate' The complete return string is 'This is an example for the fillTemplate function'.","title":"fillTemplate (Function)"},{"location":"api/4.0.24/#hex-function","text":"Returns a hexadecimal string by converting each byte of each character in the input string to two hexadecimal digits. Syntax STRING str:hex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the hexadecimal value. STRING No No Examples EXAMPLE 1 hex( MySQL ) This returns the hexadecimal value of the input.string. In this scenario, the output is \"4d7953514c\".","title":"hex (Function)"},{"location":"api/4.0.24/#length-function","text":"Returns the length of the input string. Syntax INT str:length( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the length. STRING No No Examples EXAMPLE 1 length( Hello World ) This outputs the length of the provided string. In this scenario, the, output is 11 .","title":"length (Function)"},{"location":"api/4.0.24/#lower-function","text":"Converts the capital letters in the input string to the equivalent simple letters. Syntax STRING str:lower( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to convert to the lower case (i.e., equivalent simple letters). STRING No No Examples EXAMPLE 1 lower( WSO2 cep ) This converts the capital letters in the input.string to the equivalent simple letters. In this scenario, the output is \"wso2 cep \".","title":"lower (Function)"},{"location":"api/4.0.24/#regexp-function","text":"Returns a boolean value based on the matchability of the input string and the given regular expression. Syntax BOOL str:regexp( STRING input.string, STRING regex) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to match with the given regular expression. STRING No No regex The regular expression to be matched with the input string. STRING No No Examples EXAMPLE 1 regexp( WSO2 abcdh , WSO(.*h) ) This returns a boolean value after matching regular expression with the given string. In this scenario, it returns \"true\" as the output.","title":"regexp (Function)"},{"location":"api/4.0.24/#repeat-function","text":"Repeats the input string for a specified number of times. Syntax STRING str:repeat( STRING input.string, INT times) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that is repeated the number of times as defined by the user. STRING No No times The number of times the input.string needs to be repeated . INT No No Examples EXAMPLE 1 repeat( StRing 1 , 3) This returns a string value by repeating the string for a specified number of times. In this scenario, the output is \"StRing 1StRing 1StRing 1\".","title":"repeat (Function)"},{"location":"api/4.0.24/#replaceall-function","text":"Finds all the substrings of the input string that matches with the given expression, and replaces them with the given replacement string. Syntax STRING str:replaceAll( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No regex The regular expression to be matched with the input string. STRING No No replacement.string The striing with which each substring that matches the given expression should be replaced. STRING No No Examples EXAMPLE 1 replaceAll( hello hi hello , 'hello', 'test') This returns a string after replacing the substrings of the input string with the replacement string. In this scenario, the output is \"test hi test\" .","title":"replaceAll (Function)"},{"location":"api/4.0.24/#replacefirst-function","text":"Finds the first substring of the input string that matches with the given regular expression, and replaces itwith the given replacement string. Syntax STRING str:replaceFirst( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be replaced. STRING No No regex The regular expression with which the input string should be matched. STRING No No replacement.string The string with which the first substring of input string that matches the regular expression should be replaced. STRING No No Examples EXAMPLE 1 replaceFirst( hello WSO2 A hello , 'WSO2(.*)A', 'XXXX') This returns a string after replacing the first substring with the given replacement string. In this scenario, the output is \"hello XXXX hello\".","title":"replaceFirst (Function)"},{"location":"api/4.0.24/#reverse-function","text":"Returns the input string in the reverse order character-wise and string-wise. Syntax STRING str:reverse( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be reversed. STRING No No Examples EXAMPLE 1 reverse( Hello World ) This outputs a string value by reversing the incoming input.string . In this scenario, the output is \"dlroW olleH\".","title":"reverse (Function)"},{"location":"api/4.0.24/#split-function","text":"Splits the input.string into substrings using the value parsed in the split.string and returns the substring at the position specified in the group.number . Syntax STRING str:split( STRING input.string, STRING split.string, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No split.string The string value to be used to split the input.string . STRING No No group.number The index of the split group INT No No Examples EXAMPLE 1 split( WSO2,ABM,NSFT , , , 0) This splits the given input.string by given split.string and returns the string in the index given by group.number. In this scenario, the output will is \"WSO2\".","title":"split (Function)"},{"location":"api/4.0.24/#strcmp-function","text":"Compares two strings lexicographically and returns an integer value. If both strings are equal, 0 is returned. If the first string is lexicographically greater than the second string, a positive value is returned. If the first string is lexicographically greater than the second string, a negative value is returned. Syntax INT str:strcmp( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument that should be compared with the first argument lexicographically. STRING No No Examples EXAMPLE 1 strcmp( AbCDefghiJ KLMN , 'Hello') This compares two strings lexicographically and outputs an integer value","title":"strcmp (Function)"},{"location":"api/4.0.24/#substr-function","text":"Returns a substring of the input string by considering a subset or all of the following factors: starting index, length, regular expression, and regex group number. Syntax STRING str:substr( STRING input.string, INT begin.index, INT length, STRING regex, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be processed. STRING No No begin.index Starting index to consider for the substring. INT No No length The length of the substring. INT No No regex The regular expression that should be matched with the input string.. STRING No No group.number The regex group number INT No No Examples EXAMPLE 1 substr( AbCDefghiJ KLMN , 4) This outputs the substring based on the given begin.index . In this scenario, the output is \"efghiJ KLMN\". EXAMPLE 2 substr( AbCDefghiJ KLMN , 2, 4) This outputs the substring based on the given begin.index and length. In this scenario, the output is \"CDef\". EXAMPLE 3 substr( WSO2D efghiJ KLMN , '^WSO2(.*)') This outputs the substring by applying the regex. In this scenario, the output is \"WSO2D efghiJ KLMN\". EXAMPLE 4 substr( WSO2 cep WSO2 XX E hi hA WSO2 heAllo , 'WSO2(.*)A(.*)', 2) This outputs the substring by applying the regex and considering the group.number . In this scenario, the output is \" ello\".","title":"substr (Function)"},{"location":"api/4.0.24/#trim-function","text":"Returns a copy of the input string without the leading and trailing whitespace (if any). Syntax STRING str:trim( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that needs to be trimmed. STRING No No Examples EXAMPLE 1 trim( AbCDefghiJ KLMN ) This returns a copy of the input.string with the leading and/or trailing white-spaces omitted. In this scenario, the output is \"AbCDefghiJ KLMN\".","title":"trim (Function)"},{"location":"api/4.0.24/#unhex-function","text":"Returns a string by converting the hexadecimal characters in the input string. Syntax STRING str:unhex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The hexadecimal input string that needs to be converted to string. STRING No No Examples EXAMPLE 1 unhex( 4d7953514c ) This converts the hexadecimal value to string","title":"unhex (Function)"},{"location":"api/4.0.24/#upper-function","text":"Converts the simple letters in the input string to the equivalent capital/block letters. Syntax STRING str:upper( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be converted to the upper case (equivalent capital/block letters). STRING No No Examples EXAMPLE 1 upper( Hello World ) This converts the simple letters in the input.string to theequivalent capital letters. In this scenario, the output is \"HELLO WORLD\".","title":"upper (Function)"},{"location":"api/4.0.24/#tokenize-stream-processor","text":"Splits the input string to tokens using the given regular expression and returns the resultant tokens. Syntax str:tokenize( STRING input.string, STRING regex, BOOL distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input text which should be split. STRING No No regex The string value to be used to tokenize the 'input.string'. STRING No No distinct Flag to return only distinct values false BOOL Yes No Extra Return Attributes Name Description Possible Types token Attribute which contains a single token. STRING Examples EXAMPLE 1 define stream inputStream (str string); @info(name = 'query1') from inputStream#str:tokenize(str , ',') select text insert into outputStream; This query performs tokenization for the given string. If the str is \"Android,Windows8,iOS\", then 3 events containing token attribute value, Android , Windows8 , iOS in order.","title":"tokenize (Stream Processor)"},{"location":"api/4.0.25/","text":"API Docs - v4.0.25 Str groupConcat (Aggregate Function) This function aggregates the received events by concatenating the keys in those events using a separator, e.g.,a comma (,) or a hyphen (-), and returns the concatenated key string. Syntax STRING str:groupConcat( STRING key, STRING separator, STRING distinct, STRING order) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key The string that needs to be aggregated. STRING No No separator The separator that separates each string key after concatenating the keys. , STRING Yes No distinct This is used to only have distinct values in the concatenated string that is returned. false STRING Yes No order This parameter accepts 'ASC' or 'DESC' strings to sort the string keys in either ascending or descending order respectively. No order STRING Yes No Examples EXAMPLE 1 from InputStream#window.time(5 min) select str:groupConcat( key ) as groupedKeys input OutputStream; When we input events having values for the key as 'A' , 'B' , 'S' , 'C' , 'A' , it returns \"A,B,S,C,A\" to the 'OutputStream'. EXAMPLE 2 from InputStream#window.time(5 min) select groupConcat( key , - ,true, ASC ) as groupedKeys input OutputStream; When we input events having values for the key as 'A' , 'B' , 'S' , 'C' , 'A' , specify the seperator as hyphen and choose the order to be ascending, the function returns \"A-B-C-S\" to the 'OutputStream'. charAt (Function) This function returns the 'char' value that is present at the given index position. of the input string. Syntax STRING str:charAt( STRING input.value, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.value The input string of which the char value at the given position needs to be returned. STRING No No index The variable that specifies the index of the char value that needs to be returned. INT No No Examples EXAMPLE 1 charAt( WSO2 , 1) In this case, the functiion returns the character that exists at index 1. Hence, it returns 'S'. coalesce (Function) This returns the first input parameter value of the given argument, that is not null. Syntax INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT str:coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have one or more input parameters in any data type. However, all the specified parameters are required to be of the same type. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No No Examples EXAMPLE 1 coalesce(null, BBB , CCC ) This returns the first input parameter that is not null. In this example, it returns \"BBB\". concat (Function) This function returns a string value that is obtained as a result of concatenating two or more input string values. Syntax STRING str:concat( STRING argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn This can have two or more string type input parameters. STRING No No Examples EXAMPLE 1 concat( D533 , 8JU^ , XYZ ) This returns a string value by concatenating two or more given arguments. In the example shown above, it returns \"D5338JU^XYZ\". contains (Function) This function returns true if the input.string contains the specified sequence of char values in the search.string . Syntax BOOL str:contains( STRING input.string, STRING search.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string Input string value. STRING No No search.string The string value to be searched for in the input.string . STRING No No Examples EXAMPLE 1 contains( 21 products are produced by WSO2 currently , WSO2 ) This returns a boolean value as the output. In this case, it returns true . equalsIgnoreCase (Function) This returns a boolean value by comparing two strings lexicographically without considering the letter case. Syntax BOOL str:equalsIgnoreCase( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument. This is compared with the first argument. STRING No No Examples EXAMPLE 1 equalsIgnoreCase( WSO2 , wso2 ) This returns a boolean value as the output. In this scenario, it returns \"true\". fillTemplate (Function) This extension replaces the templated positions that are marked with an index value in a specified template with the strings provided. Syntax STRING str:fillTemplate( STRING template, STRING|INT|LONG|DOUBLE|FLOAT|BOOL replacement.strings) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic template The string with templated fields that needs to be filled with the given strings. The format of the templated fields should be as follows: {{INDEX}} where 'INDEX' is an integer. This index is used to map the strings that are used to replace the templated fields. STRING No No replacement.strings The strings with which the templated positions in the template need to be replaced. The minimum of two arguments need to be included in the execution string. There is no upper limit on the number of arguments allowed to be included. STRING INT LONG DOUBLE FLOAT BOOL No No Examples EXAMPLE 1 str:fillTemplate( This is {{1}} for the {{2}} function , 'an example', 'fillTemplate') In this example, the template is 'This is {{1}} for the {{2}} function'.Here, the templated string {{1}} is replaced with the 1st string value provided, which is 'an example'. {{2}} is replaced with the 2nd string provided, which is 'fillTemplate' The complete return string is 'This is an example for the fillTemplate function'. hex (Function) This function returns a hexadecimal string by converting each byte of each character in the input string to two hexadecimal digits. Syntax STRING str:hex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the hexadecimal value. STRING No No Examples EXAMPLE 1 hex( MySQL ) This returns the hexadecimal value of the input.string. In this scenario, the output is \"4d7953514c\". length (Function) Returns the length of the input string. Syntax INT str:length( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the length. STRING No No Examples EXAMPLE 1 length( Hello World ) This outputs the length of the provided string. In this scenario, the, output is 11 . lower (Function) Converts the capital letters in the input string to the equivalent simple letters. Syntax STRING str:lower( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to convert to the lower case (i.e., equivalent simple letters). STRING No No Examples EXAMPLE 1 lower( WSO2 cep ) This converts the capital letters in the input.string to the equivalent simple letters. In this scenario, the output is \"wso2 cep \". regexp (Function) Returns a boolean value based on the matchability of the input string and the given regular expression. Syntax BOOL str:regexp( STRING input.string, STRING regex) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to match with the given regular expression. STRING No No regex The regular expression to be matched with the input string. STRING No No Examples EXAMPLE 1 regexp( WSO2 abcdh , WSO(.*h) ) This returns a boolean value after matching regular expression with the given string. In this scenario, it returns \"true\" as the output. repeat (Function) Repeats the input string for a specified number of times. Syntax STRING str:repeat( STRING input.string, INT times) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that is repeated the number of times as defined by the user. STRING No No times The number of times the input.string needs to be repeated . INT No No Examples EXAMPLE 1 repeat( StRing 1 , 3) This returns a string value by repeating the string for a specified number of times. In this scenario, the output is \"StRing 1StRing 1StRing 1\". replaceAll (Function) Finds all the substrings of the input string that matches with the given expression, and replaces them with the given replacement string. Syntax STRING str:replaceAll( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No regex The regular expression to be matched with the input string. STRING No No replacement.string The string with which each substring that matches the given expression should be replaced. STRING No No Examples EXAMPLE 1 replaceAll( hello hi hello , 'hello', 'test') This returns a string after replacing the substrings of the input string with the replacement string. In this scenario, the output is \"test hi test\" . replaceFirst (Function) Finds the first substring of the input string that matches with the given regular expression, and replaces itwith the given replacement string. Syntax STRING str:replaceFirst( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be replaced. STRING No No regex The regular expression with which the input string should be matched. STRING No No replacement.string The string with which the first substring of input string that matches the regular expression should be replaced. STRING No No Examples EXAMPLE 1 replaceFirst( hello WSO2 A hello , 'WSO2(.*)A', 'XXXX') This returns a string after replacing the first substring with the given replacement string. In this scenario, the output is \"hello XXXX hello\". reverse (Function) Returns the input string in the reverse order character-wise and string-wise. Syntax STRING str:reverse( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be reversed. STRING No No Examples EXAMPLE 1 reverse( Hello World ) This outputs a string value by reversing the incoming input.string . In this scenario, the output is \"dlroW olleH\". split (Function) Splits the input.string into substrings using the value parsed in the split.string and returns the substring at the position specified in the group.number . Syntax STRING str:split( STRING input.string, STRING split.string, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No split.string The string value to be used to split the input.string . STRING No No group.number The index of the split group INT No No Examples EXAMPLE 1 split( WSO2,ABM,NSFT , , , 0) This splits the given input.string by given split.string and returns the string in the index given by group.number. In this scenario, the output will is \"WSO2\". strcmp (Function) Compares two strings lexicographically and returns an integer value. If both strings are equal, 0 is returned. If the first string is lexicographically greater than the second string, a positive value is returned. If the first string is lexicographically greater than the second string, a negative value is returned. Syntax INT str:strcmp( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument that should be compared with the first argument lexicographically. STRING No No Examples EXAMPLE 1 strcmp( AbCDefghiJ KLMN , 'Hello') This compares two strings lexicographically and outputs an integer value. substr (Function) Returns a substring of the input string by considering a subset or all of the following factors: starting index, length, regular expression, and regex group number. Syntax STRING str:substr( STRING input.string, INT begin.index, INT length, STRING regex, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be processed. STRING No No begin.index Starting index to consider for the substring. INT No No length The length of the substring. INT No No regex The regular expression that should be matched with the input string. STRING No No group.number The regex group number INT No No Examples EXAMPLE 1 substr( AbCDefghiJ KLMN , 4) This outputs the substring based on the given begin.index . In this scenario, the output is \"efghiJ KLMN\". EXAMPLE 2 substr( AbCDefghiJ KLMN , 2, 4) This outputs the substring based on the given begin.index and length. In this scenario, the output is \"CDef\". EXAMPLE 3 substr( WSO2D efghiJ KLMN , '^WSO2(.*)') This outputs the substring by applying the regex. In this scenario, the output is \"WSO2D efghiJ KLMN\". EXAMPLE 4 substr( WSO2 cep WSO2 XX E hi hA WSO2 heAllo , 'WSO2(.*)A(.*)', 2) This outputs the substring by applying the regex and considering the group.number . In this scenario, the output is \" ello\". trim (Function) Returns a copy of the input string without the leading and trailing whitespace (if any). Syntax STRING str:trim( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that needs to be trimmed. STRING No No Examples EXAMPLE 1 trim( AbCDefghiJ KLMN ) This returns a copy of the input.string with the leading and/or trailing white-spaces omitted. In this scenario, the output is \"AbCDefghiJ KLMN\". unhex (Function) Returns a string by converting the hexadecimal characters in the input string. Syntax STRING str:unhex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The hexadecimal input string that needs to be converted to string. STRING No No Examples EXAMPLE 1 unhex( 4d7953514c ) This converts the hexadecimal value to string. upper (Function) Converts the simple letters in the input string to the equivalent capital/block letters. Syntax STRING str:upper( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be converted to the upper case (equivalent capital/block letters). STRING No No Examples EXAMPLE 1 upper( Hello World ) This converts the simple letters in the input.string to theequivalent capital letters. In this scenario, the output is \"HELLO WORLD\". tokenize (Stream Processor) This function splits the input string into tokens using a given regular expression and returns the split tokens. Syntax str:tokenize( STRING input.string, STRING regex, BOOL distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string which needs to be split. STRING No No regex The string value which is used to tokenize the 'input.string'. STRING No No distinct This flag is used to return only distinct values. false BOOL Yes No Extra Return Attributes Name Description Possible Types token The attribute which contains a single token. STRING Examples EXAMPLE 1 define stream inputStream (str string); @info(name = 'query1') from inputStream#str:tokenize(str , ',') select text insert into outputStream; This query performs tokenization on the given string. If the str is \"Android,Windows8,iOS\", then the string is split into 3 events containing the token attribute values, i.e., Android , Windows8 and iOS .","title":"4.0.25"},{"location":"api/4.0.25/#api-docs-v4025","text":"","title":"API Docs - v4.0.25"},{"location":"api/4.0.25/#str","text":"","title":"Str"},{"location":"api/4.0.25/#groupconcat-aggregate-function","text":"This function aggregates the received events by concatenating the keys in those events using a separator, e.g.,a comma (,) or a hyphen (-), and returns the concatenated key string. Syntax STRING str:groupConcat( STRING key, STRING separator, STRING distinct, STRING order) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key The string that needs to be aggregated. STRING No No separator The separator that separates each string key after concatenating the keys. , STRING Yes No distinct This is used to only have distinct values in the concatenated string that is returned. false STRING Yes No order This parameter accepts 'ASC' or 'DESC' strings to sort the string keys in either ascending or descending order respectively. No order STRING Yes No Examples EXAMPLE 1 from InputStream#window.time(5 min) select str:groupConcat( key ) as groupedKeys input OutputStream; When we input events having values for the key as 'A' , 'B' , 'S' , 'C' , 'A' , it returns \"A,B,S,C,A\" to the 'OutputStream'. EXAMPLE 2 from InputStream#window.time(5 min) select groupConcat( key , - ,true, ASC ) as groupedKeys input OutputStream; When we input events having values for the key as 'A' , 'B' , 'S' , 'C' , 'A' , specify the seperator as hyphen and choose the order to be ascending, the function returns \"A-B-C-S\" to the 'OutputStream'.","title":"groupConcat (Aggregate Function)"},{"location":"api/4.0.25/#charat-function","text":"This function returns the 'char' value that is present at the given index position. of the input string. Syntax STRING str:charAt( STRING input.value, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.value The input string of which the char value at the given position needs to be returned. STRING No No index The variable that specifies the index of the char value that needs to be returned. INT No No Examples EXAMPLE 1 charAt( WSO2 , 1) In this case, the functiion returns the character that exists at index 1. Hence, it returns 'S'.","title":"charAt (Function)"},{"location":"api/4.0.25/#coalesce-function","text":"This returns the first input parameter value of the given argument, that is not null. Syntax INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT str:coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have one or more input parameters in any data type. However, all the specified parameters are required to be of the same type. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No No Examples EXAMPLE 1 coalesce(null, BBB , CCC ) This returns the first input parameter that is not null. In this example, it returns \"BBB\".","title":"coalesce (Function)"},{"location":"api/4.0.25/#concat-function","text":"This function returns a string value that is obtained as a result of concatenating two or more input string values. Syntax STRING str:concat( STRING argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn This can have two or more string type input parameters. STRING No No Examples EXAMPLE 1 concat( D533 , 8JU^ , XYZ ) This returns a string value by concatenating two or more given arguments. In the example shown above, it returns \"D5338JU^XYZ\".","title":"concat (Function)"},{"location":"api/4.0.25/#contains-function","text":"This function returns true if the input.string contains the specified sequence of char values in the search.string . Syntax BOOL str:contains( STRING input.string, STRING search.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string Input string value. STRING No No search.string The string value to be searched for in the input.string . STRING No No Examples EXAMPLE 1 contains( 21 products are produced by WSO2 currently , WSO2 ) This returns a boolean value as the output. In this case, it returns true .","title":"contains (Function)"},{"location":"api/4.0.25/#equalsignorecase-function","text":"This returns a boolean value by comparing two strings lexicographically without considering the letter case. Syntax BOOL str:equalsIgnoreCase( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument. This is compared with the first argument. STRING No No Examples EXAMPLE 1 equalsIgnoreCase( WSO2 , wso2 ) This returns a boolean value as the output. In this scenario, it returns \"true\".","title":"equalsIgnoreCase (Function)"},{"location":"api/4.0.25/#filltemplate-function","text":"This extension replaces the templated positions that are marked with an index value in a specified template with the strings provided. Syntax STRING str:fillTemplate( STRING template, STRING|INT|LONG|DOUBLE|FLOAT|BOOL replacement.strings) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic template The string with templated fields that needs to be filled with the given strings. The format of the templated fields should be as follows: {{INDEX}} where 'INDEX' is an integer. This index is used to map the strings that are used to replace the templated fields. STRING No No replacement.strings The strings with which the templated positions in the template need to be replaced. The minimum of two arguments need to be included in the execution string. There is no upper limit on the number of arguments allowed to be included. STRING INT LONG DOUBLE FLOAT BOOL No No Examples EXAMPLE 1 str:fillTemplate( This is {{1}} for the {{2}} function , 'an example', 'fillTemplate') In this example, the template is 'This is {{1}} for the {{2}} function'.Here, the templated string {{1}} is replaced with the 1st string value provided, which is 'an example'. {{2}} is replaced with the 2nd string provided, which is 'fillTemplate' The complete return string is 'This is an example for the fillTemplate function'.","title":"fillTemplate (Function)"},{"location":"api/4.0.25/#hex-function","text":"This function returns a hexadecimal string by converting each byte of each character in the input string to two hexadecimal digits. Syntax STRING str:hex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the hexadecimal value. STRING No No Examples EXAMPLE 1 hex( MySQL ) This returns the hexadecimal value of the input.string. In this scenario, the output is \"4d7953514c\".","title":"hex (Function)"},{"location":"api/4.0.25/#length-function","text":"Returns the length of the input string. Syntax INT str:length( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the length. STRING No No Examples EXAMPLE 1 length( Hello World ) This outputs the length of the provided string. In this scenario, the, output is 11 .","title":"length (Function)"},{"location":"api/4.0.25/#lower-function","text":"Converts the capital letters in the input string to the equivalent simple letters. Syntax STRING str:lower( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to convert to the lower case (i.e., equivalent simple letters). STRING No No Examples EXAMPLE 1 lower( WSO2 cep ) This converts the capital letters in the input.string to the equivalent simple letters. In this scenario, the output is \"wso2 cep \".","title":"lower (Function)"},{"location":"api/4.0.25/#regexp-function","text":"Returns a boolean value based on the matchability of the input string and the given regular expression. Syntax BOOL str:regexp( STRING input.string, STRING regex) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to match with the given regular expression. STRING No No regex The regular expression to be matched with the input string. STRING No No Examples EXAMPLE 1 regexp( WSO2 abcdh , WSO(.*h) ) This returns a boolean value after matching regular expression with the given string. In this scenario, it returns \"true\" as the output.","title":"regexp (Function)"},{"location":"api/4.0.25/#repeat-function","text":"Repeats the input string for a specified number of times. Syntax STRING str:repeat( STRING input.string, INT times) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that is repeated the number of times as defined by the user. STRING No No times The number of times the input.string needs to be repeated . INT No No Examples EXAMPLE 1 repeat( StRing 1 , 3) This returns a string value by repeating the string for a specified number of times. In this scenario, the output is \"StRing 1StRing 1StRing 1\".","title":"repeat (Function)"},{"location":"api/4.0.25/#replaceall-function","text":"Finds all the substrings of the input string that matches with the given expression, and replaces them with the given replacement string. Syntax STRING str:replaceAll( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No regex The regular expression to be matched with the input string. STRING No No replacement.string The string with which each substring that matches the given expression should be replaced. STRING No No Examples EXAMPLE 1 replaceAll( hello hi hello , 'hello', 'test') This returns a string after replacing the substrings of the input string with the replacement string. In this scenario, the output is \"test hi test\" .","title":"replaceAll (Function)"},{"location":"api/4.0.25/#replacefirst-function","text":"Finds the first substring of the input string that matches with the given regular expression, and replaces itwith the given replacement string. Syntax STRING str:replaceFirst( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be replaced. STRING No No regex The regular expression with which the input string should be matched. STRING No No replacement.string The string with which the first substring of input string that matches the regular expression should be replaced. STRING No No Examples EXAMPLE 1 replaceFirst( hello WSO2 A hello , 'WSO2(.*)A', 'XXXX') This returns a string after replacing the first substring with the given replacement string. In this scenario, the output is \"hello XXXX hello\".","title":"replaceFirst (Function)"},{"location":"api/4.0.25/#reverse-function","text":"Returns the input string in the reverse order character-wise and string-wise. Syntax STRING str:reverse( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be reversed. STRING No No Examples EXAMPLE 1 reverse( Hello World ) This outputs a string value by reversing the incoming input.string . In this scenario, the output is \"dlroW olleH\".","title":"reverse (Function)"},{"location":"api/4.0.25/#split-function","text":"Splits the input.string into substrings using the value parsed in the split.string and returns the substring at the position specified in the group.number . Syntax STRING str:split( STRING input.string, STRING split.string, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No split.string The string value to be used to split the input.string . STRING No No group.number The index of the split group INT No No Examples EXAMPLE 1 split( WSO2,ABM,NSFT , , , 0) This splits the given input.string by given split.string and returns the string in the index given by group.number. In this scenario, the output will is \"WSO2\".","title":"split (Function)"},{"location":"api/4.0.25/#strcmp-function","text":"Compares two strings lexicographically and returns an integer value. If both strings are equal, 0 is returned. If the first string is lexicographically greater than the second string, a positive value is returned. If the first string is lexicographically greater than the second string, a negative value is returned. Syntax INT str:strcmp( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument that should be compared with the first argument lexicographically. STRING No No Examples EXAMPLE 1 strcmp( AbCDefghiJ KLMN , 'Hello') This compares two strings lexicographically and outputs an integer value.","title":"strcmp (Function)"},{"location":"api/4.0.25/#substr-function","text":"Returns a substring of the input string by considering a subset or all of the following factors: starting index, length, regular expression, and regex group number. Syntax STRING str:substr( STRING input.string, INT begin.index, INT length, STRING regex, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be processed. STRING No No begin.index Starting index to consider for the substring. INT No No length The length of the substring. INT No No regex The regular expression that should be matched with the input string. STRING No No group.number The regex group number INT No No Examples EXAMPLE 1 substr( AbCDefghiJ KLMN , 4) This outputs the substring based on the given begin.index . In this scenario, the output is \"efghiJ KLMN\". EXAMPLE 2 substr( AbCDefghiJ KLMN , 2, 4) This outputs the substring based on the given begin.index and length. In this scenario, the output is \"CDef\". EXAMPLE 3 substr( WSO2D efghiJ KLMN , '^WSO2(.*)') This outputs the substring by applying the regex. In this scenario, the output is \"WSO2D efghiJ KLMN\". EXAMPLE 4 substr( WSO2 cep WSO2 XX E hi hA WSO2 heAllo , 'WSO2(.*)A(.*)', 2) This outputs the substring by applying the regex and considering the group.number . In this scenario, the output is \" ello\".","title":"substr (Function)"},{"location":"api/4.0.25/#trim-function","text":"Returns a copy of the input string without the leading and trailing whitespace (if any). Syntax STRING str:trim( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that needs to be trimmed. STRING No No Examples EXAMPLE 1 trim( AbCDefghiJ KLMN ) This returns a copy of the input.string with the leading and/or trailing white-spaces omitted. In this scenario, the output is \"AbCDefghiJ KLMN\".","title":"trim (Function)"},{"location":"api/4.0.25/#unhex-function","text":"Returns a string by converting the hexadecimal characters in the input string. Syntax STRING str:unhex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The hexadecimal input string that needs to be converted to string. STRING No No Examples EXAMPLE 1 unhex( 4d7953514c ) This converts the hexadecimal value to string.","title":"unhex (Function)"},{"location":"api/4.0.25/#upper-function","text":"Converts the simple letters in the input string to the equivalent capital/block letters. Syntax STRING str:upper( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be converted to the upper case (equivalent capital/block letters). STRING No No Examples EXAMPLE 1 upper( Hello World ) This converts the simple letters in the input.string to theequivalent capital letters. In this scenario, the output is \"HELLO WORLD\".","title":"upper (Function)"},{"location":"api/4.0.25/#tokenize-stream-processor","text":"This function splits the input string into tokens using a given regular expression and returns the split tokens. Syntax str:tokenize( STRING input.string, STRING regex, BOOL distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string which needs to be split. STRING No No regex The string value which is used to tokenize the 'input.string'. STRING No No distinct This flag is used to return only distinct values. false BOOL Yes No Extra Return Attributes Name Description Possible Types token The attribute which contains a single token. STRING Examples EXAMPLE 1 define stream inputStream (str string); @info(name = 'query1') from inputStream#str:tokenize(str , ',') select text insert into outputStream; This query performs tokenization on the given string. If the str is \"Android,Windows8,iOS\", then the string is split into 3 events containing the token attribute values, i.e., Android , Windows8 and iOS .","title":"tokenize (Stream Processor)"},{"location":"api/4.0.26/","text":"API Docs - v4.0.26 Str groupConcat (Aggregate Function) This function aggregates the received events by concatenating the keys in those events using a separator, e.g.,a comma (,) or a hyphen (-), and returns the concatenated key string. Syntax STRING str:groupConcat( STRING key, STRING separator, STRING distinct, STRING order) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key The string that needs to be aggregated. STRING No No separator The separator that separates each string key after concatenating the keys. , STRING Yes No distinct This is used to only have distinct values in the concatenated string that is returned. false STRING Yes No order This parameter accepts 'ASC' or 'DESC' strings to sort the string keys in either ascending or descending order respectively. No order STRING Yes No Examples EXAMPLE 1 from InputStream#window.time(5 min) select str:groupConcat( key ) as groupedKeys input OutputStream; When we input events having values for the key as 'A' , 'B' , 'S' , 'C' , 'A' , it returns \"A,B,S,C,A\" to the 'OutputStream'. EXAMPLE 2 from InputStream#window.time(5 min) select groupConcat( key , - ,true, ASC ) as groupedKeys input OutputStream; When we input events having values for the key as 'A' , 'B' , 'S' , 'C' , 'A' , specify the seperator as hyphen and choose the order to be ascending, the function returns \"A-B-C-S\" to the 'OutputStream'. charAt (Function) This function returns the 'char' value that is present at the given index position. of the input string. Syntax STRING str:charAt( STRING input.value, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.value The input string of which the char value at the given position needs to be returned. STRING No No index The variable that specifies the index of the char value that needs to be returned. INT No No Examples EXAMPLE 1 charAt( WSO2 , 1) In this case, the functiion returns the character that exists at index 1. Hence, it returns 'S'. coalesce (Function) This returns the first input parameter value of the given argument, that is not null. Syntax INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT str:coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have one or more input parameters in any data type. However, all the specified parameters are required to be of the same type. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No No Examples EXAMPLE 1 coalesce(null, BBB , CCC ) This returns the first input parameter that is not null. In this example, it returns \"BBB\". concat (Function) This function returns a string value that is obtained as a result of concatenating two or more input string values. Syntax STRING str:concat( STRING argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn This can have two or more string type input parameters. STRING No No Examples EXAMPLE 1 concat( D533 , 8JU^ , XYZ ) This returns a string value by concatenating two or more given arguments. In the example shown above, it returns \"D5338JU^XYZ\". contains (Function) This function returns true if the input.string contains the specified sequence of char values in the search.string . Syntax BOOL str:contains( STRING input.string, STRING search.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string Input string value. STRING No No search.string The string value to be searched for in the input.string . STRING No No Examples EXAMPLE 1 contains( 21 products are produced by WSO2 currently , WSO2 ) This returns a boolean value as the output. In this case, it returns true . equalsIgnoreCase (Function) This returns a boolean value by comparing two strings lexicographically without considering the letter case. Syntax BOOL str:equalsIgnoreCase( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument. This is compared with the first argument. STRING No No Examples EXAMPLE 1 equalsIgnoreCase( WSO2 , wso2 ) This returns a boolean value as the output. In this scenario, it returns \"true\". fillTemplate (Function) This extension replaces the templated positions that are marked with an index value in a specified template with the strings provided. Syntax STRING str:fillTemplate( STRING template, STRING|INT|LONG|DOUBLE|FLOAT|BOOL replacement.strings) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic template The string with templated fields that needs to be filled with the given strings. The format of the templated fields should be as follows: {{INDEX}} where 'INDEX' is an integer. This index is used to map the strings that are used to replace the templated fields. STRING No No replacement.strings The strings with which the templated positions in the template need to be replaced. The minimum of two arguments need to be included in the execution string. There is no upper limit on the number of arguments allowed to be included. STRING INT LONG DOUBLE FLOAT BOOL No No Examples EXAMPLE 1 str:fillTemplate( This is {{1}} for the {{2}} function , 'an example', 'fillTemplate') In this example, the template is 'This is {{1}} for the {{2}} function'.Here, the templated string {{1}} is replaced with the 1st string value provided, which is 'an example'. {{2}} is replaced with the 2nd string provided, which is 'fillTemplate' The complete return string is 'This is an example for the fillTemplate function'. hex (Function) This function returns a hexadecimal string by converting each byte of each character in the input string to two hexadecimal digits. Syntax STRING str:hex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the hexadecimal value. STRING No No Examples EXAMPLE 1 hex( MySQL ) This returns the hexadecimal value of the input.string. In this scenario, the output is \"4d7953514c\". length (Function) Returns the length of the input string. Syntax INT str:length( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the length. STRING No No Examples EXAMPLE 1 length( Hello World ) This outputs the length of the provided string. In this scenario, the, output is 11 . lower (Function) Converts the capital letters in the input string to the equivalent simple letters. Syntax STRING str:lower( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to convert to the lower case (i.e., equivalent simple letters). STRING No No Examples EXAMPLE 1 lower( WSO2 cep ) This converts the capital letters in the input.string to the equivalent simple letters. In this scenario, the output is \"wso2 cep \". regexp (Function) Returns a boolean value based on the matchability of the input string and the given regular expression. Syntax BOOL str:regexp( STRING input.string, STRING regex) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to match with the given regular expression. STRING No No regex The regular expression to be matched with the input string. STRING No No Examples EXAMPLE 1 regexp( WSO2 abcdh , WSO(.*h) ) This returns a boolean value after matching regular expression with the given string. In this scenario, it returns \"true\" as the output. repeat (Function) Repeats the input string for a specified number of times. Syntax STRING str:repeat( STRING input.string, INT times) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that is repeated the number of times as defined by the user. STRING No No times The number of times the input.string needs to be repeated . INT No No Examples EXAMPLE 1 repeat( StRing 1 , 3) This returns a string value by repeating the string for a specified number of times. In this scenario, the output is \"StRing 1StRing 1StRing 1\". replaceAll (Function) Finds all the substrings of the input string that matches with the given expression, and replaces them with the given replacement string. Syntax STRING str:replaceAll( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No regex The regular expression to be matched with the input string. STRING No No replacement.string The string with which each substring that matches the given expression should be replaced. STRING No No Examples EXAMPLE 1 replaceAll( hello hi hello , 'hello', 'test') This returns a string after replacing the substrings of the input string with the replacement string. In this scenario, the output is \"test hi test\" . replaceFirst (Function) Finds the first substring of the input string that matches with the given regular expression, and replaces itwith the given replacement string. Syntax STRING str:replaceFirst( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be replaced. STRING No No regex The regular expression with which the input string should be matched. STRING No No replacement.string The string with which the first substring of input string that matches the regular expression should be replaced. STRING No No Examples EXAMPLE 1 replaceFirst( hello WSO2 A hello , 'WSO2(.*)A', 'XXXX') This returns a string after replacing the first substring with the given replacement string. In this scenario, the output is \"hello XXXX hello\". reverse (Function) Returns the input string in the reverse order character-wise and string-wise. Syntax STRING str:reverse( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be reversed. STRING No No Examples EXAMPLE 1 reverse( Hello World ) This outputs a string value by reversing the incoming input.string . In this scenario, the output is \"dlroW olleH\". split (Function) Splits the input.string into substrings using the value parsed in the split.string and returns the substring at the position specified in the group.number . Syntax STRING str:split( STRING input.string, STRING split.string, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No split.string The string value to be used to split the input.string . STRING No No group.number The index of the split group INT No No Examples EXAMPLE 1 split( WSO2,ABM,NSFT , , , 0) This splits the given input.string by given split.string and returns the string in the index given by group.number. In this scenario, the output will is \"WSO2\". strcmp (Function) Compares two strings lexicographically and returns an integer value. If both strings are equal, 0 is returned. If the first string is lexicographically greater than the second string, a positive value is returned. If the first string is lexicographically greater than the second string, a negative value is returned. Syntax INT str:strcmp( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument that should be compared with the first argument lexicographically. STRING No No Examples EXAMPLE 1 strcmp( AbCDefghiJ KLMN , 'Hello') This compares two strings lexicographically and outputs an integer value. substr (Function) Returns a substring of the input string by considering a subset or all of the following factors: starting index, length, regular expression, and regex group number. Syntax STRING str:substr( STRING input.string, INT begin.index, INT length, STRING regex, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be processed. STRING No No begin.index Starting index to consider for the substring. INT No No length The length of the substring. INT No No regex The regular expression that should be matched with the input string. STRING No No group.number The regex group number INT No No Examples EXAMPLE 1 substr( AbCDefghiJ KLMN , 4) This outputs the substring based on the given begin.index . In this scenario, the output is \"efghiJ KLMN\". EXAMPLE 2 substr( AbCDefghiJ KLMN , 2, 4) This outputs the substring based on the given begin.index and length. In this scenario, the output is \"CDef\". EXAMPLE 3 substr( WSO2D efghiJ KLMN , '^WSO2(.*)') This outputs the substring by applying the regex. In this scenario, the output is \"WSO2D efghiJ KLMN\". EXAMPLE 4 substr( WSO2 cep WSO2 XX E hi hA WSO2 heAllo , 'WSO2(.*)A(.*)', 2) This outputs the substring by applying the regex and considering the group.number . In this scenario, the output is \" ello\". trim (Function) Returns a copy of the input string without the leading and trailing whitespace (if any). Syntax STRING str:trim( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that needs to be trimmed. STRING No No Examples EXAMPLE 1 trim( AbCDefghiJ KLMN ) This returns a copy of the input.string with the leading and/or trailing white-spaces omitted. In this scenario, the output is \"AbCDefghiJ KLMN\". unhex (Function) Returns a string by converting the hexadecimal characters in the input string. Syntax STRING str:unhex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The hexadecimal input string that needs to be converted to string. STRING No No Examples EXAMPLE 1 unhex( 4d7953514c ) This converts the hexadecimal value to string. upper (Function) Converts the simple letters in the input string to the equivalent capital/block letters. Syntax STRING str:upper( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be converted to the upper case (equivalent capital/block letters). STRING No No Examples EXAMPLE 1 upper( Hello World ) This converts the simple letters in the input.string to theequivalent capital letters. In this scenario, the output is \"HELLO WORLD\". tokenize (Stream Processor) This function splits the input string into tokens using a given regular expression and returns the split tokens. Syntax str:tokenize( STRING input.string, STRING regex, BOOL distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string which needs to be split. STRING No No regex The string value which is used to tokenize the 'input.string'. STRING No No distinct This flag is used to return only distinct values. false BOOL Yes No Extra Return Attributes Name Description Possible Types token The attribute which contains a single token. STRING Examples EXAMPLE 1 define stream inputStream (str string); @info(name = 'query1') from inputStream#str:tokenize(str , ',') select text insert into outputStream; This query performs tokenization on the given string. If the str is \"Android,Windows8,iOS\", then the string is split into 3 events containing the token attribute values, i.e., Android , Windows8 and iOS .","title":"4.0.26"},{"location":"api/4.0.26/#api-docs-v4026","text":"","title":"API Docs - v4.0.26"},{"location":"api/4.0.26/#str","text":"","title":"Str"},{"location":"api/4.0.26/#groupconcat-aggregate-function","text":"This function aggregates the received events by concatenating the keys in those events using a separator, e.g.,a comma (,) or a hyphen (-), and returns the concatenated key string. Syntax STRING str:groupConcat( STRING key, STRING separator, STRING distinct, STRING order) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key The string that needs to be aggregated. STRING No No separator The separator that separates each string key after concatenating the keys. , STRING Yes No distinct This is used to only have distinct values in the concatenated string that is returned. false STRING Yes No order This parameter accepts 'ASC' or 'DESC' strings to sort the string keys in either ascending or descending order respectively. No order STRING Yes No Examples EXAMPLE 1 from InputStream#window.time(5 min) select str:groupConcat( key ) as groupedKeys input OutputStream; When we input events having values for the key as 'A' , 'B' , 'S' , 'C' , 'A' , it returns \"A,B,S,C,A\" to the 'OutputStream'. EXAMPLE 2 from InputStream#window.time(5 min) select groupConcat( key , - ,true, ASC ) as groupedKeys input OutputStream; When we input events having values for the key as 'A' , 'B' , 'S' , 'C' , 'A' , specify the seperator as hyphen and choose the order to be ascending, the function returns \"A-B-C-S\" to the 'OutputStream'.","title":"groupConcat (Aggregate Function)"},{"location":"api/4.0.26/#charat-function","text":"This function returns the 'char' value that is present at the given index position. of the input string. Syntax STRING str:charAt( STRING input.value, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.value The input string of which the char value at the given position needs to be returned. STRING No No index The variable that specifies the index of the char value that needs to be returned. INT No No Examples EXAMPLE 1 charAt( WSO2 , 1) In this case, the functiion returns the character that exists at index 1. Hence, it returns 'S'.","title":"charAt (Function)"},{"location":"api/4.0.26/#coalesce-function","text":"This returns the first input parameter value of the given argument, that is not null. Syntax INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT str:coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have one or more input parameters in any data type. However, all the specified parameters are required to be of the same type. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No No Examples EXAMPLE 1 coalesce(null, BBB , CCC ) This returns the first input parameter that is not null. In this example, it returns \"BBB\".","title":"coalesce (Function)"},{"location":"api/4.0.26/#concat-function","text":"This function returns a string value that is obtained as a result of concatenating two or more input string values. Syntax STRING str:concat( STRING argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn This can have two or more string type input parameters. STRING No No Examples EXAMPLE 1 concat( D533 , 8JU^ , XYZ ) This returns a string value by concatenating two or more given arguments. In the example shown above, it returns \"D5338JU^XYZ\".","title":"concat (Function)"},{"location":"api/4.0.26/#contains-function","text":"This function returns true if the input.string contains the specified sequence of char values in the search.string . Syntax BOOL str:contains( STRING input.string, STRING search.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string Input string value. STRING No No search.string The string value to be searched for in the input.string . STRING No No Examples EXAMPLE 1 contains( 21 products are produced by WSO2 currently , WSO2 ) This returns a boolean value as the output. In this case, it returns true .","title":"contains (Function)"},{"location":"api/4.0.26/#equalsignorecase-function","text":"This returns a boolean value by comparing two strings lexicographically without considering the letter case. Syntax BOOL str:equalsIgnoreCase( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument. This is compared with the first argument. STRING No No Examples EXAMPLE 1 equalsIgnoreCase( WSO2 , wso2 ) This returns a boolean value as the output. In this scenario, it returns \"true\".","title":"equalsIgnoreCase (Function)"},{"location":"api/4.0.26/#filltemplate-function","text":"This extension replaces the templated positions that are marked with an index value in a specified template with the strings provided. Syntax STRING str:fillTemplate( STRING template, STRING|INT|LONG|DOUBLE|FLOAT|BOOL replacement.strings) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic template The string with templated fields that needs to be filled with the given strings. The format of the templated fields should be as follows: {{INDEX}} where 'INDEX' is an integer. This index is used to map the strings that are used to replace the templated fields. STRING No No replacement.strings The strings with which the templated positions in the template need to be replaced. The minimum of two arguments need to be included in the execution string. There is no upper limit on the number of arguments allowed to be included. STRING INT LONG DOUBLE FLOAT BOOL No No Examples EXAMPLE 1 str:fillTemplate( This is {{1}} for the {{2}} function , 'an example', 'fillTemplate') In this example, the template is 'This is {{1}} for the {{2}} function'.Here, the templated string {{1}} is replaced with the 1st string value provided, which is 'an example'. {{2}} is replaced with the 2nd string provided, which is 'fillTemplate' The complete return string is 'This is an example for the fillTemplate function'.","title":"fillTemplate (Function)"},{"location":"api/4.0.26/#hex-function","text":"This function returns a hexadecimal string by converting each byte of each character in the input string to two hexadecimal digits. Syntax STRING str:hex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the hexadecimal value. STRING No No Examples EXAMPLE 1 hex( MySQL ) This returns the hexadecimal value of the input.string. In this scenario, the output is \"4d7953514c\".","title":"hex (Function)"},{"location":"api/4.0.26/#length-function","text":"Returns the length of the input string. Syntax INT str:length( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the length. STRING No No Examples EXAMPLE 1 length( Hello World ) This outputs the length of the provided string. In this scenario, the, output is 11 .","title":"length (Function)"},{"location":"api/4.0.26/#lower-function","text":"Converts the capital letters in the input string to the equivalent simple letters. Syntax STRING str:lower( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to convert to the lower case (i.e., equivalent simple letters). STRING No No Examples EXAMPLE 1 lower( WSO2 cep ) This converts the capital letters in the input.string to the equivalent simple letters. In this scenario, the output is \"wso2 cep \".","title":"lower (Function)"},{"location":"api/4.0.26/#regexp-function","text":"Returns a boolean value based on the matchability of the input string and the given regular expression. Syntax BOOL str:regexp( STRING input.string, STRING regex) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to match with the given regular expression. STRING No No regex The regular expression to be matched with the input string. STRING No No Examples EXAMPLE 1 regexp( WSO2 abcdh , WSO(.*h) ) This returns a boolean value after matching regular expression with the given string. In this scenario, it returns \"true\" as the output.","title":"regexp (Function)"},{"location":"api/4.0.26/#repeat-function","text":"Repeats the input string for a specified number of times. Syntax STRING str:repeat( STRING input.string, INT times) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that is repeated the number of times as defined by the user. STRING No No times The number of times the input.string needs to be repeated . INT No No Examples EXAMPLE 1 repeat( StRing 1 , 3) This returns a string value by repeating the string for a specified number of times. In this scenario, the output is \"StRing 1StRing 1StRing 1\".","title":"repeat (Function)"},{"location":"api/4.0.26/#replaceall-function","text":"Finds all the substrings of the input string that matches with the given expression, and replaces them with the given replacement string. Syntax STRING str:replaceAll( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No regex The regular expression to be matched with the input string. STRING No No replacement.string The string with which each substring that matches the given expression should be replaced. STRING No No Examples EXAMPLE 1 replaceAll( hello hi hello , 'hello', 'test') This returns a string after replacing the substrings of the input string with the replacement string. In this scenario, the output is \"test hi test\" .","title":"replaceAll (Function)"},{"location":"api/4.0.26/#replacefirst-function","text":"Finds the first substring of the input string that matches with the given regular expression, and replaces itwith the given replacement string. Syntax STRING str:replaceFirst( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be replaced. STRING No No regex The regular expression with which the input string should be matched. STRING No No replacement.string The string with which the first substring of input string that matches the regular expression should be replaced. STRING No No Examples EXAMPLE 1 replaceFirst( hello WSO2 A hello , 'WSO2(.*)A', 'XXXX') This returns a string after replacing the first substring with the given replacement string. In this scenario, the output is \"hello XXXX hello\".","title":"replaceFirst (Function)"},{"location":"api/4.0.26/#reverse-function","text":"Returns the input string in the reverse order character-wise and string-wise. Syntax STRING str:reverse( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be reversed. STRING No No Examples EXAMPLE 1 reverse( Hello World ) This outputs a string value by reversing the incoming input.string . In this scenario, the output is \"dlroW olleH\".","title":"reverse (Function)"},{"location":"api/4.0.26/#split-function","text":"Splits the input.string into substrings using the value parsed in the split.string and returns the substring at the position specified in the group.number . Syntax STRING str:split( STRING input.string, STRING split.string, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No split.string The string value to be used to split the input.string . STRING No No group.number The index of the split group INT No No Examples EXAMPLE 1 split( WSO2,ABM,NSFT , , , 0) This splits the given input.string by given split.string and returns the string in the index given by group.number. In this scenario, the output will is \"WSO2\".","title":"split (Function)"},{"location":"api/4.0.26/#strcmp-function","text":"Compares two strings lexicographically and returns an integer value. If both strings are equal, 0 is returned. If the first string is lexicographically greater than the second string, a positive value is returned. If the first string is lexicographically greater than the second string, a negative value is returned. Syntax INT str:strcmp( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument that should be compared with the first argument lexicographically. STRING No No Examples EXAMPLE 1 strcmp( AbCDefghiJ KLMN , 'Hello') This compares two strings lexicographically and outputs an integer value.","title":"strcmp (Function)"},{"location":"api/4.0.26/#substr-function","text":"Returns a substring of the input string by considering a subset or all of the following factors: starting index, length, regular expression, and regex group number. Syntax STRING str:substr( STRING input.string, INT begin.index, INT length, STRING regex, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be processed. STRING No No begin.index Starting index to consider for the substring. INT No No length The length of the substring. INT No No regex The regular expression that should be matched with the input string. STRING No No group.number The regex group number INT No No Examples EXAMPLE 1 substr( AbCDefghiJ KLMN , 4) This outputs the substring based on the given begin.index . In this scenario, the output is \"efghiJ KLMN\". EXAMPLE 2 substr( AbCDefghiJ KLMN , 2, 4) This outputs the substring based on the given begin.index and length. In this scenario, the output is \"CDef\". EXAMPLE 3 substr( WSO2D efghiJ KLMN , '^WSO2(.*)') This outputs the substring by applying the regex. In this scenario, the output is \"WSO2D efghiJ KLMN\". EXAMPLE 4 substr( WSO2 cep WSO2 XX E hi hA WSO2 heAllo , 'WSO2(.*)A(.*)', 2) This outputs the substring by applying the regex and considering the group.number . In this scenario, the output is \" ello\".","title":"substr (Function)"},{"location":"api/4.0.26/#trim-function","text":"Returns a copy of the input string without the leading and trailing whitespace (if any). Syntax STRING str:trim( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that needs to be trimmed. STRING No No Examples EXAMPLE 1 trim( AbCDefghiJ KLMN ) This returns a copy of the input.string with the leading and/or trailing white-spaces omitted. In this scenario, the output is \"AbCDefghiJ KLMN\".","title":"trim (Function)"},{"location":"api/4.0.26/#unhex-function","text":"Returns a string by converting the hexadecimal characters in the input string. Syntax STRING str:unhex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The hexadecimal input string that needs to be converted to string. STRING No No Examples EXAMPLE 1 unhex( 4d7953514c ) This converts the hexadecimal value to string.","title":"unhex (Function)"},{"location":"api/4.0.26/#upper-function","text":"Converts the simple letters in the input string to the equivalent capital/block letters. Syntax STRING str:upper( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be converted to the upper case (equivalent capital/block letters). STRING No No Examples EXAMPLE 1 upper( Hello World ) This converts the simple letters in the input.string to theequivalent capital letters. In this scenario, the output is \"HELLO WORLD\".","title":"upper (Function)"},{"location":"api/4.0.26/#tokenize-stream-processor","text":"This function splits the input string into tokens using a given regular expression and returns the split tokens. Syntax str:tokenize( STRING input.string, STRING regex, BOOL distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string which needs to be split. STRING No No regex The string value which is used to tokenize the 'input.string'. STRING No No distinct This flag is used to return only distinct values. false BOOL Yes No Extra Return Attributes Name Description Possible Types token The attribute which contains a single token. STRING Examples EXAMPLE 1 define stream inputStream (str string); @info(name = 'query1') from inputStream#str:tokenize(str , ',') select text insert into outputStream; This query performs tokenization on the given string. If the str is \"Android,Windows8,iOS\", then the string is split into 3 events containing the token attribute values, i.e., Android , Windows8 and iOS .","title":"tokenize (Stream Processor)"},{"location":"api/4.0.5/","text":"API Docs - v4.0.5 Str repeat (Function) Repeats a string for a specified number of times. Syntax STRING str:repeat( STRING input.string, INT times) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that is repeated the number of times as defined by the user. STRING No No times The number of times the input.string needs to be repeated . INT No No Examples EXAMPLE 1 repeat( StRing 1 , 3) This returns a string value by repeating the string for a specified number of times. In this scenario, the output is \"StRing 1StRing 1StRing 1\". contains (Function) This method returns true if the input.string contains the specified sequence of char values in the search.string . Syntax BOOL str:contains( STRING input.string, STRING search.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string Input string value. STRING No No search.string The string value to be searched for in the input.string . STRING No No Examples EXAMPLE 1 contains( 21 products are produced by WSO2 currently , WSO2 ) This returns a boolean value as the output. In this case, it returns true . trim (Function) Returns a copy of the string with leading and trailing whitespace omitted Syntax STRING str:trim( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that needs to be trimmed. STRING No No Examples EXAMPLE 1 trim( AbCDefghiJ KLMN ) This returns a copy of the input.string with the leading and/or trailing white-spaces omitted. In this scenario, the output is \"AbCDefghiJ KLMN\". reverse (Function) Returns the reverse ordered string of the input. Syntax STRING str:reverse( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be reversed. STRING No No Examples EXAMPLE 1 reverse( Hello World ) This outputs a string value by reversing the incoming input.string . In this scenario, the output is \"dlroW olleH\". replaceAll (Function) Replaces each substring of this string that matches the given expression with the given replacement. Syntax STRING str:replaceAll( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No regex The regular expression to be matched with the input string. STRING No No replacement.string The striing with which each substring that matches the given expression should be replaced. STRING No No Examples EXAMPLE 1 replaceAll( hello hi hello , 'hello', 'test') This returns a string after replacing the substrings of the input string with the replacement string. In this scenario, the output is \"test hi test\" . substr (Function) This returns a new string that is a substring of this string Syntax STRING str:substr( STRING input.string, INT begin.index, INT length, STRING regex, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be processed. STRING No No begin.index Starting index to consider for the substring. INT No No length The length of the substring. INT No No regex The regular expression that should be matched with the input string.. STRING No No group.number The regex group number INT No No Examples EXAMPLE 1 substr( AbCDefghiJ KLMN , 4) This outputs the substring based on the given begin.index . In this scenario, the output is \"efghiJ KLMN\". EXAMPLE 2 substr( AbCDefghiJ KLMN , 2, 4) This outputs the substring based on the given begin.index and length. In this scenario, the output is \"CDef\". EXAMPLE 3 substr( WSO2D efghiJ KLMN , '^WSO2(.*)') This outputs the substring by applying the regex. In this scenario, the output is \"WSO2D efghiJ KLMN\". EXAMPLE 4 substr( WSO2 cep WSO2 XX E hi hA WSO2 heAllo , 'WSO2(.*)A(.*)', 2) This outputs the substring by applying the regex and considering the group.number . In this scenario, the output is \" ello\". length (Function) Returns the length of this string. Syntax INT str:length( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the length. STRING No No Examples EXAMPLE 1 length( Hello World ) This outputs the length of the provided string. In this scenario, the, output is 11 . concat (Function) Returns a string that is the result of concatenating two or more string values. Syntax STRING str:concat( STRING argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have two or more string type input parameters. STRING No No Examples EXAMPLE 1 concat( D533 , 8JU^ , XYZ ) This returns a string value by concatenating the given arguments. In this case, it will return \"D5338JU^XYZ\" as the output lower (Function) Converts the capital letters in the input string to the equivalent simple letters. Syntax STRING str:lower( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to convert to the lower case (i.e., equivalent simple letters). STRING No No Examples EXAMPLE 1 lower( WSO2 cep ) This converts the capital letters in the input.string to the equivalent simple letters. In this scenario, the output is \"wso2 cep \". unhex (Function) unhex(str) interprets each pair of characters in the argument as a hexadecimal number and converts it to the byte represented by the number Syntax STRING str:unhex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The hexadecimal input string that needs to be converted to string. STRING No No Examples EXAMPLE 1 unhex( 4d7953514c ) This converts the hexadecimal value to string hex (Function) Returns a hexadecimal string representation of str, where each byte of each character in str is converted to two hexadecimal digits Syntax STRING str:hex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the hexadecimal value. STRING No No Examples EXAMPLE 1 hex( MySQL ) This returns the hexadecimal value of the input.string. In this scenario, the output is \"4d7953514c\". equalsIgnoreCase (Function) Compares two strings lexicographically. Syntax BOOL str:equalsIgnoreCase( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument. This is compared with the first argument. STRING No No Examples EXAMPLE 1 equalsIgnoreCase( WSO2 , wso2 ) This returns a boolean value as the output. In this scenario, it returns \"true\". replaceFirst (Function) Replaces the first substring of this string that matches the given expression, with the given replacement. Syntax STRING str:replaceFirst( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be replaced. STRING No No regex The regular expression with which the input string should be matched. STRING No No replacement.string The string with which the first substring of input string that matches the regular expression should be replaced. STRING No No Examples EXAMPLE 1 replaceFirst( hello WSO2 A hello , 'WSO2(.*)A', 'XXXX') This returns a string after replacing the first substring with the given replacement string. In this scenario, the output is \"hello XXXX hello\". regexp (Function) Returns whether this 'string' matches the given regular expression 'regex' or not. Syntax BOOL str:regexp( STRING input.string, STRING regex) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to match with the given regular expression. STRING No No regex The regular expression to be matched with the input string. STRING No No Examples EXAMPLE 1 regexp( WSO2 abcdh , WSO(.*h) ) This returns a boolean value after matching regular expression with the given string. In this scenario, it returns \"true\" as the output. split (Function) Splits the source string by split.string and returns the substring specified via the group.number . Syntax STRING str:split( STRING input.string, STRING split.string, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No split.string The string value to be used to split the input.string . STRING No No group.number The index of the split group INT No No Examples EXAMPLE 1 split( WSO2,ABM,NSFT , , , 0) This splits the given input.string by given split.string and returns the string in the index given by group.number. In this scenario, the output will is \"WSO2\". upper (Function) Converts the simple letters in the input string to the equivalent capital/block letters. Syntax STRING str:upper( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be converted to the upper case (equivalent capital/block letters). STRING No No Examples EXAMPLE 1 upper( Hello World ) This converts the simple letters in the input.string to theequivalent capital letters. In this scenario, the output is \"HELLO WORLD\". strcmp (Function) Compares two strings lexicographically. Syntax INT str:strcmp( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument that should be compared with the first argument lexicographically. STRING No No Examples EXAMPLE 1 strcmp( AbCDefghiJ KLMN , 'Hello') This compares two strings lexicographically and outputs an integer value charAt (Function) Returns the char value as a string value at the specified index. Syntax STRING str:charAt( STRING input.value, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.value The input string that used to find the character. STRING No No index The variable that specifies the index. INT No No Examples EXAMPLE 1 charAt( WSO2 , 1) This will output the character that exists at index 1. In this case, it will output 'S'. coalesce (Function) Returns the value of the first of its input parameters that is not null Syntax INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT str:coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have one or more input parameters in any data type. All the specified parameters should be of the same type. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No No Examples EXAMPLE 1 coalesce(null, BBB , CCC ) This returns the first input parameter that is not null. In this example, it returns \"BBB\"","title":"4.0.5"},{"location":"api/4.0.5/#api-docs-v405","text":"","title":"API Docs - v4.0.5"},{"location":"api/4.0.5/#str","text":"","title":"Str"},{"location":"api/4.0.5/#repeat-function","text":"Repeats a string for a specified number of times. Syntax STRING str:repeat( STRING input.string, INT times) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that is repeated the number of times as defined by the user. STRING No No times The number of times the input.string needs to be repeated . INT No No Examples EXAMPLE 1 repeat( StRing 1 , 3) This returns a string value by repeating the string for a specified number of times. In this scenario, the output is \"StRing 1StRing 1StRing 1\".","title":"repeat (Function)"},{"location":"api/4.0.5/#contains-function","text":"This method returns true if the input.string contains the specified sequence of char values in the search.string . Syntax BOOL str:contains( STRING input.string, STRING search.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string Input string value. STRING No No search.string The string value to be searched for in the input.string . STRING No No Examples EXAMPLE 1 contains( 21 products are produced by WSO2 currently , WSO2 ) This returns a boolean value as the output. In this case, it returns true .","title":"contains (Function)"},{"location":"api/4.0.5/#trim-function","text":"Returns a copy of the string with leading and trailing whitespace omitted Syntax STRING str:trim( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that needs to be trimmed. STRING No No Examples EXAMPLE 1 trim( AbCDefghiJ KLMN ) This returns a copy of the input.string with the leading and/or trailing white-spaces omitted. In this scenario, the output is \"AbCDefghiJ KLMN\".","title":"trim (Function)"},{"location":"api/4.0.5/#reverse-function","text":"Returns the reverse ordered string of the input. Syntax STRING str:reverse( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be reversed. STRING No No Examples EXAMPLE 1 reverse( Hello World ) This outputs a string value by reversing the incoming input.string . In this scenario, the output is \"dlroW olleH\".","title":"reverse (Function)"},{"location":"api/4.0.5/#replaceall-function","text":"Replaces each substring of this string that matches the given expression with the given replacement. Syntax STRING str:replaceAll( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No regex The regular expression to be matched with the input string. STRING No No replacement.string The striing with which each substring that matches the given expression should be replaced. STRING No No Examples EXAMPLE 1 replaceAll( hello hi hello , 'hello', 'test') This returns a string after replacing the substrings of the input string with the replacement string. In this scenario, the output is \"test hi test\" .","title":"replaceAll (Function)"},{"location":"api/4.0.5/#substr-function","text":"This returns a new string that is a substring of this string Syntax STRING str:substr( STRING input.string, INT begin.index, INT length, STRING regex, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be processed. STRING No No begin.index Starting index to consider for the substring. INT No No length The length of the substring. INT No No regex The regular expression that should be matched with the input string.. STRING No No group.number The regex group number INT No No Examples EXAMPLE 1 substr( AbCDefghiJ KLMN , 4) This outputs the substring based on the given begin.index . In this scenario, the output is \"efghiJ KLMN\". EXAMPLE 2 substr( AbCDefghiJ KLMN , 2, 4) This outputs the substring based on the given begin.index and length. In this scenario, the output is \"CDef\". EXAMPLE 3 substr( WSO2D efghiJ KLMN , '^WSO2(.*)') This outputs the substring by applying the regex. In this scenario, the output is \"WSO2D efghiJ KLMN\". EXAMPLE 4 substr( WSO2 cep WSO2 XX E hi hA WSO2 heAllo , 'WSO2(.*)A(.*)', 2) This outputs the substring by applying the regex and considering the group.number . In this scenario, the output is \" ello\".","title":"substr (Function)"},{"location":"api/4.0.5/#length-function","text":"Returns the length of this string. Syntax INT str:length( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the length. STRING No No Examples EXAMPLE 1 length( Hello World ) This outputs the length of the provided string. In this scenario, the, output is 11 .","title":"length (Function)"},{"location":"api/4.0.5/#concat-function","text":"Returns a string that is the result of concatenating two or more string values. Syntax STRING str:concat( STRING argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have two or more string type input parameters. STRING No No Examples EXAMPLE 1 concat( D533 , 8JU^ , XYZ ) This returns a string value by concatenating the given arguments. In this case, it will return \"D5338JU^XYZ\" as the output","title":"concat (Function)"},{"location":"api/4.0.5/#lower-function","text":"Converts the capital letters in the input string to the equivalent simple letters. Syntax STRING str:lower( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to convert to the lower case (i.e., equivalent simple letters). STRING No No Examples EXAMPLE 1 lower( WSO2 cep ) This converts the capital letters in the input.string to the equivalent simple letters. In this scenario, the output is \"wso2 cep \".","title":"lower (Function)"},{"location":"api/4.0.5/#unhex-function","text":"unhex(str) interprets each pair of characters in the argument as a hexadecimal number and converts it to the byte represented by the number Syntax STRING str:unhex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The hexadecimal input string that needs to be converted to string. STRING No No Examples EXAMPLE 1 unhex( 4d7953514c ) This converts the hexadecimal value to string","title":"unhex (Function)"},{"location":"api/4.0.5/#hex-function","text":"Returns a hexadecimal string representation of str, where each byte of each character in str is converted to two hexadecimal digits Syntax STRING str:hex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the hexadecimal value. STRING No No Examples EXAMPLE 1 hex( MySQL ) This returns the hexadecimal value of the input.string. In this scenario, the output is \"4d7953514c\".","title":"hex (Function)"},{"location":"api/4.0.5/#equalsignorecase-function","text":"Compares two strings lexicographically. Syntax BOOL str:equalsIgnoreCase( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument. This is compared with the first argument. STRING No No Examples EXAMPLE 1 equalsIgnoreCase( WSO2 , wso2 ) This returns a boolean value as the output. In this scenario, it returns \"true\".","title":"equalsIgnoreCase (Function)"},{"location":"api/4.0.5/#replacefirst-function","text":"Replaces the first substring of this string that matches the given expression, with the given replacement. Syntax STRING str:replaceFirst( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be replaced. STRING No No regex The regular expression with which the input string should be matched. STRING No No replacement.string The string with which the first substring of input string that matches the regular expression should be replaced. STRING No No Examples EXAMPLE 1 replaceFirst( hello WSO2 A hello , 'WSO2(.*)A', 'XXXX') This returns a string after replacing the first substring with the given replacement string. In this scenario, the output is \"hello XXXX hello\".","title":"replaceFirst (Function)"},{"location":"api/4.0.5/#regexp-function","text":"Returns whether this 'string' matches the given regular expression 'regex' or not. Syntax BOOL str:regexp( STRING input.string, STRING regex) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to match with the given regular expression. STRING No No regex The regular expression to be matched with the input string. STRING No No Examples EXAMPLE 1 regexp( WSO2 abcdh , WSO(.*h) ) This returns a boolean value after matching regular expression with the given string. In this scenario, it returns \"true\" as the output.","title":"regexp (Function)"},{"location":"api/4.0.5/#split-function","text":"Splits the source string by split.string and returns the substring specified via the group.number . Syntax STRING str:split( STRING input.string, STRING split.string, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No split.string The string value to be used to split the input.string . STRING No No group.number The index of the split group INT No No Examples EXAMPLE 1 split( WSO2,ABM,NSFT , , , 0) This splits the given input.string by given split.string and returns the string in the index given by group.number. In this scenario, the output will is \"WSO2\".","title":"split (Function)"},{"location":"api/4.0.5/#upper-function","text":"Converts the simple letters in the input string to the equivalent capital/block letters. Syntax STRING str:upper( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be converted to the upper case (equivalent capital/block letters). STRING No No Examples EXAMPLE 1 upper( Hello World ) This converts the simple letters in the input.string to theequivalent capital letters. In this scenario, the output is \"HELLO WORLD\".","title":"upper (Function)"},{"location":"api/4.0.5/#strcmp-function","text":"Compares two strings lexicographically. Syntax INT str:strcmp( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument that should be compared with the first argument lexicographically. STRING No No Examples EXAMPLE 1 strcmp( AbCDefghiJ KLMN , 'Hello') This compares two strings lexicographically and outputs an integer value","title":"strcmp (Function)"},{"location":"api/4.0.5/#charat-function","text":"Returns the char value as a string value at the specified index. Syntax STRING str:charAt( STRING input.value, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.value The input string that used to find the character. STRING No No index The variable that specifies the index. INT No No Examples EXAMPLE 1 charAt( WSO2 , 1) This will output the character that exists at index 1. In this case, it will output 'S'.","title":"charAt (Function)"},{"location":"api/4.0.5/#coalesce-function","text":"Returns the value of the first of its input parameters that is not null Syntax INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT str:coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have one or more input parameters in any data type. All the specified parameters should be of the same type. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No No Examples EXAMPLE 1 coalesce(null, BBB , CCC ) This returns the first input parameter that is not null. In this example, it returns \"BBB\"","title":"coalesce (Function)"},{"location":"api/4.0.6/","text":"API Docs - v4.0.6 Str charAt (Function) Returns the char value as a string value at the specified index. Syntax STRING str:charAt( STRING input.value, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.value The input string that used to find the character. STRING No No index The variable that specifies the index. INT No No Examples EXAMPLE 1 charAt( WSO2 , 1) This will output the character that exists at index 1. In this case, it will output 'S'. coalesce (Function) Returns the value of the first of its input parameters that is not null Syntax INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT str:coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have one or more input parameters in any data type. All the specified parameters should be of the same type. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No No Examples EXAMPLE 1 coalesce(null, BBB , CCC ) This returns the first input parameter that is not null. In this example, it returns \"BBB\" concat (Function) Returns a string that is the result of concatenating two or more string values. Syntax STRING str:concat( STRING argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have two or more string type input parameters. STRING No No Examples EXAMPLE 1 concat( D533 , 8JU^ , XYZ ) This returns a string value by concatenating the given arguments. In this case, it will return \"D5338JU^XYZ\" as the output contains (Function) This method returns true if the input.string contains the specified sequence of char values in the search.string . Syntax BOOL str:contains( STRING input.string, STRING search.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string Input string value. STRING No No search.string The string value to be searched for in the input.string . STRING No No Examples EXAMPLE 1 contains( 21 products are produced by WSO2 currently , WSO2 ) This returns a boolean value as the output. In this case, it returns true . equalsIgnoreCase (Function) Compares two strings lexicographically. Syntax BOOL str:equalsIgnoreCase( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument. This is compared with the first argument. STRING No No Examples EXAMPLE 1 equalsIgnoreCase( WSO2 , wso2 ) This returns a boolean value as the output. In this scenario, it returns \"true\". hex (Function) Returns a hexadecimal string representation of str, where each byte of each character in str is converted to two hexadecimal digits Syntax STRING str:hex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the hexadecimal value. STRING No No Examples EXAMPLE 1 hex( MySQL ) This returns the hexadecimal value of the input.string. In this scenario, the output is \"4d7953514c\". length (Function) Returns the length of this string. Syntax INT str:length( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the length. STRING No No Examples EXAMPLE 1 length( Hello World ) This outputs the length of the provided string. In this scenario, the, output is 11 . lower (Function) Converts the capital letters in the input string to the equivalent simple letters. Syntax STRING str:lower( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to convert to the lower case (i.e., equivalent simple letters). STRING No No Examples EXAMPLE 1 lower( WSO2 cep ) This converts the capital letters in the input.string to the equivalent simple letters. In this scenario, the output is \"wso2 cep \". regexp (Function) Returns whether this 'string' matches the given regular expression 'regex' or not. Syntax BOOL str:regexp( STRING input.string, STRING regex) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to match with the given regular expression. STRING No No regex The regular expression to be matched with the input string. STRING No No Examples EXAMPLE 1 regexp( WSO2 abcdh , WSO(.*h) ) This returns a boolean value after matching regular expression with the given string. In this scenario, it returns \"true\" as the output. repeat (Function) Repeats a string for a specified number of times. Syntax STRING str:repeat( STRING input.string, INT times) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that is repeated the number of times as defined by the user. STRING No No times The number of times the input.string needs to be repeated . INT No No Examples EXAMPLE 1 repeat( StRing 1 , 3) This returns a string value by repeating the string for a specified number of times. In this scenario, the output is \"StRing 1StRing 1StRing 1\". replaceAll (Function) Replaces each substring of this string that matches the given expression with the given replacement. Syntax STRING str:replaceAll( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No regex The regular expression to be matched with the input string. STRING No No replacement.string The striing with which each substring that matches the given expression should be replaced. STRING No No Examples EXAMPLE 1 replaceAll( hello hi hello , 'hello', 'test') This returns a string after replacing the substrings of the input string with the replacement string. In this scenario, the output is \"test hi test\" . replaceFirst (Function) Replaces the first substring of this string that matches the given expression, with the given replacement. Syntax STRING str:replaceFirst( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be replaced. STRING No No regex The regular expression with which the input string should be matched. STRING No No replacement.string The string with which the first substring of input string that matches the regular expression should be replaced. STRING No No Examples EXAMPLE 1 replaceFirst( hello WSO2 A hello , 'WSO2(.*)A', 'XXXX') This returns a string after replacing the first substring with the given replacement string. In this scenario, the output is \"hello XXXX hello\". reverse (Function) Returns the reverse ordered string of the input. Syntax STRING str:reverse( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be reversed. STRING No No Examples EXAMPLE 1 reverse( Hello World ) This outputs a string value by reversing the incoming input.string . In this scenario, the output is \"dlroW olleH\". split (Function) Splits the source string by split.string and returns the substring specified via the group.number . Syntax STRING str:split( STRING input.string, STRING split.string, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No split.string The string value to be used to split the input.string . STRING No No group.number The index of the split group INT No No Examples EXAMPLE 1 split( WSO2,ABM,NSFT , , , 0) This splits the given input.string by given split.string and returns the string in the index given by group.number. In this scenario, the output will is \"WSO2\". strcmp (Function) Compares two strings lexicographically. Syntax INT str:strcmp( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument that should be compared with the first argument lexicographically. STRING No No Examples EXAMPLE 1 strcmp( AbCDefghiJ KLMN , 'Hello') This compares two strings lexicographically and outputs an integer value substr (Function) This returns a new string that is a substring of this string Syntax STRING str:substr( STRING input.string, INT begin.index, INT length, STRING regex, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be processed. STRING No No begin.index Starting index to consider for the substring. INT No No length The length of the substring. INT No No regex The regular expression that should be matched with the input string.. STRING No No group.number The regex group number INT No No Examples EXAMPLE 1 substr( AbCDefghiJ KLMN , 4) This outputs the substring based on the given begin.index . In this scenario, the output is \"efghiJ KLMN\". EXAMPLE 2 substr( AbCDefghiJ KLMN , 2, 4) This outputs the substring based on the given begin.index and length. In this scenario, the output is \"CDef\". EXAMPLE 3 substr( WSO2D efghiJ KLMN , '^WSO2(.*)') This outputs the substring by applying the regex. In this scenario, the output is \"WSO2D efghiJ KLMN\". EXAMPLE 4 substr( WSO2 cep WSO2 XX E hi hA WSO2 heAllo , 'WSO2(.*)A(.*)', 2) This outputs the substring by applying the regex and considering the group.number . In this scenario, the output is \" ello\". trim (Function) Returns a copy of the string with leading and trailing whitespace omitted Syntax STRING str:trim( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that needs to be trimmed. STRING No No Examples EXAMPLE 1 trim( AbCDefghiJ KLMN ) This returns a copy of the input.string with the leading and/or trailing white-spaces omitted. In this scenario, the output is \"AbCDefghiJ KLMN\". unhex (Function) unhex(str) interprets each pair of characters in the argument as a hexadecimal number and converts it to the byte represented by the number Syntax STRING str:unhex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The hexadecimal input string that needs to be converted to string. STRING No No Examples EXAMPLE 1 unhex( 4d7953514c ) This converts the hexadecimal value to string upper (Function) Converts the simple letters in the input string to the equivalent capital/block letters. Syntax STRING str:upper( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be converted to the upper case (equivalent capital/block letters). STRING No No Examples EXAMPLE 1 upper( Hello World ) This converts the simple letters in the input.string to theequivalent capital letters. In this scenario, the output is \"HELLO WORLD\".","title":"4.0.6"},{"location":"api/4.0.6/#api-docs-v406","text":"","title":"API Docs - v4.0.6"},{"location":"api/4.0.6/#str","text":"","title":"Str"},{"location":"api/4.0.6/#charat-function","text":"Returns the char value as a string value at the specified index. Syntax STRING str:charAt( STRING input.value, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.value The input string that used to find the character. STRING No No index The variable that specifies the index. INT No No Examples EXAMPLE 1 charAt( WSO2 , 1) This will output the character that exists at index 1. In this case, it will output 'S'.","title":"charAt (Function)"},{"location":"api/4.0.6/#coalesce-function","text":"Returns the value of the first of its input parameters that is not null Syntax INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT str:coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have one or more input parameters in any data type. All the specified parameters should be of the same type. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No No Examples EXAMPLE 1 coalesce(null, BBB , CCC ) This returns the first input parameter that is not null. In this example, it returns \"BBB\"","title":"coalesce (Function)"},{"location":"api/4.0.6/#concat-function","text":"Returns a string that is the result of concatenating two or more string values. Syntax STRING str:concat( STRING argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have two or more string type input parameters. STRING No No Examples EXAMPLE 1 concat( D533 , 8JU^ , XYZ ) This returns a string value by concatenating the given arguments. In this case, it will return \"D5338JU^XYZ\" as the output","title":"concat (Function)"},{"location":"api/4.0.6/#contains-function","text":"This method returns true if the input.string contains the specified sequence of char values in the search.string . Syntax BOOL str:contains( STRING input.string, STRING search.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string Input string value. STRING No No search.string The string value to be searched for in the input.string . STRING No No Examples EXAMPLE 1 contains( 21 products are produced by WSO2 currently , WSO2 ) This returns a boolean value as the output. In this case, it returns true .","title":"contains (Function)"},{"location":"api/4.0.6/#equalsignorecase-function","text":"Compares two strings lexicographically. Syntax BOOL str:equalsIgnoreCase( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument. This is compared with the first argument. STRING No No Examples EXAMPLE 1 equalsIgnoreCase( WSO2 , wso2 ) This returns a boolean value as the output. In this scenario, it returns \"true\".","title":"equalsIgnoreCase (Function)"},{"location":"api/4.0.6/#hex-function","text":"Returns a hexadecimal string representation of str, where each byte of each character in str is converted to two hexadecimal digits Syntax STRING str:hex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the hexadecimal value. STRING No No Examples EXAMPLE 1 hex( MySQL ) This returns the hexadecimal value of the input.string. In this scenario, the output is \"4d7953514c\".","title":"hex (Function)"},{"location":"api/4.0.6/#length-function","text":"Returns the length of this string. Syntax INT str:length( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the length. STRING No No Examples EXAMPLE 1 length( Hello World ) This outputs the length of the provided string. In this scenario, the, output is 11 .","title":"length (Function)"},{"location":"api/4.0.6/#lower-function","text":"Converts the capital letters in the input string to the equivalent simple letters. Syntax STRING str:lower( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to convert to the lower case (i.e., equivalent simple letters). STRING No No Examples EXAMPLE 1 lower( WSO2 cep ) This converts the capital letters in the input.string to the equivalent simple letters. In this scenario, the output is \"wso2 cep \".","title":"lower (Function)"},{"location":"api/4.0.6/#regexp-function","text":"Returns whether this 'string' matches the given regular expression 'regex' or not. Syntax BOOL str:regexp( STRING input.string, STRING regex) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to match with the given regular expression. STRING No No regex The regular expression to be matched with the input string. STRING No No Examples EXAMPLE 1 regexp( WSO2 abcdh , WSO(.*h) ) This returns a boolean value after matching regular expression with the given string. In this scenario, it returns \"true\" as the output.","title":"regexp (Function)"},{"location":"api/4.0.6/#repeat-function","text":"Repeats a string for a specified number of times. Syntax STRING str:repeat( STRING input.string, INT times) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that is repeated the number of times as defined by the user. STRING No No times The number of times the input.string needs to be repeated . INT No No Examples EXAMPLE 1 repeat( StRing 1 , 3) This returns a string value by repeating the string for a specified number of times. In this scenario, the output is \"StRing 1StRing 1StRing 1\".","title":"repeat (Function)"},{"location":"api/4.0.6/#replaceall-function","text":"Replaces each substring of this string that matches the given expression with the given replacement. Syntax STRING str:replaceAll( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No regex The regular expression to be matched with the input string. STRING No No replacement.string The striing with which each substring that matches the given expression should be replaced. STRING No No Examples EXAMPLE 1 replaceAll( hello hi hello , 'hello', 'test') This returns a string after replacing the substrings of the input string with the replacement string. In this scenario, the output is \"test hi test\" .","title":"replaceAll (Function)"},{"location":"api/4.0.6/#replacefirst-function","text":"Replaces the first substring of this string that matches the given expression, with the given replacement. Syntax STRING str:replaceFirst( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be replaced. STRING No No regex The regular expression with which the input string should be matched. STRING No No replacement.string The string with which the first substring of input string that matches the regular expression should be replaced. STRING No No Examples EXAMPLE 1 replaceFirst( hello WSO2 A hello , 'WSO2(.*)A', 'XXXX') This returns a string after replacing the first substring with the given replacement string. In this scenario, the output is \"hello XXXX hello\".","title":"replaceFirst (Function)"},{"location":"api/4.0.6/#reverse-function","text":"Returns the reverse ordered string of the input. Syntax STRING str:reverse( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be reversed. STRING No No Examples EXAMPLE 1 reverse( Hello World ) This outputs a string value by reversing the incoming input.string . In this scenario, the output is \"dlroW olleH\".","title":"reverse (Function)"},{"location":"api/4.0.6/#split-function","text":"Splits the source string by split.string and returns the substring specified via the group.number . Syntax STRING str:split( STRING input.string, STRING split.string, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No split.string The string value to be used to split the input.string . STRING No No group.number The index of the split group INT No No Examples EXAMPLE 1 split( WSO2,ABM,NSFT , , , 0) This splits the given input.string by given split.string and returns the string in the index given by group.number. In this scenario, the output will is \"WSO2\".","title":"split (Function)"},{"location":"api/4.0.6/#strcmp-function","text":"Compares two strings lexicographically. Syntax INT str:strcmp( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument that should be compared with the first argument lexicographically. STRING No No Examples EXAMPLE 1 strcmp( AbCDefghiJ KLMN , 'Hello') This compares two strings lexicographically and outputs an integer value","title":"strcmp (Function)"},{"location":"api/4.0.6/#substr-function","text":"This returns a new string that is a substring of this string Syntax STRING str:substr( STRING input.string, INT begin.index, INT length, STRING regex, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be processed. STRING No No begin.index Starting index to consider for the substring. INT No No length The length of the substring. INT No No regex The regular expression that should be matched with the input string.. STRING No No group.number The regex group number INT No No Examples EXAMPLE 1 substr( AbCDefghiJ KLMN , 4) This outputs the substring based on the given begin.index . In this scenario, the output is \"efghiJ KLMN\". EXAMPLE 2 substr( AbCDefghiJ KLMN , 2, 4) This outputs the substring based on the given begin.index and length. In this scenario, the output is \"CDef\". EXAMPLE 3 substr( WSO2D efghiJ KLMN , '^WSO2(.*)') This outputs the substring by applying the regex. In this scenario, the output is \"WSO2D efghiJ KLMN\". EXAMPLE 4 substr( WSO2 cep WSO2 XX E hi hA WSO2 heAllo , 'WSO2(.*)A(.*)', 2) This outputs the substring by applying the regex and considering the group.number . In this scenario, the output is \" ello\".","title":"substr (Function)"},{"location":"api/4.0.6/#trim-function","text":"Returns a copy of the string with leading and trailing whitespace omitted Syntax STRING str:trim( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that needs to be trimmed. STRING No No Examples EXAMPLE 1 trim( AbCDefghiJ KLMN ) This returns a copy of the input.string with the leading and/or trailing white-spaces omitted. In this scenario, the output is \"AbCDefghiJ KLMN\".","title":"trim (Function)"},{"location":"api/4.0.6/#unhex-function","text":"unhex(str) interprets each pair of characters in the argument as a hexadecimal number and converts it to the byte represented by the number Syntax STRING str:unhex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The hexadecimal input string that needs to be converted to string. STRING No No Examples EXAMPLE 1 unhex( 4d7953514c ) This converts the hexadecimal value to string","title":"unhex (Function)"},{"location":"api/4.0.6/#upper-function","text":"Converts the simple letters in the input string to the equivalent capital/block letters. Syntax STRING str:upper( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be converted to the upper case (equivalent capital/block letters). STRING No No Examples EXAMPLE 1 upper( Hello World ) This converts the simple letters in the input.string to theequivalent capital letters. In this scenario, the output is \"HELLO WORLD\".","title":"upper (Function)"},{"location":"api/4.0.7/","text":"API Docs - v4.0.7 Str charAt (Function) Returns the char value as a string value at the specified index. Syntax STRING str:charAt( STRING input.value, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.value The input string that used to find the character. STRING No No index The variable that specifies the index. INT No No Examples EXAMPLE 1 charAt( WSO2 , 1) This will output the character that exists at index 1. In this case, it will output 'S'. coalesce (Function) Returns the value of the first of its input parameters that is not null Syntax INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT str:coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have one or more input parameters in any data type. All the specified parameters should be of the same type. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No No Examples EXAMPLE 1 coalesce(null, BBB , CCC ) This returns the first input parameter that is not null. In this example, it returns \"BBB\" concat (Function) Returns a string that is the result of concatenating two or more string values. Syntax STRING str:concat( STRING argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have two or more string type input parameters. STRING No No Examples EXAMPLE 1 concat( D533 , 8JU^ , XYZ ) This returns a string value by concatenating the given arguments. In this case, it will return \"D5338JU^XYZ\" as the output contains (Function) This method returns true if the input.string contains the specified sequence of char values in the search.string . Syntax BOOL str:contains( STRING input.string, STRING search.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string Input string value. STRING No No search.string The string value to be searched for in the input.string . STRING No No Examples EXAMPLE 1 contains( 21 products are produced by WSO2 currently , WSO2 ) This returns a boolean value as the output. In this case, it returns true . equalsIgnoreCase (Function) Compares two strings lexicographically. Syntax BOOL str:equalsIgnoreCase( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument. This is compared with the first argument. STRING No No Examples EXAMPLE 1 equalsIgnoreCase( WSO2 , wso2 ) This returns a boolean value as the output. In this scenario, it returns \"true\". hex (Function) Returns a hexadecimal string representation of str, where each byte of each character in str is converted to two hexadecimal digits Syntax STRING str:hex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the hexadecimal value. STRING No No Examples EXAMPLE 1 hex( MySQL ) This returns the hexadecimal value of the input.string. In this scenario, the output is \"4d7953514c\". length (Function) Returns the length of this string. Syntax INT str:length( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the length. STRING No No Examples EXAMPLE 1 length( Hello World ) This outputs the length of the provided string. In this scenario, the, output is 11 . lower (Function) Converts the capital letters in the input string to the equivalent simple letters. Syntax STRING str:lower( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to convert to the lower case (i.e., equivalent simple letters). STRING No No Examples EXAMPLE 1 lower( WSO2 cep ) This converts the capital letters in the input.string to the equivalent simple letters. In this scenario, the output is \"wso2 cep \". regexp (Function) Returns whether this 'string' matches the given regular expression 'regex' or not. Syntax BOOL str:regexp( STRING input.string, STRING regex) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to match with the given regular expression. STRING No No regex The regular expression to be matched with the input string. STRING No No Examples EXAMPLE 1 regexp( WSO2 abcdh , WSO(.*h) ) This returns a boolean value after matching regular expression with the given string. In this scenario, it returns \"true\" as the output. repeat (Function) Repeats a string for a specified number of times. Syntax STRING str:repeat( STRING input.string, INT times) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that is repeated the number of times as defined by the user. STRING No No times The number of times the input.string needs to be repeated . INT No No Examples EXAMPLE 1 repeat( StRing 1 , 3) This returns a string value by repeating the string for a specified number of times. In this scenario, the output is \"StRing 1StRing 1StRing 1\". replaceAll (Function) Replaces each substring of this string that matches the given expression with the given replacement. Syntax STRING str:replaceAll( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No regex The regular expression to be matched with the input string. STRING No No replacement.string The striing with which each substring that matches the given expression should be replaced. STRING No No Examples EXAMPLE 1 replaceAll( hello hi hello , 'hello', 'test') This returns a string after replacing the substrings of the input string with the replacement string. In this scenario, the output is \"test hi test\" . replaceFirst (Function) Replaces the first substring of this string that matches the given expression, with the given replacement. Syntax STRING str:replaceFirst( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be replaced. STRING No No regex The regular expression with which the input string should be matched. STRING No No replacement.string The string with which the first substring of input string that matches the regular expression should be replaced. STRING No No Examples EXAMPLE 1 replaceFirst( hello WSO2 A hello , 'WSO2(.*)A', 'XXXX') This returns a string after replacing the first substring with the given replacement string. In this scenario, the output is \"hello XXXX hello\". reverse (Function) Returns the reverse ordered string of the input. Syntax STRING str:reverse( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be reversed. STRING No No Examples EXAMPLE 1 reverse( Hello World ) This outputs a string value by reversing the incoming input.string . In this scenario, the output is \"dlroW olleH\". split (Function) Splits the source string by split.string and returns the substring specified via the group.number . Syntax STRING str:split( STRING input.string, STRING split.string, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No split.string The string value to be used to split the input.string . STRING No No group.number The index of the split group INT No No Examples EXAMPLE 1 split( WSO2,ABM,NSFT , , , 0) This splits the given input.string by given split.string and returns the string in the index given by group.number. In this scenario, the output will is \"WSO2\". strcmp (Function) Compares two strings lexicographically. Syntax INT str:strcmp( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument that should be compared with the first argument lexicographically. STRING No No Examples EXAMPLE 1 strcmp( AbCDefghiJ KLMN , 'Hello') This compares two strings lexicographically and outputs an integer value substr (Function) This returns a new string that is a substring of this string Syntax STRING str:substr( STRING input.string, INT begin.index, INT length, STRING regex, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be processed. STRING No No begin.index Starting index to consider for the substring. INT No No length The length of the substring. INT No No regex The regular expression that should be matched with the input string.. STRING No No group.number The regex group number INT No No Examples EXAMPLE 1 substr( AbCDefghiJ KLMN , 4) This outputs the substring based on the given begin.index . In this scenario, the output is \"efghiJ KLMN\". EXAMPLE 2 substr( AbCDefghiJ KLMN , 2, 4) This outputs the substring based on the given begin.index and length. In this scenario, the output is \"CDef\". EXAMPLE 3 substr( WSO2D efghiJ KLMN , '^WSO2(.*)') This outputs the substring by applying the regex. In this scenario, the output is \"WSO2D efghiJ KLMN\". EXAMPLE 4 substr( WSO2 cep WSO2 XX E hi hA WSO2 heAllo , 'WSO2(.*)A(.*)', 2) This outputs the substring by applying the regex and considering the group.number . In this scenario, the output is \" ello\". trim (Function) Returns a copy of the string with leading and trailing whitespace omitted Syntax STRING str:trim( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that needs to be trimmed. STRING No No Examples EXAMPLE 1 trim( AbCDefghiJ KLMN ) This returns a copy of the input.string with the leading and/or trailing white-spaces omitted. In this scenario, the output is \"AbCDefghiJ KLMN\". unhex (Function) unhex(str) interprets each pair of characters in the argument as a hexadecimal number and converts it to the byte represented by the number Syntax STRING str:unhex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The hexadecimal input string that needs to be converted to string. STRING No No Examples EXAMPLE 1 unhex( 4d7953514c ) This converts the hexadecimal value to string upper (Function) Converts the simple letters in the input string to the equivalent capital/block letters. Syntax STRING str:upper( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be converted to the upper case (equivalent capital/block letters). STRING No No Examples EXAMPLE 1 upper( Hello World ) This converts the simple letters in the input.string to theequivalent capital letters. In this scenario, the output is \"HELLO WORLD\".","title":"4.0.7"},{"location":"api/4.0.7/#api-docs-v407","text":"","title":"API Docs - v4.0.7"},{"location":"api/4.0.7/#str","text":"","title":"Str"},{"location":"api/4.0.7/#charat-function","text":"Returns the char value as a string value at the specified index. Syntax STRING str:charAt( STRING input.value, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.value The input string that used to find the character. STRING No No index The variable that specifies the index. INT No No Examples EXAMPLE 1 charAt( WSO2 , 1) This will output the character that exists at index 1. In this case, it will output 'S'.","title":"charAt (Function)"},{"location":"api/4.0.7/#coalesce-function","text":"Returns the value of the first of its input parameters that is not null Syntax INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT str:coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have one or more input parameters in any data type. All the specified parameters should be of the same type. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No No Examples EXAMPLE 1 coalesce(null, BBB , CCC ) This returns the first input parameter that is not null. In this example, it returns \"BBB\"","title":"coalesce (Function)"},{"location":"api/4.0.7/#concat-function","text":"Returns a string that is the result of concatenating two or more string values. Syntax STRING str:concat( STRING argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have two or more string type input parameters. STRING No No Examples EXAMPLE 1 concat( D533 , 8JU^ , XYZ ) This returns a string value by concatenating the given arguments. In this case, it will return \"D5338JU^XYZ\" as the output","title":"concat (Function)"},{"location":"api/4.0.7/#contains-function","text":"This method returns true if the input.string contains the specified sequence of char values in the search.string . Syntax BOOL str:contains( STRING input.string, STRING search.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string Input string value. STRING No No search.string The string value to be searched for in the input.string . STRING No No Examples EXAMPLE 1 contains( 21 products are produced by WSO2 currently , WSO2 ) This returns a boolean value as the output. In this case, it returns true .","title":"contains (Function)"},{"location":"api/4.0.7/#equalsignorecase-function","text":"Compares two strings lexicographically. Syntax BOOL str:equalsIgnoreCase( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument. This is compared with the first argument. STRING No No Examples EXAMPLE 1 equalsIgnoreCase( WSO2 , wso2 ) This returns a boolean value as the output. In this scenario, it returns \"true\".","title":"equalsIgnoreCase (Function)"},{"location":"api/4.0.7/#hex-function","text":"Returns a hexadecimal string representation of str, where each byte of each character in str is converted to two hexadecimal digits Syntax STRING str:hex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the hexadecimal value. STRING No No Examples EXAMPLE 1 hex( MySQL ) This returns the hexadecimal value of the input.string. In this scenario, the output is \"4d7953514c\".","title":"hex (Function)"},{"location":"api/4.0.7/#length-function","text":"Returns the length of this string. Syntax INT str:length( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the length. STRING No No Examples EXAMPLE 1 length( Hello World ) This outputs the length of the provided string. In this scenario, the, output is 11 .","title":"length (Function)"},{"location":"api/4.0.7/#lower-function","text":"Converts the capital letters in the input string to the equivalent simple letters. Syntax STRING str:lower( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to convert to the lower case (i.e., equivalent simple letters). STRING No No Examples EXAMPLE 1 lower( WSO2 cep ) This converts the capital letters in the input.string to the equivalent simple letters. In this scenario, the output is \"wso2 cep \".","title":"lower (Function)"},{"location":"api/4.0.7/#regexp-function","text":"Returns whether this 'string' matches the given regular expression 'regex' or not. Syntax BOOL str:regexp( STRING input.string, STRING regex) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to match with the given regular expression. STRING No No regex The regular expression to be matched with the input string. STRING No No Examples EXAMPLE 1 regexp( WSO2 abcdh , WSO(.*h) ) This returns a boolean value after matching regular expression with the given string. In this scenario, it returns \"true\" as the output.","title":"regexp (Function)"},{"location":"api/4.0.7/#repeat-function","text":"Repeats a string for a specified number of times. Syntax STRING str:repeat( STRING input.string, INT times) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that is repeated the number of times as defined by the user. STRING No No times The number of times the input.string needs to be repeated . INT No No Examples EXAMPLE 1 repeat( StRing 1 , 3) This returns a string value by repeating the string for a specified number of times. In this scenario, the output is \"StRing 1StRing 1StRing 1\".","title":"repeat (Function)"},{"location":"api/4.0.7/#replaceall-function","text":"Replaces each substring of this string that matches the given expression with the given replacement. Syntax STRING str:replaceAll( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No regex The regular expression to be matched with the input string. STRING No No replacement.string The striing with which each substring that matches the given expression should be replaced. STRING No No Examples EXAMPLE 1 replaceAll( hello hi hello , 'hello', 'test') This returns a string after replacing the substrings of the input string with the replacement string. In this scenario, the output is \"test hi test\" .","title":"replaceAll (Function)"},{"location":"api/4.0.7/#replacefirst-function","text":"Replaces the first substring of this string that matches the given expression, with the given replacement. Syntax STRING str:replaceFirst( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be replaced. STRING No No regex The regular expression with which the input string should be matched. STRING No No replacement.string The string with which the first substring of input string that matches the regular expression should be replaced. STRING No No Examples EXAMPLE 1 replaceFirst( hello WSO2 A hello , 'WSO2(.*)A', 'XXXX') This returns a string after replacing the first substring with the given replacement string. In this scenario, the output is \"hello XXXX hello\".","title":"replaceFirst (Function)"},{"location":"api/4.0.7/#reverse-function","text":"Returns the reverse ordered string of the input. Syntax STRING str:reverse( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be reversed. STRING No No Examples EXAMPLE 1 reverse( Hello World ) This outputs a string value by reversing the incoming input.string . In this scenario, the output is \"dlroW olleH\".","title":"reverse (Function)"},{"location":"api/4.0.7/#split-function","text":"Splits the source string by split.string and returns the substring specified via the group.number . Syntax STRING str:split( STRING input.string, STRING split.string, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No split.string The string value to be used to split the input.string . STRING No No group.number The index of the split group INT No No Examples EXAMPLE 1 split( WSO2,ABM,NSFT , , , 0) This splits the given input.string by given split.string and returns the string in the index given by group.number. In this scenario, the output will is \"WSO2\".","title":"split (Function)"},{"location":"api/4.0.7/#strcmp-function","text":"Compares two strings lexicographically. Syntax INT str:strcmp( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument that should be compared with the first argument lexicographically. STRING No No Examples EXAMPLE 1 strcmp( AbCDefghiJ KLMN , 'Hello') This compares two strings lexicographically and outputs an integer value","title":"strcmp (Function)"},{"location":"api/4.0.7/#substr-function","text":"This returns a new string that is a substring of this string Syntax STRING str:substr( STRING input.string, INT begin.index, INT length, STRING regex, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be processed. STRING No No begin.index Starting index to consider for the substring. INT No No length The length of the substring. INT No No regex The regular expression that should be matched with the input string.. STRING No No group.number The regex group number INT No No Examples EXAMPLE 1 substr( AbCDefghiJ KLMN , 4) This outputs the substring based on the given begin.index . In this scenario, the output is \"efghiJ KLMN\". EXAMPLE 2 substr( AbCDefghiJ KLMN , 2, 4) This outputs the substring based on the given begin.index and length. In this scenario, the output is \"CDef\". EXAMPLE 3 substr( WSO2D efghiJ KLMN , '^WSO2(.*)') This outputs the substring by applying the regex. In this scenario, the output is \"WSO2D efghiJ KLMN\". EXAMPLE 4 substr( WSO2 cep WSO2 XX E hi hA WSO2 heAllo , 'WSO2(.*)A(.*)', 2) This outputs the substring by applying the regex and considering the group.number . In this scenario, the output is \" ello\".","title":"substr (Function)"},{"location":"api/4.0.7/#trim-function","text":"Returns a copy of the string with leading and trailing whitespace omitted Syntax STRING str:trim( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that needs to be trimmed. STRING No No Examples EXAMPLE 1 trim( AbCDefghiJ KLMN ) This returns a copy of the input.string with the leading and/or trailing white-spaces omitted. In this scenario, the output is \"AbCDefghiJ KLMN\".","title":"trim (Function)"},{"location":"api/4.0.7/#unhex-function","text":"unhex(str) interprets each pair of characters in the argument as a hexadecimal number and converts it to the byte represented by the number Syntax STRING str:unhex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The hexadecimal input string that needs to be converted to string. STRING No No Examples EXAMPLE 1 unhex( 4d7953514c ) This converts the hexadecimal value to string","title":"unhex (Function)"},{"location":"api/4.0.7/#upper-function","text":"Converts the simple letters in the input string to the equivalent capital/block letters. Syntax STRING str:upper( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be converted to the upper case (equivalent capital/block letters). STRING No No Examples EXAMPLE 1 upper( Hello World ) This converts the simple letters in the input.string to theequivalent capital letters. In this scenario, the output is \"HELLO WORLD\".","title":"upper (Function)"},{"location":"api/4.0.8/","text":"API Docs - v4.0.8 Str charAt (Function) Returns the char value as a string value at the specified index. Syntax STRING str:charAt( STRING input.value, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.value The input string that used to find the character. STRING No No index The variable that specifies the index. INT No No Examples EXAMPLE 1 charAt( WSO2 , 1) This will output the character that exists at index 1. In this case, it will output 'S'. coalesce (Function) Returns the value of the first of its input parameters that is not null Syntax INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT str:coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have one or more input parameters in any data type. All the specified parameters should be of the same type. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No No Examples EXAMPLE 1 coalesce(null, BBB , CCC ) This returns the first input parameter that is not null. In this example, it returns \"BBB\" concat (Function) Returns a string that is the result of concatenating two or more string values. Syntax STRING str:concat( STRING argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have two or more string type input parameters. STRING No No Examples EXAMPLE 1 concat( D533 , 8JU^ , XYZ ) This returns a string value by concatenating the given arguments. In this case, it will return \"D5338JU^XYZ\" as the output contains (Function) This method returns true if the input.string contains the specified sequence of char values in the search.string . Syntax BOOL str:contains( STRING input.string, STRING search.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string Input string value. STRING No No search.string The string value to be searched for in the input.string . STRING No No Examples EXAMPLE 1 contains( 21 products are produced by WSO2 currently , WSO2 ) This returns a boolean value as the output. In this case, it returns true . equalsIgnoreCase (Function) Compares two strings lexicographically. Syntax BOOL str:equalsIgnoreCase( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument. This is compared with the first argument. STRING No No Examples EXAMPLE 1 equalsIgnoreCase( WSO2 , wso2 ) This returns a boolean value as the output. In this scenario, it returns \"true\". hex (Function) Returns a hexadecimal string representation of str, where each byte of each character in str is converted to two hexadecimal digits Syntax STRING str:hex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the hexadecimal value. STRING No No Examples EXAMPLE 1 hex( MySQL ) This returns the hexadecimal value of the input.string. In this scenario, the output is \"4d7953514c\". length (Function) Returns the length of this string. Syntax INT str:length( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the length. STRING No No Examples EXAMPLE 1 length( Hello World ) This outputs the length of the provided string. In this scenario, the, output is 11 . lower (Function) Converts the capital letters in the input string to the equivalent simple letters. Syntax STRING str:lower( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to convert to the lower case (i.e., equivalent simple letters). STRING No No Examples EXAMPLE 1 lower( WSO2 cep ) This converts the capital letters in the input.string to the equivalent simple letters. In this scenario, the output is \"wso2 cep \". regexp (Function) Returns whether this 'string' matches the given regular expression 'regex' or not. Syntax BOOL str:regexp( STRING input.string, STRING regex) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to match with the given regular expression. STRING No No regex The regular expression to be matched with the input string. STRING No No Examples EXAMPLE 1 regexp( WSO2 abcdh , WSO(.*h) ) This returns a boolean value after matching regular expression with the given string. In this scenario, it returns \"true\" as the output. repeat (Function) Repeats a string for a specified number of times. Syntax STRING str:repeat( STRING input.string, INT times) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that is repeated the number of times as defined by the user. STRING No No times The number of times the input.string needs to be repeated . INT No No Examples EXAMPLE 1 repeat( StRing 1 , 3) This returns a string value by repeating the string for a specified number of times. In this scenario, the output is \"StRing 1StRing 1StRing 1\". replaceAll (Function) Replaces each substring of this string that matches the given expression with the given replacement. Syntax STRING str:replaceAll( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No regex The regular expression to be matched with the input string. STRING No No replacement.string The striing with which each substring that matches the given expression should be replaced. STRING No No Examples EXAMPLE 1 replaceAll( hello hi hello , 'hello', 'test') This returns a string after replacing the substrings of the input string with the replacement string. In this scenario, the output is \"test hi test\" . replaceFirst (Function) Replaces the first substring of this string that matches the given expression, with the given replacement. Syntax STRING str:replaceFirst( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be replaced. STRING No No regex The regular expression with which the input string should be matched. STRING No No replacement.string The string with which the first substring of input string that matches the regular expression should be replaced. STRING No No Examples EXAMPLE 1 replaceFirst( hello WSO2 A hello , 'WSO2(.*)A', 'XXXX') This returns a string after replacing the first substring with the given replacement string. In this scenario, the output is \"hello XXXX hello\". reverse (Function) Returns the reverse ordered string of the input. Syntax STRING str:reverse( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be reversed. STRING No No Examples EXAMPLE 1 reverse( Hello World ) This outputs a string value by reversing the incoming input.string . In this scenario, the output is \"dlroW olleH\". split (Function) Splits the source string by split.string and returns the substring specified via the group.number . Syntax STRING str:split( STRING input.string, STRING split.string, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No split.string The string value to be used to split the input.string . STRING No No group.number The index of the split group INT No No Examples EXAMPLE 1 split( WSO2,ABM,NSFT , , , 0) This splits the given input.string by given split.string and returns the string in the index given by group.number. In this scenario, the output will is \"WSO2\". strcmp (Function) Compares two strings lexicographically. Syntax INT str:strcmp( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument that should be compared with the first argument lexicographically. STRING No No Examples EXAMPLE 1 strcmp( AbCDefghiJ KLMN , 'Hello') This compares two strings lexicographically and outputs an integer value substr (Function) This returns a new string that is a substring of this string Syntax STRING str:substr( STRING input.string, INT begin.index, INT length, STRING regex, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be processed. STRING No No begin.index Starting index to consider for the substring. INT No No length The length of the substring. INT No No regex The regular expression that should be matched with the input string.. STRING No No group.number The regex group number INT No No Examples EXAMPLE 1 substr( AbCDefghiJ KLMN , 4) This outputs the substring based on the given begin.index . In this scenario, the output is \"efghiJ KLMN\". EXAMPLE 2 substr( AbCDefghiJ KLMN , 2, 4) This outputs the substring based on the given begin.index and length. In this scenario, the output is \"CDef\". EXAMPLE 3 substr( WSO2D efghiJ KLMN , '^WSO2(.*)') This outputs the substring by applying the regex. In this scenario, the output is \"WSO2D efghiJ KLMN\". EXAMPLE 4 substr( WSO2 cep WSO2 XX E hi hA WSO2 heAllo , 'WSO2(.*)A(.*)', 2) This outputs the substring by applying the regex and considering the group.number . In this scenario, the output is \" ello\". trim (Function) Returns a copy of the string with leading and trailing whitespace omitted Syntax STRING str:trim( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that needs to be trimmed. STRING No No Examples EXAMPLE 1 trim( AbCDefghiJ KLMN ) This returns a copy of the input.string with the leading and/or trailing white-spaces omitted. In this scenario, the output is \"AbCDefghiJ KLMN\". unhex (Function) unhex(str) interprets each pair of characters in the argument as a hexadecimal number and converts it to the byte represented by the number Syntax STRING str:unhex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The hexadecimal input string that needs to be converted to string. STRING No No Examples EXAMPLE 1 unhex( 4d7953514c ) This converts the hexadecimal value to string upper (Function) Converts the simple letters in the input string to the equivalent capital/block letters. Syntax STRING str:upper( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be converted to the upper case (equivalent capital/block letters). STRING No No Examples EXAMPLE 1 upper( Hello World ) This converts the simple letters in the input.string to theequivalent capital letters. In this scenario, the output is \"HELLO WORLD\".","title":"4.0.8"},{"location":"api/4.0.8/#api-docs-v408","text":"","title":"API Docs - v4.0.8"},{"location":"api/4.0.8/#str","text":"","title":"Str"},{"location":"api/4.0.8/#charat-function","text":"Returns the char value as a string value at the specified index. Syntax STRING str:charAt( STRING input.value, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.value The input string that used to find the character. STRING No No index The variable that specifies the index. INT No No Examples EXAMPLE 1 charAt( WSO2 , 1) This will output the character that exists at index 1. In this case, it will output 'S'.","title":"charAt (Function)"},{"location":"api/4.0.8/#coalesce-function","text":"Returns the value of the first of its input parameters that is not null Syntax INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT str:coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have one or more input parameters in any data type. All the specified parameters should be of the same type. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No No Examples EXAMPLE 1 coalesce(null, BBB , CCC ) This returns the first input parameter that is not null. In this example, it returns \"BBB\"","title":"coalesce (Function)"},{"location":"api/4.0.8/#concat-function","text":"Returns a string that is the result of concatenating two or more string values. Syntax STRING str:concat( STRING argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have two or more string type input parameters. STRING No No Examples EXAMPLE 1 concat( D533 , 8JU^ , XYZ ) This returns a string value by concatenating the given arguments. In this case, it will return \"D5338JU^XYZ\" as the output","title":"concat (Function)"},{"location":"api/4.0.8/#contains-function","text":"This method returns true if the input.string contains the specified sequence of char values in the search.string . Syntax BOOL str:contains( STRING input.string, STRING search.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string Input string value. STRING No No search.string The string value to be searched for in the input.string . STRING No No Examples EXAMPLE 1 contains( 21 products are produced by WSO2 currently , WSO2 ) This returns a boolean value as the output. In this case, it returns true .","title":"contains (Function)"},{"location":"api/4.0.8/#equalsignorecase-function","text":"Compares two strings lexicographically. Syntax BOOL str:equalsIgnoreCase( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument. This is compared with the first argument. STRING No No Examples EXAMPLE 1 equalsIgnoreCase( WSO2 , wso2 ) This returns a boolean value as the output. In this scenario, it returns \"true\".","title":"equalsIgnoreCase (Function)"},{"location":"api/4.0.8/#hex-function","text":"Returns a hexadecimal string representation of str, where each byte of each character in str is converted to two hexadecimal digits Syntax STRING str:hex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the hexadecimal value. STRING No No Examples EXAMPLE 1 hex( MySQL ) This returns the hexadecimal value of the input.string. In this scenario, the output is \"4d7953514c\".","title":"hex (Function)"},{"location":"api/4.0.8/#length-function","text":"Returns the length of this string. Syntax INT str:length( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the length. STRING No No Examples EXAMPLE 1 length( Hello World ) This outputs the length of the provided string. In this scenario, the, output is 11 .","title":"length (Function)"},{"location":"api/4.0.8/#lower-function","text":"Converts the capital letters in the input string to the equivalent simple letters. Syntax STRING str:lower( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to convert to the lower case (i.e., equivalent simple letters). STRING No No Examples EXAMPLE 1 lower( WSO2 cep ) This converts the capital letters in the input.string to the equivalent simple letters. In this scenario, the output is \"wso2 cep \".","title":"lower (Function)"},{"location":"api/4.0.8/#regexp-function","text":"Returns whether this 'string' matches the given regular expression 'regex' or not. Syntax BOOL str:regexp( STRING input.string, STRING regex) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to match with the given regular expression. STRING No No regex The regular expression to be matched with the input string. STRING No No Examples EXAMPLE 1 regexp( WSO2 abcdh , WSO(.*h) ) This returns a boolean value after matching regular expression with the given string. In this scenario, it returns \"true\" as the output.","title":"regexp (Function)"},{"location":"api/4.0.8/#repeat-function","text":"Repeats a string for a specified number of times. Syntax STRING str:repeat( STRING input.string, INT times) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that is repeated the number of times as defined by the user. STRING No No times The number of times the input.string needs to be repeated . INT No No Examples EXAMPLE 1 repeat( StRing 1 , 3) This returns a string value by repeating the string for a specified number of times. In this scenario, the output is \"StRing 1StRing 1StRing 1\".","title":"repeat (Function)"},{"location":"api/4.0.8/#replaceall-function","text":"Replaces each substring of this string that matches the given expression with the given replacement. Syntax STRING str:replaceAll( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No regex The regular expression to be matched with the input string. STRING No No replacement.string The striing with which each substring that matches the given expression should be replaced. STRING No No Examples EXAMPLE 1 replaceAll( hello hi hello , 'hello', 'test') This returns a string after replacing the substrings of the input string with the replacement string. In this scenario, the output is \"test hi test\" .","title":"replaceAll (Function)"},{"location":"api/4.0.8/#replacefirst-function","text":"Replaces the first substring of this string that matches the given expression, with the given replacement. Syntax STRING str:replaceFirst( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be replaced. STRING No No regex The regular expression with which the input string should be matched. STRING No No replacement.string The string with which the first substring of input string that matches the regular expression should be replaced. STRING No No Examples EXAMPLE 1 replaceFirst( hello WSO2 A hello , 'WSO2(.*)A', 'XXXX') This returns a string after replacing the first substring with the given replacement string. In this scenario, the output is \"hello XXXX hello\".","title":"replaceFirst (Function)"},{"location":"api/4.0.8/#reverse-function","text":"Returns the reverse ordered string of the input. Syntax STRING str:reverse( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be reversed. STRING No No Examples EXAMPLE 1 reverse( Hello World ) This outputs a string value by reversing the incoming input.string . In this scenario, the output is \"dlroW olleH\".","title":"reverse (Function)"},{"location":"api/4.0.8/#split-function","text":"Splits the source string by split.string and returns the substring specified via the group.number . Syntax STRING str:split( STRING input.string, STRING split.string, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No split.string The string value to be used to split the input.string . STRING No No group.number The index of the split group INT No No Examples EXAMPLE 1 split( WSO2,ABM,NSFT , , , 0) This splits the given input.string by given split.string and returns the string in the index given by group.number. In this scenario, the output will is \"WSO2\".","title":"split (Function)"},{"location":"api/4.0.8/#strcmp-function","text":"Compares two strings lexicographically. Syntax INT str:strcmp( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument that should be compared with the first argument lexicographically. STRING No No Examples EXAMPLE 1 strcmp( AbCDefghiJ KLMN , 'Hello') This compares two strings lexicographically and outputs an integer value","title":"strcmp (Function)"},{"location":"api/4.0.8/#substr-function","text":"This returns a new string that is a substring of this string Syntax STRING str:substr( STRING input.string, INT begin.index, INT length, STRING regex, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be processed. STRING No No begin.index Starting index to consider for the substring. INT No No length The length of the substring. INT No No regex The regular expression that should be matched with the input string.. STRING No No group.number The regex group number INT No No Examples EXAMPLE 1 substr( AbCDefghiJ KLMN , 4) This outputs the substring based on the given begin.index . In this scenario, the output is \"efghiJ KLMN\". EXAMPLE 2 substr( AbCDefghiJ KLMN , 2, 4) This outputs the substring based on the given begin.index and length. In this scenario, the output is \"CDef\". EXAMPLE 3 substr( WSO2D efghiJ KLMN , '^WSO2(.*)') This outputs the substring by applying the regex. In this scenario, the output is \"WSO2D efghiJ KLMN\". EXAMPLE 4 substr( WSO2 cep WSO2 XX E hi hA WSO2 heAllo , 'WSO2(.*)A(.*)', 2) This outputs the substring by applying the regex and considering the group.number . In this scenario, the output is \" ello\".","title":"substr (Function)"},{"location":"api/4.0.8/#trim-function","text":"Returns a copy of the string with leading and trailing whitespace omitted Syntax STRING str:trim( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that needs to be trimmed. STRING No No Examples EXAMPLE 1 trim( AbCDefghiJ KLMN ) This returns a copy of the input.string with the leading and/or trailing white-spaces omitted. In this scenario, the output is \"AbCDefghiJ KLMN\".","title":"trim (Function)"},{"location":"api/4.0.8/#unhex-function","text":"unhex(str) interprets each pair of characters in the argument as a hexadecimal number and converts it to the byte represented by the number Syntax STRING str:unhex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The hexadecimal input string that needs to be converted to string. STRING No No Examples EXAMPLE 1 unhex( 4d7953514c ) This converts the hexadecimal value to string","title":"unhex (Function)"},{"location":"api/4.0.8/#upper-function","text":"Converts the simple letters in the input string to the equivalent capital/block letters. Syntax STRING str:upper( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be converted to the upper case (equivalent capital/block letters). STRING No No Examples EXAMPLE 1 upper( Hello World ) This converts the simple letters in the input.string to theequivalent capital letters. In this scenario, the output is \"HELLO WORLD\".","title":"upper (Function)"},{"location":"api/4.0.9/","text":"API Docs - v4.0.9 Str charAt (Function) Returns the char value as a string value at the specified index. Syntax STRING str:charAt( STRING input.value, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.value The input string that used to find the character. STRING No No index The variable that specifies the index. INT No No Examples EXAMPLE 1 charAt( WSO2 , 1) This will output the character that exists at index 1. In this case, it will output 'S'. coalesce (Function) Returns the value of the first of its input parameters that is not null Syntax INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT str:coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have one or more input parameters in any data type. All the specified parameters should be of the same type. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No No Examples EXAMPLE 1 coalesce(null, BBB , CCC ) This returns the first input parameter that is not null. In this example, it returns \"BBB\" concat (Function) Returns a string that is the result of concatenating two or more string values. Syntax STRING str:concat( STRING argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have two or more string type input parameters. STRING No No Examples EXAMPLE 1 concat( D533 , 8JU^ , XYZ ) This returns a string value by concatenating the given arguments. In this case, it will return \"D5338JU^XYZ\" as the output contains (Function) This method returns true if the input.string contains the specified sequence of char values in the search.string . Syntax BOOL str:contains( STRING input.string, STRING search.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string Input string value. STRING No No search.string The string value to be searched for in the input.string . STRING No No Examples EXAMPLE 1 contains( 21 products are produced by WSO2 currently , WSO2 ) This returns a boolean value as the output. In this case, it returns true . equalsIgnoreCase (Function) Compares two strings lexicographically. Syntax BOOL str:equalsIgnoreCase( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument. This is compared with the first argument. STRING No No Examples EXAMPLE 1 equalsIgnoreCase( WSO2 , wso2 ) This returns a boolean value as the output. In this scenario, it returns \"true\". hex (Function) Returns a hexadecimal string representation of str, where each byte of each character in str is converted to two hexadecimal digits Syntax STRING str:hex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the hexadecimal value. STRING No No Examples EXAMPLE 1 hex( MySQL ) This returns the hexadecimal value of the input.string. In this scenario, the output is \"4d7953514c\". length (Function) Returns the length of this string. Syntax INT str:length( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the length. STRING No No Examples EXAMPLE 1 length( Hello World ) This outputs the length of the provided string. In this scenario, the, output is 11 . lower (Function) Converts the capital letters in the input string to the equivalent simple letters. Syntax STRING str:lower( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to convert to the lower case (i.e., equivalent simple letters). STRING No No Examples EXAMPLE 1 lower( WSO2 cep ) This converts the capital letters in the input.string to the equivalent simple letters. In this scenario, the output is \"wso2 cep \". regexp (Function) Returns whether this 'string' matches the given regular expression 'regex' or not. Syntax BOOL str:regexp( STRING input.string, STRING regex) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to match with the given regular expression. STRING No No regex The regular expression to be matched with the input string. STRING No No Examples EXAMPLE 1 regexp( WSO2 abcdh , WSO(.*h) ) This returns a boolean value after matching regular expression with the given string. In this scenario, it returns \"true\" as the output. repeat (Function) Repeats a string for a specified number of times. Syntax STRING str:repeat( STRING input.string, INT times) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that is repeated the number of times as defined by the user. STRING No No times The number of times the input.string needs to be repeated . INT No No Examples EXAMPLE 1 repeat( StRing 1 , 3) This returns a string value by repeating the string for a specified number of times. In this scenario, the output is \"StRing 1StRing 1StRing 1\". replaceAll (Function) Replaces each substring of this string that matches the given expression with the given replacement. Syntax STRING str:replaceAll( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No regex The regular expression to be matched with the input string. STRING No No replacement.string The striing with which each substring that matches the given expression should be replaced. STRING No No Examples EXAMPLE 1 replaceAll( hello hi hello , 'hello', 'test') This returns a string after replacing the substrings of the input string with the replacement string. In this scenario, the output is \"test hi test\" . replaceFirst (Function) Replaces the first substring of this string that matches the given expression, with the given replacement. Syntax STRING str:replaceFirst( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be replaced. STRING No No regex The regular expression with which the input string should be matched. STRING No No replacement.string The string with which the first substring of input string that matches the regular expression should be replaced. STRING No No Examples EXAMPLE 1 replaceFirst( hello WSO2 A hello , 'WSO2(.*)A', 'XXXX') This returns a string after replacing the first substring with the given replacement string. In this scenario, the output is \"hello XXXX hello\". reverse (Function) Returns the reverse ordered string of the input. Syntax STRING str:reverse( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be reversed. STRING No No Examples EXAMPLE 1 reverse( Hello World ) This outputs a string value by reversing the incoming input.string . In this scenario, the output is \"dlroW olleH\". split (Function) Splits the source string by split.string and returns the substring specified via the group.number . Syntax STRING str:split( STRING input.string, STRING split.string, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No split.string The string value to be used to split the input.string . STRING No No group.number The index of the split group INT No No Examples EXAMPLE 1 split( WSO2,ABM,NSFT , , , 0) This splits the given input.string by given split.string and returns the string in the index given by group.number. In this scenario, the output will is \"WSO2\". strcmp (Function) Compares two strings lexicographically. Syntax INT str:strcmp( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument that should be compared with the first argument lexicographically. STRING No No Examples EXAMPLE 1 strcmp( AbCDefghiJ KLMN , 'Hello') This compares two strings lexicographically and outputs an integer value substr (Function) This returns a new string that is a substring of this string Syntax STRING str:substr( STRING input.string, INT begin.index, INT length, STRING regex, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be processed. STRING No No begin.index Starting index to consider for the substring. INT No No length The length of the substring. INT No No regex The regular expression that should be matched with the input string.. STRING No No group.number The regex group number INT No No Examples EXAMPLE 1 substr( AbCDefghiJ KLMN , 4) This outputs the substring based on the given begin.index . In this scenario, the output is \"efghiJ KLMN\". EXAMPLE 2 substr( AbCDefghiJ KLMN , 2, 4) This outputs the substring based on the given begin.index and length. In this scenario, the output is \"CDef\". EXAMPLE 3 substr( WSO2D efghiJ KLMN , '^WSO2(.*)') This outputs the substring by applying the regex. In this scenario, the output is \"WSO2D efghiJ KLMN\". EXAMPLE 4 substr( WSO2 cep WSO2 XX E hi hA WSO2 heAllo , 'WSO2(.*)A(.*)', 2) This outputs the substring by applying the regex and considering the group.number . In this scenario, the output is \" ello\". trim (Function) Returns a copy of the string with leading and trailing whitespace omitted Syntax STRING str:trim( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that needs to be trimmed. STRING No No Examples EXAMPLE 1 trim( AbCDefghiJ KLMN ) This returns a copy of the input.string with the leading and/or trailing white-spaces omitted. In this scenario, the output is \"AbCDefghiJ KLMN\". unhex (Function) unhex(str) interprets each pair of characters in the argument as a hexadecimal number and converts it to the byte represented by the number Syntax STRING str:unhex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The hexadecimal input string that needs to be converted to string. STRING No No Examples EXAMPLE 1 unhex( 4d7953514c ) This converts the hexadecimal value to string upper (Function) Converts the simple letters in the input string to the equivalent capital/block letters. Syntax STRING str:upper( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be converted to the upper case (equivalent capital/block letters). STRING No No Examples EXAMPLE 1 upper( Hello World ) This converts the simple letters in the input.string to theequivalent capital letters. In this scenario, the output is \"HELLO WORLD\".","title":"4.0.9"},{"location":"api/4.0.9/#api-docs-v409","text":"","title":"API Docs - v4.0.9"},{"location":"api/4.0.9/#str","text":"","title":"Str"},{"location":"api/4.0.9/#charat-function","text":"Returns the char value as a string value at the specified index. Syntax STRING str:charAt( STRING input.value, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.value The input string that used to find the character. STRING No No index The variable that specifies the index. INT No No Examples EXAMPLE 1 charAt( WSO2 , 1) This will output the character that exists at index 1. In this case, it will output 'S'.","title":"charAt (Function)"},{"location":"api/4.0.9/#coalesce-function","text":"Returns the value of the first of its input parameters that is not null Syntax INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT str:coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have one or more input parameters in any data type. All the specified parameters should be of the same type. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No No Examples EXAMPLE 1 coalesce(null, BBB , CCC ) This returns the first input parameter that is not null. In this example, it returns \"BBB\"","title":"coalesce (Function)"},{"location":"api/4.0.9/#concat-function","text":"Returns a string that is the result of concatenating two or more string values. Syntax STRING str:concat( STRING argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have two or more string type input parameters. STRING No No Examples EXAMPLE 1 concat( D533 , 8JU^ , XYZ ) This returns a string value by concatenating the given arguments. In this case, it will return \"D5338JU^XYZ\" as the output","title":"concat (Function)"},{"location":"api/4.0.9/#contains-function","text":"This method returns true if the input.string contains the specified sequence of char values in the search.string . Syntax BOOL str:contains( STRING input.string, STRING search.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string Input string value. STRING No No search.string The string value to be searched for in the input.string . STRING No No Examples EXAMPLE 1 contains( 21 products are produced by WSO2 currently , WSO2 ) This returns a boolean value as the output. In this case, it returns true .","title":"contains (Function)"},{"location":"api/4.0.9/#equalsignorecase-function","text":"Compares two strings lexicographically. Syntax BOOL str:equalsIgnoreCase( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument. This is compared with the first argument. STRING No No Examples EXAMPLE 1 equalsIgnoreCase( WSO2 , wso2 ) This returns a boolean value as the output. In this scenario, it returns \"true\".","title":"equalsIgnoreCase (Function)"},{"location":"api/4.0.9/#hex-function","text":"Returns a hexadecimal string representation of str, where each byte of each character in str is converted to two hexadecimal digits Syntax STRING str:hex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the hexadecimal value. STRING No No Examples EXAMPLE 1 hex( MySQL ) This returns the hexadecimal value of the input.string. In this scenario, the output is \"4d7953514c\".","title":"hex (Function)"},{"location":"api/4.0.9/#length-function","text":"Returns the length of this string. Syntax INT str:length( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the length. STRING No No Examples EXAMPLE 1 length( Hello World ) This outputs the length of the provided string. In this scenario, the, output is 11 .","title":"length (Function)"},{"location":"api/4.0.9/#lower-function","text":"Converts the capital letters in the input string to the equivalent simple letters. Syntax STRING str:lower( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to convert to the lower case (i.e., equivalent simple letters). STRING No No Examples EXAMPLE 1 lower( WSO2 cep ) This converts the capital letters in the input.string to the equivalent simple letters. In this scenario, the output is \"wso2 cep \".","title":"lower (Function)"},{"location":"api/4.0.9/#regexp-function","text":"Returns whether this 'string' matches the given regular expression 'regex' or not. Syntax BOOL str:regexp( STRING input.string, STRING regex) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to match with the given regular expression. STRING No No regex The regular expression to be matched with the input string. STRING No No Examples EXAMPLE 1 regexp( WSO2 abcdh , WSO(.*h) ) This returns a boolean value after matching regular expression with the given string. In this scenario, it returns \"true\" as the output.","title":"regexp (Function)"},{"location":"api/4.0.9/#repeat-function","text":"Repeats a string for a specified number of times. Syntax STRING str:repeat( STRING input.string, INT times) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that is repeated the number of times as defined by the user. STRING No No times The number of times the input.string needs to be repeated . INT No No Examples EXAMPLE 1 repeat( StRing 1 , 3) This returns a string value by repeating the string for a specified number of times. In this scenario, the output is \"StRing 1StRing 1StRing 1\".","title":"repeat (Function)"},{"location":"api/4.0.9/#replaceall-function","text":"Replaces each substring of this string that matches the given expression with the given replacement. Syntax STRING str:replaceAll( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No regex The regular expression to be matched with the input string. STRING No No replacement.string The striing with which each substring that matches the given expression should be replaced. STRING No No Examples EXAMPLE 1 replaceAll( hello hi hello , 'hello', 'test') This returns a string after replacing the substrings of the input string with the replacement string. In this scenario, the output is \"test hi test\" .","title":"replaceAll (Function)"},{"location":"api/4.0.9/#replacefirst-function","text":"Replaces the first substring of this string that matches the given expression, with the given replacement. Syntax STRING str:replaceFirst( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be replaced. STRING No No regex The regular expression with which the input string should be matched. STRING No No replacement.string The string with which the first substring of input string that matches the regular expression should be replaced. STRING No No Examples EXAMPLE 1 replaceFirst( hello WSO2 A hello , 'WSO2(.*)A', 'XXXX') This returns a string after replacing the first substring with the given replacement string. In this scenario, the output is \"hello XXXX hello\".","title":"replaceFirst (Function)"},{"location":"api/4.0.9/#reverse-function","text":"Returns the reverse ordered string of the input. Syntax STRING str:reverse( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be reversed. STRING No No Examples EXAMPLE 1 reverse( Hello World ) This outputs a string value by reversing the incoming input.string . In this scenario, the output is \"dlroW olleH\".","title":"reverse (Function)"},{"location":"api/4.0.9/#split-function","text":"Splits the source string by split.string and returns the substring specified via the group.number . Syntax STRING str:split( STRING input.string, STRING split.string, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No split.string The string value to be used to split the input.string . STRING No No group.number The index of the split group INT No No Examples EXAMPLE 1 split( WSO2,ABM,NSFT , , , 0) This splits the given input.string by given split.string and returns the string in the index given by group.number. In this scenario, the output will is \"WSO2\".","title":"split (Function)"},{"location":"api/4.0.9/#strcmp-function","text":"Compares two strings lexicographically. Syntax INT str:strcmp( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument that should be compared with the first argument lexicographically. STRING No No Examples EXAMPLE 1 strcmp( AbCDefghiJ KLMN , 'Hello') This compares two strings lexicographically and outputs an integer value","title":"strcmp (Function)"},{"location":"api/4.0.9/#substr-function","text":"This returns a new string that is a substring of this string Syntax STRING str:substr( STRING input.string, INT begin.index, INT length, STRING regex, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be processed. STRING No No begin.index Starting index to consider for the substring. INT No No length The length of the substring. INT No No regex The regular expression that should be matched with the input string.. STRING No No group.number The regex group number INT No No Examples EXAMPLE 1 substr( AbCDefghiJ KLMN , 4) This outputs the substring based on the given begin.index . In this scenario, the output is \"efghiJ KLMN\". EXAMPLE 2 substr( AbCDefghiJ KLMN , 2, 4) This outputs the substring based on the given begin.index and length. In this scenario, the output is \"CDef\". EXAMPLE 3 substr( WSO2D efghiJ KLMN , '^WSO2(.*)') This outputs the substring by applying the regex. In this scenario, the output is \"WSO2D efghiJ KLMN\". EXAMPLE 4 substr( WSO2 cep WSO2 XX E hi hA WSO2 heAllo , 'WSO2(.*)A(.*)', 2) This outputs the substring by applying the regex and considering the group.number . In this scenario, the output is \" ello\".","title":"substr (Function)"},{"location":"api/4.0.9/#trim-function","text":"Returns a copy of the string with leading and trailing whitespace omitted Syntax STRING str:trim( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that needs to be trimmed. STRING No No Examples EXAMPLE 1 trim( AbCDefghiJ KLMN ) This returns a copy of the input.string with the leading and/or trailing white-spaces omitted. In this scenario, the output is \"AbCDefghiJ KLMN\".","title":"trim (Function)"},{"location":"api/4.0.9/#unhex-function","text":"unhex(str) interprets each pair of characters in the argument as a hexadecimal number and converts it to the byte represented by the number Syntax STRING str:unhex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The hexadecimal input string that needs to be converted to string. STRING No No Examples EXAMPLE 1 unhex( 4d7953514c ) This converts the hexadecimal value to string","title":"unhex (Function)"},{"location":"api/4.0.9/#upper-function","text":"Converts the simple letters in the input string to the equivalent capital/block letters. Syntax STRING str:upper( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be converted to the upper case (equivalent capital/block letters). STRING No No Examples EXAMPLE 1 upper( Hello World ) This converts the simple letters in the input.string to theequivalent capital letters. In this scenario, the output is \"HELLO WORLD\".","title":"upper (Function)"},{"location":"api/4.1.0/","text":"API Docs - v4.1.0 Str groupConcat (Aggregate Function) This function aggregates the received events by concatenating the keys in those events using a separator, e.g.,a comma (,) or a hyphen (-), and returns the concatenated key string. Syntax STRING str:groupConcat( STRING key, STRING separator, STRING distinct, STRING order) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key The string that needs to be aggregated. STRING No No separator The separator that separates each string key after concatenating the keys. , STRING Yes No distinct This is used to only have distinct values in the concatenated string that is returned. false STRING Yes No order This parameter accepts 'ASC' or 'DESC' strings to sort the string keys in either ascending or descending order respectively. No order STRING Yes No Examples EXAMPLE 1 from InputStream#window.time(5 min) select str:groupConcat( key ) as groupedKeys input OutputStream; When we input events having values for the key as 'A' , 'B' , 'S' , 'C' , 'A' , it returns \"A,B,S,C,A\" to the 'OutputStream'. EXAMPLE 2 from InputStream#window.time(5 min) select groupConcat( key , - ,true, ASC ) as groupedKeys input OutputStream; When we input events having values for the key as 'A' , 'B' , 'S' , 'C' , 'A' , specify the seperator as hyphen and choose the order to be ascending, the function returns \"A-B-C-S\" to the 'OutputStream'. charAt (Function) This function returns the 'char' value that is present at the given index position. of the input string. Syntax STRING str:charAt( STRING input.value, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.value The input string of which the char value at the given position needs to be returned. STRING No No index The variable that specifies the index of the char value that needs to be returned. INT No No Examples EXAMPLE 1 charAt( WSO2 , 1) In this case, the functiion returns the character that exists at index 1. Hence, it returns 'S'. coalesce (Function) This returns the first input parameter value of the given argument, that is not null. Syntax INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT str:coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have one or more input parameters in any data type. However, all the specified parameters are required to be of the same type. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No No Examples EXAMPLE 1 coalesce(null, BBB , CCC ) This returns the first input parameter that is not null. In this example, it returns \"BBB\". concat (Function) This function returns a string value that is obtained as a result of concatenating two or more input string values. Syntax STRING str:concat( STRING argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn This can have two or more string type input parameters. STRING No No Examples EXAMPLE 1 concat( D533 , 8JU^ , XYZ ) This returns a string value by concatenating two or more given arguments. In the example shown above, it returns \"D5338JU^XYZ\". contains (Function) This function returns true if the input.string contains the specified sequence of char values in the search.string . Syntax BOOL str:contains( STRING input.string, STRING search.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string Input string value. STRING No No search.string The string value to be searched for in the input.string . STRING No No Examples EXAMPLE 1 contains( 21 products are produced by WSO2 currently , WSO2 ) This returns a boolean value as the output. In this case, it returns true . equalsIgnoreCase (Function) This returns a boolean value by comparing two strings lexicographically without considering the letter case. Syntax BOOL str:equalsIgnoreCase( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument. This is compared with the first argument. STRING No No Examples EXAMPLE 1 equalsIgnoreCase( WSO2 , wso2 ) This returns a boolean value as the output. In this scenario, it returns \"true\". fillTemplate (Function) This extension replaces the templated positions that are marked with an index value in a specified template with the strings provided. Syntax STRING str:fillTemplate( STRING template, STRING|INT|LONG|DOUBLE|FLOAT|BOOL replacement.strings) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic template The string with templated fields that needs to be filled with the given strings. The format of the templated fields should be as follows: {{INDEX}} where 'INDEX' is an integer. This index is used to map the strings that are used to replace the templated fields. STRING No No replacement.strings The strings with which the templated positions in the template need to be replaced. The minimum of two arguments need to be included in the execution string. There is no upper limit on the number of arguments allowed to be included. STRING INT LONG DOUBLE FLOAT BOOL No No Examples EXAMPLE 1 str:fillTemplate( This is {{1}} for the {{2}} function , 'an example', 'fillTemplate') In this example, the template is 'This is {{1}} for the {{2}} function'.Here, the templated string {{1}} is replaced with the 1st string value provided, which is 'an example'. {{2}} is replaced with the 2nd string provided, which is 'fillTemplate' The complete return string is 'This is an example for the fillTemplate function'. hex (Function) This function returns a hexadecimal string by converting each byte of each character in the input string to two hexadecimal digits. Syntax STRING str:hex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the hexadecimal value. STRING No No Examples EXAMPLE 1 hex( MySQL ) This returns the hexadecimal value of the input.string. In this scenario, the output is \"4d7953514c\". length (Function) Returns the length of the input string. Syntax INT str:length( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the length. STRING No No Examples EXAMPLE 1 length( Hello World ) This outputs the length of the provided string. In this scenario, the, output is 11 . lower (Function) Converts the capital letters in the input string to the equivalent simple letters. Syntax STRING str:lower( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to convert to the lower case (i.e., equivalent simple letters). STRING No No Examples EXAMPLE 1 lower( WSO2 cep ) This converts the capital letters in the input.string to the equivalent simple letters. In this scenario, the output is \"wso2 cep \". regexp (Function) Returns a boolean value based on the matchability of the input string and the given regular expression. Syntax BOOL str:regexp( STRING input.string, STRING regex) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to match with the given regular expression. STRING No No regex The regular expression to be matched with the input string. STRING No No Examples EXAMPLE 1 regexp( WSO2 abcdh , WSO(.*h) ) This returns a boolean value after matching regular expression with the given string. In this scenario, it returns \"true\" as the output. repeat (Function) Repeats the input string for a specified number of times. Syntax STRING str:repeat( STRING input.string, INT times) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that is repeated the number of times as defined by the user. STRING No No times The number of times the input.string needs to be repeated . INT No No Examples EXAMPLE 1 repeat( StRing 1 , 3) This returns a string value by repeating the string for a specified number of times. In this scenario, the output is \"StRing 1StRing 1StRing 1\". replaceAll (Function) Finds all the substrings of the input string that matches with the given expression, and replaces them with the given replacement string. Syntax STRING str:replaceAll( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No regex The regular expression to be matched with the input string. STRING No No replacement.string The string with which each substring that matches the given expression should be replaced. STRING No No Examples EXAMPLE 1 replaceAll( hello hi hello , 'hello', 'test') This returns a string after replacing the substrings of the input string with the replacement string. In this scenario, the output is \"test hi test\" . replaceFirst (Function) Finds the first substring of the input string that matches with the given regular expression, and replaces itwith the given replacement string. Syntax STRING str:replaceFirst( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be replaced. STRING No No regex The regular expression with which the input string should be matched. STRING No No replacement.string The string with which the first substring of input string that matches the regular expression should be replaced. STRING No No Examples EXAMPLE 1 replaceFirst( hello WSO2 A hello , 'WSO2(.*)A', 'XXXX') This returns a string after replacing the first substring with the given replacement string. In this scenario, the output is \"hello XXXX hello\". reverse (Function) Returns the input string in the reverse order character-wise and string-wise. Syntax STRING str:reverse( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be reversed. STRING No No Examples EXAMPLE 1 reverse( Hello World ) This outputs a string value by reversing the incoming input.string . In this scenario, the output is \"dlroW olleH\". split (Function) Splits the input.string into substrings using the value parsed in the split.string and returns the substring at the position specified in the group.number . Syntax STRING str:split( STRING input.string, STRING split.string, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No split.string The string value to be used to split the input.string . STRING No No group.number The index of the split group INT No No Examples EXAMPLE 1 split( WSO2,ABM,NSFT , , , 0) This splits the given input.string by given split.string and returns the string in the index given by group.number. In this scenario, the output will is \"WSO2\". strcmp (Function) Compares two strings lexicographically and returns an integer value. If both strings are equal, 0 is returned. If the first string is lexicographically greater than the second string, a positive value is returned. If the first string is lexicographically greater than the second string, a negative value is returned. Syntax INT str:strcmp( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument that should be compared with the first argument lexicographically. STRING No No Examples EXAMPLE 1 strcmp( AbCDefghiJ KLMN , 'Hello') This compares two strings lexicographically and outputs an integer value. substr (Function) Returns a substring of the input string by considering a subset or all of the following factors: starting index, length, regular expression, and regex group number. Syntax STRING str:substr( STRING input.string, INT begin.index, INT length, STRING regex, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be processed. STRING No No begin.index Starting index to consider for the substring. INT No No length The length of the substring. INT No No regex The regular expression that should be matched with the input string. STRING No No group.number The regex group number INT No No Examples EXAMPLE 1 substr( AbCDefghiJ KLMN , 4) This outputs the substring based on the given begin.index . In this scenario, the output is \"efghiJ KLMN\". EXAMPLE 2 substr( AbCDefghiJ KLMN , 2, 4) This outputs the substring based on the given begin.index and length. In this scenario, the output is \"CDef\". EXAMPLE 3 substr( WSO2D efghiJ KLMN , '^WSO2(.*)') This outputs the substring by applying the regex. In this scenario, the output is \"WSO2D efghiJ KLMN\". EXAMPLE 4 substr( WSO2 cep WSO2 XX E hi hA WSO2 heAllo , 'WSO2(.*)A(.*)', 2) This outputs the substring by applying the regex and considering the group.number . In this scenario, the output is \" ello\". trim (Function) Returns a copy of the input string without the leading and trailing whitespace (if any). Syntax STRING str:trim( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that needs to be trimmed. STRING No No Examples EXAMPLE 1 trim( AbCDefghiJ KLMN ) This returns a copy of the input.string with the leading and/or trailing white-spaces omitted. In this scenario, the output is \"AbCDefghiJ KLMN\". unhex (Function) Returns a string by converting the hexadecimal characters in the input string. Syntax STRING str:unhex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The hexadecimal input string that needs to be converted to string. STRING No No Examples EXAMPLE 1 unhex( 4d7953514c ) This converts the hexadecimal value to string. upper (Function) Converts the simple letters in the input string to the equivalent capital/block letters. Syntax STRING str:upper( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be converted to the upper case (equivalent capital/block letters). STRING No No Examples EXAMPLE 1 upper( Hello World ) This converts the simple letters in the input.string to theequivalent capital letters. In this scenario, the output is \"HELLO WORLD\". tokenize (Stream Processor) This function splits the input string into tokens using a given regular expression and returns the split tokens. Syntax str:tokenize( STRING input.string, STRING regex, BOOL distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string which needs to be split. STRING No No regex The string value which is used to tokenize the 'input.string'. STRING No No distinct This flag is used to return only distinct values. false BOOL Yes No Extra Return Attributes Name Description Possible Types token The attribute which contains a single token. STRING Examples EXAMPLE 1 define stream inputStream (str string); @info(name = 'query1') from inputStream#str:tokenize(str , ',') select text insert into outputStream; This query performs tokenization on the given string. If the str is \"Android,Windows8,iOS\", then the string is split into 3 events containing the token attribute values, i.e., Android , Windows8 and iOS .","title":"4.1.0"},{"location":"api/4.1.0/#api-docs-v410","text":"","title":"API Docs - v4.1.0"},{"location":"api/4.1.0/#str","text":"","title":"Str"},{"location":"api/4.1.0/#groupconcat-aggregate-function","text":"This function aggregates the received events by concatenating the keys in those events using a separator, e.g.,a comma (,) or a hyphen (-), and returns the concatenated key string. Syntax STRING str:groupConcat( STRING key, STRING separator, STRING distinct, STRING order) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key The string that needs to be aggregated. STRING No No separator The separator that separates each string key after concatenating the keys. , STRING Yes No distinct This is used to only have distinct values in the concatenated string that is returned. false STRING Yes No order This parameter accepts 'ASC' or 'DESC' strings to sort the string keys in either ascending or descending order respectively. No order STRING Yes No Examples EXAMPLE 1 from InputStream#window.time(5 min) select str:groupConcat( key ) as groupedKeys input OutputStream; When we input events having values for the key as 'A' , 'B' , 'S' , 'C' , 'A' , it returns \"A,B,S,C,A\" to the 'OutputStream'. EXAMPLE 2 from InputStream#window.time(5 min) select groupConcat( key , - ,true, ASC ) as groupedKeys input OutputStream; When we input events having values for the key as 'A' , 'B' , 'S' , 'C' , 'A' , specify the seperator as hyphen and choose the order to be ascending, the function returns \"A-B-C-S\" to the 'OutputStream'.","title":"groupConcat (Aggregate Function)"},{"location":"api/4.1.0/#charat-function","text":"This function returns the 'char' value that is present at the given index position. of the input string. Syntax STRING str:charAt( STRING input.value, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.value The input string of which the char value at the given position needs to be returned. STRING No No index The variable that specifies the index of the char value that needs to be returned. INT No No Examples EXAMPLE 1 charAt( WSO2 , 1) In this case, the functiion returns the character that exists at index 1. Hence, it returns 'S'.","title":"charAt (Function)"},{"location":"api/4.1.0/#coalesce-function","text":"This returns the first input parameter value of the given argument, that is not null. Syntax INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT str:coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have one or more input parameters in any data type. However, all the specified parameters are required to be of the same type. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No No Examples EXAMPLE 1 coalesce(null, BBB , CCC ) This returns the first input parameter that is not null. In this example, it returns \"BBB\".","title":"coalesce (Function)"},{"location":"api/4.1.0/#concat-function","text":"This function returns a string value that is obtained as a result of concatenating two or more input string values. Syntax STRING str:concat( STRING argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn This can have two or more string type input parameters. STRING No No Examples EXAMPLE 1 concat( D533 , 8JU^ , XYZ ) This returns a string value by concatenating two or more given arguments. In the example shown above, it returns \"D5338JU^XYZ\".","title":"concat (Function)"},{"location":"api/4.1.0/#contains-function","text":"This function returns true if the input.string contains the specified sequence of char values in the search.string . Syntax BOOL str:contains( STRING input.string, STRING search.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string Input string value. STRING No No search.string The string value to be searched for in the input.string . STRING No No Examples EXAMPLE 1 contains( 21 products are produced by WSO2 currently , WSO2 ) This returns a boolean value as the output. In this case, it returns true .","title":"contains (Function)"},{"location":"api/4.1.0/#equalsignorecase-function","text":"This returns a boolean value by comparing two strings lexicographically without considering the letter case. Syntax BOOL str:equalsIgnoreCase( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument. This is compared with the first argument. STRING No No Examples EXAMPLE 1 equalsIgnoreCase( WSO2 , wso2 ) This returns a boolean value as the output. In this scenario, it returns \"true\".","title":"equalsIgnoreCase (Function)"},{"location":"api/4.1.0/#filltemplate-function","text":"This extension replaces the templated positions that are marked with an index value in a specified template with the strings provided. Syntax STRING str:fillTemplate( STRING template, STRING|INT|LONG|DOUBLE|FLOAT|BOOL replacement.strings) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic template The string with templated fields that needs to be filled with the given strings. The format of the templated fields should be as follows: {{INDEX}} where 'INDEX' is an integer. This index is used to map the strings that are used to replace the templated fields. STRING No No replacement.strings The strings with which the templated positions in the template need to be replaced. The minimum of two arguments need to be included in the execution string. There is no upper limit on the number of arguments allowed to be included. STRING INT LONG DOUBLE FLOAT BOOL No No Examples EXAMPLE 1 str:fillTemplate( This is {{1}} for the {{2}} function , 'an example', 'fillTemplate') In this example, the template is 'This is {{1}} for the {{2}} function'.Here, the templated string {{1}} is replaced with the 1st string value provided, which is 'an example'. {{2}} is replaced with the 2nd string provided, which is 'fillTemplate' The complete return string is 'This is an example for the fillTemplate function'.","title":"fillTemplate (Function)"},{"location":"api/4.1.0/#hex-function","text":"This function returns a hexadecimal string by converting each byte of each character in the input string to two hexadecimal digits. Syntax STRING str:hex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the hexadecimal value. STRING No No Examples EXAMPLE 1 hex( MySQL ) This returns the hexadecimal value of the input.string. In this scenario, the output is \"4d7953514c\".","title":"hex (Function)"},{"location":"api/4.1.0/#length-function","text":"Returns the length of the input string. Syntax INT str:length( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the length. STRING No No Examples EXAMPLE 1 length( Hello World ) This outputs the length of the provided string. In this scenario, the, output is 11 .","title":"length (Function)"},{"location":"api/4.1.0/#lower-function","text":"Converts the capital letters in the input string to the equivalent simple letters. Syntax STRING str:lower( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to convert to the lower case (i.e., equivalent simple letters). STRING No No Examples EXAMPLE 1 lower( WSO2 cep ) This converts the capital letters in the input.string to the equivalent simple letters. In this scenario, the output is \"wso2 cep \".","title":"lower (Function)"},{"location":"api/4.1.0/#regexp-function","text":"Returns a boolean value based on the matchability of the input string and the given regular expression. Syntax BOOL str:regexp( STRING input.string, STRING regex) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to match with the given regular expression. STRING No No regex The regular expression to be matched with the input string. STRING No No Examples EXAMPLE 1 regexp( WSO2 abcdh , WSO(.*h) ) This returns a boolean value after matching regular expression with the given string. In this scenario, it returns \"true\" as the output.","title":"regexp (Function)"},{"location":"api/4.1.0/#repeat-function","text":"Repeats the input string for a specified number of times. Syntax STRING str:repeat( STRING input.string, INT times) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that is repeated the number of times as defined by the user. STRING No No times The number of times the input.string needs to be repeated . INT No No Examples EXAMPLE 1 repeat( StRing 1 , 3) This returns a string value by repeating the string for a specified number of times. In this scenario, the output is \"StRing 1StRing 1StRing 1\".","title":"repeat (Function)"},{"location":"api/4.1.0/#replaceall-function","text":"Finds all the substrings of the input string that matches with the given expression, and replaces them with the given replacement string. Syntax STRING str:replaceAll( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No regex The regular expression to be matched with the input string. STRING No No replacement.string The string with which each substring that matches the given expression should be replaced. STRING No No Examples EXAMPLE 1 replaceAll( hello hi hello , 'hello', 'test') This returns a string after replacing the substrings of the input string with the replacement string. In this scenario, the output is \"test hi test\" .","title":"replaceAll (Function)"},{"location":"api/4.1.0/#replacefirst-function","text":"Finds the first substring of the input string that matches with the given regular expression, and replaces itwith the given replacement string. Syntax STRING str:replaceFirst( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be replaced. STRING No No regex The regular expression with which the input string should be matched. STRING No No replacement.string The string with which the first substring of input string that matches the regular expression should be replaced. STRING No No Examples EXAMPLE 1 replaceFirst( hello WSO2 A hello , 'WSO2(.*)A', 'XXXX') This returns a string after replacing the first substring with the given replacement string. In this scenario, the output is \"hello XXXX hello\".","title":"replaceFirst (Function)"},{"location":"api/4.1.0/#reverse-function","text":"Returns the input string in the reverse order character-wise and string-wise. Syntax STRING str:reverse( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be reversed. STRING No No Examples EXAMPLE 1 reverse( Hello World ) This outputs a string value by reversing the incoming input.string . In this scenario, the output is \"dlroW olleH\".","title":"reverse (Function)"},{"location":"api/4.1.0/#split-function","text":"Splits the input.string into substrings using the value parsed in the split.string and returns the substring at the position specified in the group.number . Syntax STRING str:split( STRING input.string, STRING split.string, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No split.string The string value to be used to split the input.string . STRING No No group.number The index of the split group INT No No Examples EXAMPLE 1 split( WSO2,ABM,NSFT , , , 0) This splits the given input.string by given split.string and returns the string in the index given by group.number. In this scenario, the output will is \"WSO2\".","title":"split (Function)"},{"location":"api/4.1.0/#strcmp-function","text":"Compares two strings lexicographically and returns an integer value. If both strings are equal, 0 is returned. If the first string is lexicographically greater than the second string, a positive value is returned. If the first string is lexicographically greater than the second string, a negative value is returned. Syntax INT str:strcmp( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument that should be compared with the first argument lexicographically. STRING No No Examples EXAMPLE 1 strcmp( AbCDefghiJ KLMN , 'Hello') This compares two strings lexicographically and outputs an integer value.","title":"strcmp (Function)"},{"location":"api/4.1.0/#substr-function","text":"Returns a substring of the input string by considering a subset or all of the following factors: starting index, length, regular expression, and regex group number. Syntax STRING str:substr( STRING input.string, INT begin.index, INT length, STRING regex, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be processed. STRING No No begin.index Starting index to consider for the substring. INT No No length The length of the substring. INT No No regex The regular expression that should be matched with the input string. STRING No No group.number The regex group number INT No No Examples EXAMPLE 1 substr( AbCDefghiJ KLMN , 4) This outputs the substring based on the given begin.index . In this scenario, the output is \"efghiJ KLMN\". EXAMPLE 2 substr( AbCDefghiJ KLMN , 2, 4) This outputs the substring based on the given begin.index and length. In this scenario, the output is \"CDef\". EXAMPLE 3 substr( WSO2D efghiJ KLMN , '^WSO2(.*)') This outputs the substring by applying the regex. In this scenario, the output is \"WSO2D efghiJ KLMN\". EXAMPLE 4 substr( WSO2 cep WSO2 XX E hi hA WSO2 heAllo , 'WSO2(.*)A(.*)', 2) This outputs the substring by applying the regex and considering the group.number . In this scenario, the output is \" ello\".","title":"substr (Function)"},{"location":"api/4.1.0/#trim-function","text":"Returns a copy of the input string without the leading and trailing whitespace (if any). Syntax STRING str:trim( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that needs to be trimmed. STRING No No Examples EXAMPLE 1 trim( AbCDefghiJ KLMN ) This returns a copy of the input.string with the leading and/or trailing white-spaces omitted. In this scenario, the output is \"AbCDefghiJ KLMN\".","title":"trim (Function)"},{"location":"api/4.1.0/#unhex-function","text":"Returns a string by converting the hexadecimal characters in the input string. Syntax STRING str:unhex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The hexadecimal input string that needs to be converted to string. STRING No No Examples EXAMPLE 1 unhex( 4d7953514c ) This converts the hexadecimal value to string.","title":"unhex (Function)"},{"location":"api/4.1.0/#upper-function","text":"Converts the simple letters in the input string to the equivalent capital/block letters. Syntax STRING str:upper( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be converted to the upper case (equivalent capital/block letters). STRING No No Examples EXAMPLE 1 upper( Hello World ) This converts the simple letters in the input.string to theequivalent capital letters. In this scenario, the output is \"HELLO WORLD\".","title":"upper (Function)"},{"location":"api/4.1.0/#tokenize-stream-processor","text":"This function splits the input string into tokens using a given regular expression and returns the split tokens. Syntax str:tokenize( STRING input.string, STRING regex, BOOL distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string which needs to be split. STRING No No regex The string value which is used to tokenize the 'input.string'. STRING No No distinct This flag is used to return only distinct values. false BOOL Yes No Extra Return Attributes Name Description Possible Types token The attribute which contains a single token. STRING Examples EXAMPLE 1 define stream inputStream (str string); @info(name = 'query1') from inputStream#str:tokenize(str , ',') select text insert into outputStream; This query performs tokenization on the given string. If the str is \"Android,Windows8,iOS\", then the string is split into 3 events containing the token attribute values, i.e., Android , Windows8 and iOS .","title":"tokenize (Stream Processor)"},{"location":"api/5.0.0/","text":"API Docs - v5.0.0 Str groupConcat (Aggregate Function) This function aggregates the received events by concatenating the keys in those events using a separator, e.g.,a comma (,) or a hyphen (-), and returns the concatenated key string. Syntax STRING str:groupConcat( STRING key, STRING separator, STRING distinct, STRING order) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key The string that needs to be aggregated. STRING No No separator The separator that separates each string key after concatenating the keys. , STRING Yes No distinct This is used to only have distinct values in the concatenated string that is returned. false STRING Yes No order This parameter accepts 'ASC' or 'DESC' strings to sort the string keys in either ascending or descending order respectively. No order STRING Yes No Examples EXAMPLE 1 from InputStream#window.time(5 min) select str:groupConcat( key ) as groupedKeys input OutputStream; When we input events having values for the key as 'A' , 'B' , 'S' , 'C' , 'A' , it returns \"A,B,S,C,A\" to the 'OutputStream'. EXAMPLE 2 from InputStream#window.time(5 min) select groupConcat( key , - ,true, ASC ) as groupedKeys input OutputStream; When we input events having values for the key as 'A' , 'B' , 'S' , 'C' , 'A' , specify the seperator as hyphen and choose the order to be ascending, the function returns \"A-B-C-S\" to the 'OutputStream'. charAt (Function) This function returns the 'char' value that is present at the given index position. of the input string. Syntax STRING str:charAt( STRING input.value, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.value The input string of which the char value at the given position needs to be returned. STRING No No index The variable that specifies the index of the char value that needs to be returned. INT No No Examples EXAMPLE 1 charAt( WSO2 , 1) In this case, the functiion returns the character that exists at index 1. Hence, it returns 'S'. coalesce (Function) This returns the first input parameter value of the given argument, that is not null. Syntax INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT str:coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have one or more input parameters in any data type. However, all the specified parameters are required to be of the same type. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No No Examples EXAMPLE 1 coalesce(null, BBB , CCC ) This returns the first input parameter that is not null. In this example, it returns \"BBB\". concat (Function) This function returns a string value that is obtained as a result of concatenating two or more input string values. Syntax STRING str:concat( STRING argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn This can have two or more string type input parameters. STRING No No Examples EXAMPLE 1 concat( D533 , 8JU^ , XYZ ) This returns a string value by concatenating two or more given arguments. In the example shown above, it returns \"D5338JU^XYZ\". contains (Function) This function returns true if the input.string contains the specified sequence of char values in the search.string . Syntax BOOL str:contains( STRING input.string, STRING search.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string Input string value. STRING No No search.string The string value to be searched for in the input.string . STRING No No Examples EXAMPLE 1 contains( 21 products are produced by WSO2 currently , WSO2 ) This returns a boolean value as the output. In this case, it returns true . equalsIgnoreCase (Function) This returns a boolean value by comparing two strings lexicographically without considering the letter case. Syntax BOOL str:equalsIgnoreCase( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument. This is compared with the first argument. STRING No No Examples EXAMPLE 1 equalsIgnoreCase( WSO2 , wso2 ) This returns a boolean value as the output. In this scenario, it returns \"true\". fillTemplate (Function) This extension replaces the templated positions that are marked with an index value in a specified template with the strings provided. Syntax STRING str:fillTemplate( STRING template, STRING|INT|LONG|DOUBLE|FLOAT|BOOL replacement.strings) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic template The string with templated fields that needs to be filled with the given strings. The format of the templated fields should be as follows: {{INDEX}} where 'INDEX' is an integer. This index is used to map the strings that are used to replace the templated fields. STRING No No replacement.strings The strings with which the templated positions in the template need to be replaced. The minimum of two arguments need to be included in the execution string. There is no upper limit on the number of arguments allowed to be included. STRING INT LONG DOUBLE FLOAT BOOL No No Examples EXAMPLE 1 str:fillTemplate( This is {{1}} for the {{2}} function , 'an example', 'fillTemplate') In this example, the template is 'This is {{1}} for the {{2}} function'.Here, the templated string {{1}} is replaced with the 1st string value provided, which is 'an example'. {{2}} is replaced with the 2nd string provided, which is 'fillTemplate' The complete return string is 'This is an example for the fillTemplate function'. hex (Function) This function returns a hexadecimal string by converting each byte of each character in the input string to two hexadecimal digits. Syntax STRING str:hex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the hexadecimal value. STRING No No Examples EXAMPLE 1 hex( MySQL ) This returns the hexadecimal value of the input.string. In this scenario, the output is \"4d7953514c\". length (Function) Returns the length of the input string. Syntax INT str:length( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the length. STRING No No Examples EXAMPLE 1 length( Hello World ) This outputs the length of the provided string. In this scenario, the, output is 11 . lower (Function) Converts the capital letters in the input string to the equivalent simple letters. Syntax STRING str:lower( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to convert to the lower case (i.e., equivalent simple letters). STRING No No Examples EXAMPLE 1 lower( WSO2 cep ) This converts the capital letters in the input.string to the equivalent simple letters. In this scenario, the output is \"wso2 cep \". regexp (Function) Returns a boolean value based on the matchability of the input string and the given regular expression. Syntax BOOL str:regexp( STRING input.string, STRING regex) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to match with the given regular expression. STRING No No regex The regular expression to be matched with the input string. STRING No No Examples EXAMPLE 1 regexp( WSO2 abcdh , WSO(.*h) ) This returns a boolean value after matching regular expression with the given string. In this scenario, it returns \"true\" as the output. repeat (Function) Repeats the input string for a specified number of times. Syntax STRING str:repeat( STRING input.string, INT times) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that is repeated the number of times as defined by the user. STRING No No times The number of times the input.string needs to be repeated . INT No No Examples EXAMPLE 1 repeat( StRing 1 , 3) This returns a string value by repeating the string for a specified number of times. In this scenario, the output is \"StRing 1StRing 1StRing 1\". replaceAll (Function) Finds all the substrings of the input string that matches with the given expression, and replaces them with the given replacement string. Syntax STRING str:replaceAll( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No regex The regular expression to be matched with the input string. STRING No No replacement.string The string with which each substring that matches the given expression should be replaced. STRING No No Examples EXAMPLE 1 replaceAll( hello hi hello , 'hello', 'test') This returns a string after replacing the substrings of the input string with the replacement string. In this scenario, the output is \"test hi test\" . replaceFirst (Function) Finds the first substring of the input string that matches with the given regular expression, and replaces itwith the given replacement string. Syntax STRING str:replaceFirst( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be replaced. STRING No No regex The regular expression with which the input string should be matched. STRING No No replacement.string The string with which the first substring of input string that matches the regular expression should be replaced. STRING No No Examples EXAMPLE 1 replaceFirst( hello WSO2 A hello , 'WSO2(.*)A', 'XXXX') This returns a string after replacing the first substring with the given replacement string. In this scenario, the output is \"hello XXXX hello\". reverse (Function) Returns the input string in the reverse order character-wise and string-wise. Syntax STRING str:reverse( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be reversed. STRING No No Examples EXAMPLE 1 reverse( Hello World ) This outputs a string value by reversing the incoming input.string . In this scenario, the output is \"dlroW olleH\". split (Function) Splits the input.string into substrings using the value parsed in the split.string and returns the substring at the position specified in the group.number . Syntax STRING str:split( STRING input.string, STRING split.string, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No split.string The string value to be used to split the input.string . STRING No No group.number The index of the split group INT No No Examples EXAMPLE 1 split( WSO2,ABM,NSFT , , , 0) This splits the given input.string by given split.string and returns the string in the index given by group.number. In this scenario, the output will is \"WSO2\". strcmp (Function) Compares two strings lexicographically and returns an integer value. If both strings are equal, 0 is returned. If the first string is lexicographically greater than the second string, a positive value is returned. If the first string is lexicographically greater than the second string, a negative value is returned. Syntax INT str:strcmp( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument that should be compared with the first argument lexicographically. STRING No No Examples EXAMPLE 1 strcmp( AbCDefghiJ KLMN , 'Hello') This compares two strings lexicographically and outputs an integer value. substr (Function) Returns a substring of the input string by considering a subset or all of the following factors: starting index, length, regular expression, and regex group number. Syntax STRING str:substr( STRING input.string, INT begin.index, INT length, STRING regex, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be processed. STRING No No begin.index Starting index to consider for the substring. INT No No length The length of the substring. INT No No regex The regular expression that should be matched with the input string. STRING No No group.number The regex group number INT No No Examples EXAMPLE 1 substr( AbCDefghiJ KLMN , 4) This outputs the substring based on the given begin.index . In this scenario, the output is \"efghiJ KLMN\". EXAMPLE 2 substr( AbCDefghiJ KLMN , 2, 4) This outputs the substring based on the given begin.index and length. In this scenario, the output is \"CDef\". EXAMPLE 3 substr( WSO2D efghiJ KLMN , '^WSO2(.*)') This outputs the substring by applying the regex. In this scenario, the output is \"WSO2D efghiJ KLMN\". EXAMPLE 4 substr( WSO2 cep WSO2 XX E hi hA WSO2 heAllo , 'WSO2(.*)A(.*)', 2) This outputs the substring by applying the regex and considering the group.number . In this scenario, the output is \" ello\". trim (Function) Returns a copy of the input string without the leading and trailing whitespace (if any). Syntax STRING str:trim( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that needs to be trimmed. STRING No No Examples EXAMPLE 1 trim( AbCDefghiJ KLMN ) This returns a copy of the input.string with the leading and/or trailing white-spaces omitted. In this scenario, the output is \"AbCDefghiJ KLMN\". unhex (Function) Returns a string by converting the hexadecimal characters in the input string. Syntax STRING str:unhex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The hexadecimal input string that needs to be converted to string. STRING No No Examples EXAMPLE 1 unhex( 4d7953514c ) This converts the hexadecimal value to string. upper (Function) Converts the simple letters in the input string to the equivalent capital/block letters. Syntax STRING str:upper( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be converted to the upper case (equivalent capital/block letters). STRING No No Examples EXAMPLE 1 upper( Hello World ) This converts the simple letters in the input.string to theequivalent capital letters. In this scenario, the output is \"HELLO WORLD\". tokenize (Stream Processor) This function splits the input string into tokens using a given regular expression and returns the split tokens. Syntax str:tokenize( STRING input.string, STRING regex, BOOL distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string which needs to be split. STRING No No regex The string value which is used to tokenize the 'input.string'. STRING No No distinct This flag is used to return only distinct values. false BOOL Yes No Extra Return Attributes Name Description Possible Types token The attribute which contains a single token. STRING Examples EXAMPLE 1 define stream inputStream (str string); @info(name = 'query1') from inputStream#str:tokenize(str , ',') select text insert into outputStream; This query performs tokenization on the given string. If the str is \"Android,Windows8,iOS\", then the string is split into 3 events containing the token attribute values, i.e., Android , Windows8 and iOS .","title":"5.0.0"},{"location":"api/5.0.0/#api-docs-v500","text":"","title":"API Docs - v5.0.0"},{"location":"api/5.0.0/#str","text":"","title":"Str"},{"location":"api/5.0.0/#groupconcat-aggregate-function","text":"This function aggregates the received events by concatenating the keys in those events using a separator, e.g.,a comma (,) or a hyphen (-), and returns the concatenated key string. Syntax STRING str:groupConcat( STRING key, STRING separator, STRING distinct, STRING order) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key The string that needs to be aggregated. STRING No No separator The separator that separates each string key after concatenating the keys. , STRING Yes No distinct This is used to only have distinct values in the concatenated string that is returned. false STRING Yes No order This parameter accepts 'ASC' or 'DESC' strings to sort the string keys in either ascending or descending order respectively. No order STRING Yes No Examples EXAMPLE 1 from InputStream#window.time(5 min) select str:groupConcat( key ) as groupedKeys input OutputStream; When we input events having values for the key as 'A' , 'B' , 'S' , 'C' , 'A' , it returns \"A,B,S,C,A\" to the 'OutputStream'. EXAMPLE 2 from InputStream#window.time(5 min) select groupConcat( key , - ,true, ASC ) as groupedKeys input OutputStream; When we input events having values for the key as 'A' , 'B' , 'S' , 'C' , 'A' , specify the seperator as hyphen and choose the order to be ascending, the function returns \"A-B-C-S\" to the 'OutputStream'.","title":"groupConcat (Aggregate Function)"},{"location":"api/5.0.0/#charat-function","text":"This function returns the 'char' value that is present at the given index position. of the input string. Syntax STRING str:charAt( STRING input.value, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.value The input string of which the char value at the given position needs to be returned. STRING No No index The variable that specifies the index of the char value that needs to be returned. INT No No Examples EXAMPLE 1 charAt( WSO2 , 1) In this case, the functiion returns the character that exists at index 1. Hence, it returns 'S'.","title":"charAt (Function)"},{"location":"api/5.0.0/#coalesce-function","text":"This returns the first input parameter value of the given argument, that is not null. Syntax INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT str:coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have one or more input parameters in any data type. However, all the specified parameters are required to be of the same type. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No No Examples EXAMPLE 1 coalesce(null, BBB , CCC ) This returns the first input parameter that is not null. In this example, it returns \"BBB\".","title":"coalesce (Function)"},{"location":"api/5.0.0/#concat-function","text":"This function returns a string value that is obtained as a result of concatenating two or more input string values. Syntax STRING str:concat( STRING argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn This can have two or more string type input parameters. STRING No No Examples EXAMPLE 1 concat( D533 , 8JU^ , XYZ ) This returns a string value by concatenating two or more given arguments. In the example shown above, it returns \"D5338JU^XYZ\".","title":"concat (Function)"},{"location":"api/5.0.0/#contains-function","text":"This function returns true if the input.string contains the specified sequence of char values in the search.string . Syntax BOOL str:contains( STRING input.string, STRING search.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string Input string value. STRING No No search.string The string value to be searched for in the input.string . STRING No No Examples EXAMPLE 1 contains( 21 products are produced by WSO2 currently , WSO2 ) This returns a boolean value as the output. In this case, it returns true .","title":"contains (Function)"},{"location":"api/5.0.0/#equalsignorecase-function","text":"This returns a boolean value by comparing two strings lexicographically without considering the letter case. Syntax BOOL str:equalsIgnoreCase( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument. This is compared with the first argument. STRING No No Examples EXAMPLE 1 equalsIgnoreCase( WSO2 , wso2 ) This returns a boolean value as the output. In this scenario, it returns \"true\".","title":"equalsIgnoreCase (Function)"},{"location":"api/5.0.0/#filltemplate-function","text":"This extension replaces the templated positions that are marked with an index value in a specified template with the strings provided. Syntax STRING str:fillTemplate( STRING template, STRING|INT|LONG|DOUBLE|FLOAT|BOOL replacement.strings) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic template The string with templated fields that needs to be filled with the given strings. The format of the templated fields should be as follows: {{INDEX}} where 'INDEX' is an integer. This index is used to map the strings that are used to replace the templated fields. STRING No No replacement.strings The strings with which the templated positions in the template need to be replaced. The minimum of two arguments need to be included in the execution string. There is no upper limit on the number of arguments allowed to be included. STRING INT LONG DOUBLE FLOAT BOOL No No Examples EXAMPLE 1 str:fillTemplate( This is {{1}} for the {{2}} function , 'an example', 'fillTemplate') In this example, the template is 'This is {{1}} for the {{2}} function'.Here, the templated string {{1}} is replaced with the 1st string value provided, which is 'an example'. {{2}} is replaced with the 2nd string provided, which is 'fillTemplate' The complete return string is 'This is an example for the fillTemplate function'.","title":"fillTemplate (Function)"},{"location":"api/5.0.0/#hex-function","text":"This function returns a hexadecimal string by converting each byte of each character in the input string to two hexadecimal digits. Syntax STRING str:hex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the hexadecimal value. STRING No No Examples EXAMPLE 1 hex( MySQL ) This returns the hexadecimal value of the input.string. In this scenario, the output is \"4d7953514c\".","title":"hex (Function)"},{"location":"api/5.0.0/#length-function","text":"Returns the length of the input string. Syntax INT str:length( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the length. STRING No No Examples EXAMPLE 1 length( Hello World ) This outputs the length of the provided string. In this scenario, the, output is 11 .","title":"length (Function)"},{"location":"api/5.0.0/#lower-function","text":"Converts the capital letters in the input string to the equivalent simple letters. Syntax STRING str:lower( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to convert to the lower case (i.e., equivalent simple letters). STRING No No Examples EXAMPLE 1 lower( WSO2 cep ) This converts the capital letters in the input.string to the equivalent simple letters. In this scenario, the output is \"wso2 cep \".","title":"lower (Function)"},{"location":"api/5.0.0/#regexp-function","text":"Returns a boolean value based on the matchability of the input string and the given regular expression. Syntax BOOL str:regexp( STRING input.string, STRING regex) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to match with the given regular expression. STRING No No regex The regular expression to be matched with the input string. STRING No No Examples EXAMPLE 1 regexp( WSO2 abcdh , WSO(.*h) ) This returns a boolean value after matching regular expression with the given string. In this scenario, it returns \"true\" as the output.","title":"regexp (Function)"},{"location":"api/5.0.0/#repeat-function","text":"Repeats the input string for a specified number of times. Syntax STRING str:repeat( STRING input.string, INT times) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that is repeated the number of times as defined by the user. STRING No No times The number of times the input.string needs to be repeated . INT No No Examples EXAMPLE 1 repeat( StRing 1 , 3) This returns a string value by repeating the string for a specified number of times. In this scenario, the output is \"StRing 1StRing 1StRing 1\".","title":"repeat (Function)"},{"location":"api/5.0.0/#replaceall-function","text":"Finds all the substrings of the input string that matches with the given expression, and replaces them with the given replacement string. Syntax STRING str:replaceAll( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No regex The regular expression to be matched with the input string. STRING No No replacement.string The string with which each substring that matches the given expression should be replaced. STRING No No Examples EXAMPLE 1 replaceAll( hello hi hello , 'hello', 'test') This returns a string after replacing the substrings of the input string with the replacement string. In this scenario, the output is \"test hi test\" .","title":"replaceAll (Function)"},{"location":"api/5.0.0/#replacefirst-function","text":"Finds the first substring of the input string that matches with the given regular expression, and replaces itwith the given replacement string. Syntax STRING str:replaceFirst( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be replaced. STRING No No regex The regular expression with which the input string should be matched. STRING No No replacement.string The string with which the first substring of input string that matches the regular expression should be replaced. STRING No No Examples EXAMPLE 1 replaceFirst( hello WSO2 A hello , 'WSO2(.*)A', 'XXXX') This returns a string after replacing the first substring with the given replacement string. In this scenario, the output is \"hello XXXX hello\".","title":"replaceFirst (Function)"},{"location":"api/5.0.0/#reverse-function","text":"Returns the input string in the reverse order character-wise and string-wise. Syntax STRING str:reverse( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be reversed. STRING No No Examples EXAMPLE 1 reverse( Hello World ) This outputs a string value by reversing the incoming input.string . In this scenario, the output is \"dlroW olleH\".","title":"reverse (Function)"},{"location":"api/5.0.0/#split-function","text":"Splits the input.string into substrings using the value parsed in the split.string and returns the substring at the position specified in the group.number . Syntax STRING str:split( STRING input.string, STRING split.string, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No split.string The string value to be used to split the input.string . STRING No No group.number The index of the split group INT No No Examples EXAMPLE 1 split( WSO2,ABM,NSFT , , , 0) This splits the given input.string by given split.string and returns the string in the index given by group.number. In this scenario, the output will is \"WSO2\".","title":"split (Function)"},{"location":"api/5.0.0/#strcmp-function","text":"Compares two strings lexicographically and returns an integer value. If both strings are equal, 0 is returned. If the first string is lexicographically greater than the second string, a positive value is returned. If the first string is lexicographically greater than the second string, a negative value is returned. Syntax INT str:strcmp( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument that should be compared with the first argument lexicographically. STRING No No Examples EXAMPLE 1 strcmp( AbCDefghiJ KLMN , 'Hello') This compares two strings lexicographically and outputs an integer value.","title":"strcmp (Function)"},{"location":"api/5.0.0/#substr-function","text":"Returns a substring of the input string by considering a subset or all of the following factors: starting index, length, regular expression, and regex group number. Syntax STRING str:substr( STRING input.string, INT begin.index, INT length, STRING regex, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be processed. STRING No No begin.index Starting index to consider for the substring. INT No No length The length of the substring. INT No No regex The regular expression that should be matched with the input string. STRING No No group.number The regex group number INT No No Examples EXAMPLE 1 substr( AbCDefghiJ KLMN , 4) This outputs the substring based on the given begin.index . In this scenario, the output is \"efghiJ KLMN\". EXAMPLE 2 substr( AbCDefghiJ KLMN , 2, 4) This outputs the substring based on the given begin.index and length. In this scenario, the output is \"CDef\". EXAMPLE 3 substr( WSO2D efghiJ KLMN , '^WSO2(.*)') This outputs the substring by applying the regex. In this scenario, the output is \"WSO2D efghiJ KLMN\". EXAMPLE 4 substr( WSO2 cep WSO2 XX E hi hA WSO2 heAllo , 'WSO2(.*)A(.*)', 2) This outputs the substring by applying the regex and considering the group.number . In this scenario, the output is \" ello\".","title":"substr (Function)"},{"location":"api/5.0.0/#trim-function","text":"Returns a copy of the input string without the leading and trailing whitespace (if any). Syntax STRING str:trim( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that needs to be trimmed. STRING No No Examples EXAMPLE 1 trim( AbCDefghiJ KLMN ) This returns a copy of the input.string with the leading and/or trailing white-spaces omitted. In this scenario, the output is \"AbCDefghiJ KLMN\".","title":"trim (Function)"},{"location":"api/5.0.0/#unhex-function","text":"Returns a string by converting the hexadecimal characters in the input string. Syntax STRING str:unhex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The hexadecimal input string that needs to be converted to string. STRING No No Examples EXAMPLE 1 unhex( 4d7953514c ) This converts the hexadecimal value to string.","title":"unhex (Function)"},{"location":"api/5.0.0/#upper-function","text":"Converts the simple letters in the input string to the equivalent capital/block letters. Syntax STRING str:upper( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be converted to the upper case (equivalent capital/block letters). STRING No No Examples EXAMPLE 1 upper( Hello World ) This converts the simple letters in the input.string to theequivalent capital letters. In this scenario, the output is \"HELLO WORLD\".","title":"upper (Function)"},{"location":"api/5.0.0/#tokenize-stream-processor","text":"This function splits the input string into tokens using a given regular expression and returns the split tokens. Syntax str:tokenize( STRING input.string, STRING regex, BOOL distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string which needs to be split. STRING No No regex The string value which is used to tokenize the 'input.string'. STRING No No distinct This flag is used to return only distinct values. false BOOL Yes No Extra Return Attributes Name Description Possible Types token The attribute which contains a single token. STRING Examples EXAMPLE 1 define stream inputStream (str string); @info(name = 'query1') from inputStream#str:tokenize(str , ',') select text insert into outputStream; This query performs tokenization on the given string. If the str is \"Android,Windows8,iOS\", then the string is split into 3 events containing the token attribute values, i.e., Android , Windows8 and iOS .","title":"tokenize (Stream Processor)"},{"location":"api/5.0.1/","text":"API Docs - v5.0.1 Str groupConcat (Aggregate Function) This function aggregates the received events by concatenating the keys in those events using a separator, e.g.,a comma (,) or a hyphen (-), and returns the concatenated key string. Syntax STRING str:groupConcat( STRING key, STRING separator, STRING distinct, STRING order) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key The string that needs to be aggregated. STRING No No separator The separator that separates each string key after concatenating the keys. , STRING Yes No distinct This is used to only have distinct values in the concatenated string that is returned. false STRING Yes No order This parameter accepts 'ASC' or 'DESC' strings to sort the string keys in either ascending or descending order respectively. No order STRING Yes No Examples EXAMPLE 1 from InputStream#window.time(5 min) select str:groupConcat( key ) as groupedKeys input OutputStream; When we input events having values for the key as 'A' , 'B' , 'S' , 'C' , 'A' , it returns \"A,B,S,C,A\" to the 'OutputStream'. EXAMPLE 2 from InputStream#window.time(5 min) select groupConcat( key , - ,true, ASC ) as groupedKeys input OutputStream; When we input events having values for the key as 'A' , 'B' , 'S' , 'C' , 'A' , specify the seperator as hyphen and choose the order to be ascending, the function returns \"A-B-C-S\" to the 'OutputStream'. charAt (Function) This function returns the 'char' value that is present at the given index position. of the input string. Syntax STRING str:charAt( STRING input.value, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.value The input string of which the char value at the given position needs to be returned. STRING No No index The variable that specifies the index of the char value that needs to be returned. INT No No Examples EXAMPLE 1 charAt( WSO2 , 1) In this case, the functiion returns the character that exists at index 1. Hence, it returns 'S'. coalesce (Function) This returns the first input parameter value of the given argument, that is not null. Syntax INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT str:coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have one or more input parameters in any data type. However, all the specified parameters are required to be of the same type. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No No Examples EXAMPLE 1 coalesce(null, BBB , CCC ) This returns the first input parameter that is not null. In this example, it returns \"BBB\". concat (Function) This function returns a string value that is obtained as a result of concatenating two or more input string values. Syntax STRING str:concat( STRING argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn This can have two or more string type input parameters. STRING No No Examples EXAMPLE 1 concat( D533 , 8JU^ , XYZ ) This returns a string value by concatenating two or more given arguments. In the example shown above, it returns \"D5338JU^XYZ\". contains (Function) This function returns true if the input.string contains the specified sequence of char values in the search.string . Syntax BOOL str:contains( STRING input.string, STRING search.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string Input string value. STRING No No search.string The string value to be searched for in the input.string . STRING No No Examples EXAMPLE 1 contains( 21 products are produced by WSO2 currently , WSO2 ) This returns a boolean value as the output. In this case, it returns true . equalsIgnoreCase (Function) This returns a boolean value by comparing two strings lexicographically without considering the letter case. Syntax BOOL str:equalsIgnoreCase( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument. This is compared with the first argument. STRING No No Examples EXAMPLE 1 equalsIgnoreCase( WSO2 , wso2 ) This returns a boolean value as the output. In this scenario, it returns \"true\". fillTemplate (Function) This extension replaces the templated positions that are marked with an index value in a specified template with the strings provided. Syntax STRING str:fillTemplate( STRING template, STRING|INT|LONG|DOUBLE|FLOAT|BOOL replacement.strings) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic template The string with templated fields that needs to be filled with the given strings. The format of the templated fields should be as follows: {{INDEX}} where 'INDEX' is an integer. This index is used to map the strings that are used to replace the templated fields. STRING No No replacement.strings The strings with which the templated positions in the template need to be replaced. The minimum of two arguments need to be included in the execution string. There is no upper limit on the number of arguments allowed to be included. STRING INT LONG DOUBLE FLOAT BOOL No No Examples EXAMPLE 1 str:fillTemplate( This is {{1}} for the {{2}} function , 'an example', 'fillTemplate') In this example, the template is 'This is {{1}} for the {{2}} function'.Here, the templated string {{1}} is replaced with the 1st string value provided, which is 'an example'. {{2}} is replaced with the 2nd string provided, which is 'fillTemplate' The complete return string is 'This is an example for the fillTemplate function'. hex (Function) This function returns a hexadecimal string by converting each byte of each character in the input string to two hexadecimal digits. Syntax STRING str:hex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the hexadecimal value. STRING No No Examples EXAMPLE 1 hex( MySQL ) This returns the hexadecimal value of the input.string. In this scenario, the output is \"4d7953514c\". length (Function) Returns the length of the input string. Syntax INT str:length( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the length. STRING No No Examples EXAMPLE 1 length( Hello World ) This outputs the length of the provided string. In this scenario, the, output is 11 . lower (Function) Converts the capital letters in the input string to the equivalent simple letters. Syntax STRING str:lower( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to convert to the lower case (i.e., equivalent simple letters). STRING No No Examples EXAMPLE 1 lower( WSO2 cep ) This converts the capital letters in the input.string to the equivalent simple letters. In this scenario, the output is \"wso2 cep \". regexp (Function) Returns a boolean value based on the matchability of the input string and the given regular expression. Syntax BOOL str:regexp( STRING input.string, STRING regex) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to match with the given regular expression. STRING No No regex The regular expression to be matched with the input string. STRING No No Examples EXAMPLE 1 regexp( WSO2 abcdh , WSO(.*h) ) This returns a boolean value after matching regular expression with the given string. In this scenario, it returns \"true\" as the output. repeat (Function) Repeats the input string for a specified number of times. Syntax STRING str:repeat( STRING input.string, INT times) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that is repeated the number of times as defined by the user. STRING No No times The number of times the input.string needs to be repeated . INT No No Examples EXAMPLE 1 repeat( StRing 1 , 3) This returns a string value by repeating the string for a specified number of times. In this scenario, the output is \"StRing 1StRing 1StRing 1\". replaceAll (Function) Finds all the substrings of the input string that matches with the given expression, and replaces them with the given replacement string. Syntax STRING str:replaceAll( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No regex The regular expression to be matched with the input string. STRING No No replacement.string The string with which each substring that matches the given expression should be replaced. STRING No No Examples EXAMPLE 1 replaceAll( hello hi hello , 'hello', 'test') This returns a string after replacing the substrings of the input string with the replacement string. In this scenario, the output is \"test hi test\" . replaceFirst (Function) Finds the first substring of the input string that matches with the given regular expression, and replaces itwith the given replacement string. Syntax STRING str:replaceFirst( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be replaced. STRING No No regex The regular expression with which the input string should be matched. STRING No No replacement.string The string with which the first substring of input string that matches the regular expression should be replaced. STRING No No Examples EXAMPLE 1 replaceFirst( hello WSO2 A hello , 'WSO2(.*)A', 'XXXX') This returns a string after replacing the first substring with the given replacement string. In this scenario, the output is \"hello XXXX hello\". reverse (Function) Returns the input string in the reverse order character-wise and string-wise. Syntax STRING str:reverse( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be reversed. STRING No No Examples EXAMPLE 1 reverse( Hello World ) This outputs a string value by reversing the incoming input.string . In this scenario, the output is \"dlroW olleH\". split (Function) Splits the input.string into substrings using the value parsed in the split.string and returns the substring at the position specified in the group.number . Syntax STRING str:split( STRING input.string, STRING split.string, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No split.string The string value to be used to split the input.string . STRING No No group.number The index of the split group INT No No Examples EXAMPLE 1 split( WSO2,ABM,NSFT , , , 0) This splits the given input.string by given split.string and returns the string in the index given by group.number. In this scenario, the output will is \"WSO2\". strcmp (Function) Compares two strings lexicographically and returns an integer value. If both strings are equal, 0 is returned. If the first string is lexicographically greater than the second string, a positive value is returned. If the first string is lexicographically greater than the second string, a negative value is returned. Syntax INT str:strcmp( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument that should be compared with the first argument lexicographically. STRING No No Examples EXAMPLE 1 strcmp( AbCDefghiJ KLMN , 'Hello') This compares two strings lexicographically and outputs an integer value. substr (Function) Returns a substring of the input string by considering a subset or all of the following factors: starting index, length, regular expression, and regex group number. Syntax STRING str:substr( STRING input.string, INT begin.index, INT length, STRING regex, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be processed. STRING No No begin.index Starting index to consider for the substring. INT No No length The length of the substring. INT No No regex The regular expression that should be matched with the input string. STRING No No group.number The regex group number INT No No Examples EXAMPLE 1 substr( AbCDefghiJ KLMN , 4) This outputs the substring based on the given begin.index . In this scenario, the output is \"efghiJ KLMN\". EXAMPLE 2 substr( AbCDefghiJ KLMN , 2, 4) This outputs the substring based on the given begin.index and length. In this scenario, the output is \"CDef\". EXAMPLE 3 substr( WSO2D efghiJ KLMN , '^WSO2(.*)') This outputs the substring by applying the regex. In this scenario, the output is \"WSO2D efghiJ KLMN\". EXAMPLE 4 substr( WSO2 cep WSO2 XX E hi hA WSO2 heAllo , 'WSO2(.*)A(.*)', 2) This outputs the substring by applying the regex and considering the group.number . In this scenario, the output is \" ello\". trim (Function) Returns a copy of the input string without the leading and trailing whitespace (if any). Syntax STRING str:trim( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that needs to be trimmed. STRING No No Examples EXAMPLE 1 trim( AbCDefghiJ KLMN ) This returns a copy of the input.string with the leading and/or trailing white-spaces omitted. In this scenario, the output is \"AbCDefghiJ KLMN\". unhex (Function) Returns a string by converting the hexadecimal characters in the input string. Syntax STRING str:unhex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The hexadecimal input string that needs to be converted to string. STRING No No Examples EXAMPLE 1 unhex( 4d7953514c ) This converts the hexadecimal value to string. upper (Function) Converts the simple letters in the input string to the equivalent capital/block letters. Syntax STRING str:upper( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be converted to the upper case (equivalent capital/block letters). STRING No No Examples EXAMPLE 1 upper( Hello World ) This converts the simple letters in the input.string to theequivalent capital letters. In this scenario, the output is \"HELLO WORLD\". tokenize (Stream Processor) This function splits the input string into tokens using a given regular expression and returns the split tokens. Syntax str:tokenize( STRING input.string, STRING regex, BOOL distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string which needs to be split. STRING No No regex The string value which is used to tokenize the 'input.string'. STRING No No distinct This flag is used to return only distinct values. false BOOL Yes No Extra Return Attributes Name Description Possible Types token The attribute which contains a single token. STRING Examples EXAMPLE 1 define stream inputStream (str string); @info(name = 'query1') from inputStream#str:tokenize(str , ',') select text insert into outputStream; This query performs tokenization on the given string. If the str is \"Android,Windows8,iOS\", then the string is split into 3 events containing the token attribute values, i.e., Android , Windows8 and iOS .","title":"5.0.1"},{"location":"api/5.0.1/#api-docs-v501","text":"","title":"API Docs - v5.0.1"},{"location":"api/5.0.1/#str","text":"","title":"Str"},{"location":"api/5.0.1/#groupconcat-aggregate-function","text":"This function aggregates the received events by concatenating the keys in those events using a separator, e.g.,a comma (,) or a hyphen (-), and returns the concatenated key string. Syntax STRING str:groupConcat( STRING key, STRING separator, STRING distinct, STRING order) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key The string that needs to be aggregated. STRING No No separator The separator that separates each string key after concatenating the keys. , STRING Yes No distinct This is used to only have distinct values in the concatenated string that is returned. false STRING Yes No order This parameter accepts 'ASC' or 'DESC' strings to sort the string keys in either ascending or descending order respectively. No order STRING Yes No Examples EXAMPLE 1 from InputStream#window.time(5 min) select str:groupConcat( key ) as groupedKeys input OutputStream; When we input events having values for the key as 'A' , 'B' , 'S' , 'C' , 'A' , it returns \"A,B,S,C,A\" to the 'OutputStream'. EXAMPLE 2 from InputStream#window.time(5 min) select groupConcat( key , - ,true, ASC ) as groupedKeys input OutputStream; When we input events having values for the key as 'A' , 'B' , 'S' , 'C' , 'A' , specify the seperator as hyphen and choose the order to be ascending, the function returns \"A-B-C-S\" to the 'OutputStream'.","title":"groupConcat (Aggregate Function)"},{"location":"api/5.0.1/#charat-function","text":"This function returns the 'char' value that is present at the given index position. of the input string. Syntax STRING str:charAt( STRING input.value, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.value The input string of which the char value at the given position needs to be returned. STRING No No index The variable that specifies the index of the char value that needs to be returned. INT No No Examples EXAMPLE 1 charAt( WSO2 , 1) In this case, the functiion returns the character that exists at index 1. Hence, it returns 'S'.","title":"charAt (Function)"},{"location":"api/5.0.1/#coalesce-function","text":"This returns the first input parameter value of the given argument, that is not null. Syntax INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT str:coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have one or more input parameters in any data type. However, all the specified parameters are required to be of the same type. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No No Examples EXAMPLE 1 coalesce(null, BBB , CCC ) This returns the first input parameter that is not null. In this example, it returns \"BBB\".","title":"coalesce (Function)"},{"location":"api/5.0.1/#concat-function","text":"This function returns a string value that is obtained as a result of concatenating two or more input string values. Syntax STRING str:concat( STRING argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn This can have two or more string type input parameters. STRING No No Examples EXAMPLE 1 concat( D533 , 8JU^ , XYZ ) This returns a string value by concatenating two or more given arguments. In the example shown above, it returns \"D5338JU^XYZ\".","title":"concat (Function)"},{"location":"api/5.0.1/#contains-function","text":"This function returns true if the input.string contains the specified sequence of char values in the search.string . Syntax BOOL str:contains( STRING input.string, STRING search.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string Input string value. STRING No No search.string The string value to be searched for in the input.string . STRING No No Examples EXAMPLE 1 contains( 21 products are produced by WSO2 currently , WSO2 ) This returns a boolean value as the output. In this case, it returns true .","title":"contains (Function)"},{"location":"api/5.0.1/#equalsignorecase-function","text":"This returns a boolean value by comparing two strings lexicographically without considering the letter case. Syntax BOOL str:equalsIgnoreCase( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument. This is compared with the first argument. STRING No No Examples EXAMPLE 1 equalsIgnoreCase( WSO2 , wso2 ) This returns a boolean value as the output. In this scenario, it returns \"true\".","title":"equalsIgnoreCase (Function)"},{"location":"api/5.0.1/#filltemplate-function","text":"This extension replaces the templated positions that are marked with an index value in a specified template with the strings provided. Syntax STRING str:fillTemplate( STRING template, STRING|INT|LONG|DOUBLE|FLOAT|BOOL replacement.strings) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic template The string with templated fields that needs to be filled with the given strings. The format of the templated fields should be as follows: {{INDEX}} where 'INDEX' is an integer. This index is used to map the strings that are used to replace the templated fields. STRING No No replacement.strings The strings with which the templated positions in the template need to be replaced. The minimum of two arguments need to be included in the execution string. There is no upper limit on the number of arguments allowed to be included. STRING INT LONG DOUBLE FLOAT BOOL No No Examples EXAMPLE 1 str:fillTemplate( This is {{1}} for the {{2}} function , 'an example', 'fillTemplate') In this example, the template is 'This is {{1}} for the {{2}} function'.Here, the templated string {{1}} is replaced with the 1st string value provided, which is 'an example'. {{2}} is replaced with the 2nd string provided, which is 'fillTemplate' The complete return string is 'This is an example for the fillTemplate function'.","title":"fillTemplate (Function)"},{"location":"api/5.0.1/#hex-function","text":"This function returns a hexadecimal string by converting each byte of each character in the input string to two hexadecimal digits. Syntax STRING str:hex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the hexadecimal value. STRING No No Examples EXAMPLE 1 hex( MySQL ) This returns the hexadecimal value of the input.string. In this scenario, the output is \"4d7953514c\".","title":"hex (Function)"},{"location":"api/5.0.1/#length-function","text":"Returns the length of the input string. Syntax INT str:length( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the length. STRING No No Examples EXAMPLE 1 length( Hello World ) This outputs the length of the provided string. In this scenario, the, output is 11 .","title":"length (Function)"},{"location":"api/5.0.1/#lower-function","text":"Converts the capital letters in the input string to the equivalent simple letters. Syntax STRING str:lower( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to convert to the lower case (i.e., equivalent simple letters). STRING No No Examples EXAMPLE 1 lower( WSO2 cep ) This converts the capital letters in the input.string to the equivalent simple letters. In this scenario, the output is \"wso2 cep \".","title":"lower (Function)"},{"location":"api/5.0.1/#regexp-function","text":"Returns a boolean value based on the matchability of the input string and the given regular expression. Syntax BOOL str:regexp( STRING input.string, STRING regex) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to match with the given regular expression. STRING No No regex The regular expression to be matched with the input string. STRING No No Examples EXAMPLE 1 regexp( WSO2 abcdh , WSO(.*h) ) This returns a boolean value after matching regular expression with the given string. In this scenario, it returns \"true\" as the output.","title":"regexp (Function)"},{"location":"api/5.0.1/#repeat-function","text":"Repeats the input string for a specified number of times. Syntax STRING str:repeat( STRING input.string, INT times) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that is repeated the number of times as defined by the user. STRING No No times The number of times the input.string needs to be repeated . INT No No Examples EXAMPLE 1 repeat( StRing 1 , 3) This returns a string value by repeating the string for a specified number of times. In this scenario, the output is \"StRing 1StRing 1StRing 1\".","title":"repeat (Function)"},{"location":"api/5.0.1/#replaceall-function","text":"Finds all the substrings of the input string that matches with the given expression, and replaces them with the given replacement string. Syntax STRING str:replaceAll( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No regex The regular expression to be matched with the input string. STRING No No replacement.string The string with which each substring that matches the given expression should be replaced. STRING No No Examples EXAMPLE 1 replaceAll( hello hi hello , 'hello', 'test') This returns a string after replacing the substrings of the input string with the replacement string. In this scenario, the output is \"test hi test\" .","title":"replaceAll (Function)"},{"location":"api/5.0.1/#replacefirst-function","text":"Finds the first substring of the input string that matches with the given regular expression, and replaces itwith the given replacement string. Syntax STRING str:replaceFirst( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be replaced. STRING No No regex The regular expression with which the input string should be matched. STRING No No replacement.string The string with which the first substring of input string that matches the regular expression should be replaced. STRING No No Examples EXAMPLE 1 replaceFirst( hello WSO2 A hello , 'WSO2(.*)A', 'XXXX') This returns a string after replacing the first substring with the given replacement string. In this scenario, the output is \"hello XXXX hello\".","title":"replaceFirst (Function)"},{"location":"api/5.0.1/#reverse-function","text":"Returns the input string in the reverse order character-wise and string-wise. Syntax STRING str:reverse( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be reversed. STRING No No Examples EXAMPLE 1 reverse( Hello World ) This outputs a string value by reversing the incoming input.string . In this scenario, the output is \"dlroW olleH\".","title":"reverse (Function)"},{"location":"api/5.0.1/#split-function","text":"Splits the input.string into substrings using the value parsed in the split.string and returns the substring at the position specified in the group.number . Syntax STRING str:split( STRING input.string, STRING split.string, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No split.string The string value to be used to split the input.string . STRING No No group.number The index of the split group INT No No Examples EXAMPLE 1 split( WSO2,ABM,NSFT , , , 0) This splits the given input.string by given split.string and returns the string in the index given by group.number. In this scenario, the output will is \"WSO2\".","title":"split (Function)"},{"location":"api/5.0.1/#strcmp-function","text":"Compares two strings lexicographically and returns an integer value. If both strings are equal, 0 is returned. If the first string is lexicographically greater than the second string, a positive value is returned. If the first string is lexicographically greater than the second string, a negative value is returned. Syntax INT str:strcmp( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument that should be compared with the first argument lexicographically. STRING No No Examples EXAMPLE 1 strcmp( AbCDefghiJ KLMN , 'Hello') This compares two strings lexicographically and outputs an integer value.","title":"strcmp (Function)"},{"location":"api/5.0.1/#substr-function","text":"Returns a substring of the input string by considering a subset or all of the following factors: starting index, length, regular expression, and regex group number. Syntax STRING str:substr( STRING input.string, INT begin.index, INT length, STRING regex, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be processed. STRING No No begin.index Starting index to consider for the substring. INT No No length The length of the substring. INT No No regex The regular expression that should be matched with the input string. STRING No No group.number The regex group number INT No No Examples EXAMPLE 1 substr( AbCDefghiJ KLMN , 4) This outputs the substring based on the given begin.index . In this scenario, the output is \"efghiJ KLMN\". EXAMPLE 2 substr( AbCDefghiJ KLMN , 2, 4) This outputs the substring based on the given begin.index and length. In this scenario, the output is \"CDef\". EXAMPLE 3 substr( WSO2D efghiJ KLMN , '^WSO2(.*)') This outputs the substring by applying the regex. In this scenario, the output is \"WSO2D efghiJ KLMN\". EXAMPLE 4 substr( WSO2 cep WSO2 XX E hi hA WSO2 heAllo , 'WSO2(.*)A(.*)', 2) This outputs the substring by applying the regex and considering the group.number . In this scenario, the output is \" ello\".","title":"substr (Function)"},{"location":"api/5.0.1/#trim-function","text":"Returns a copy of the input string without the leading and trailing whitespace (if any). Syntax STRING str:trim( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that needs to be trimmed. STRING No No Examples EXAMPLE 1 trim( AbCDefghiJ KLMN ) This returns a copy of the input.string with the leading and/or trailing white-spaces omitted. In this scenario, the output is \"AbCDefghiJ KLMN\".","title":"trim (Function)"},{"location":"api/5.0.1/#unhex-function","text":"Returns a string by converting the hexadecimal characters in the input string. Syntax STRING str:unhex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The hexadecimal input string that needs to be converted to string. STRING No No Examples EXAMPLE 1 unhex( 4d7953514c ) This converts the hexadecimal value to string.","title":"unhex (Function)"},{"location":"api/5.0.1/#upper-function","text":"Converts the simple letters in the input string to the equivalent capital/block letters. Syntax STRING str:upper( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be converted to the upper case (equivalent capital/block letters). STRING No No Examples EXAMPLE 1 upper( Hello World ) This converts the simple letters in the input.string to theequivalent capital letters. In this scenario, the output is \"HELLO WORLD\".","title":"upper (Function)"},{"location":"api/5.0.1/#tokenize-stream-processor","text":"This function splits the input string into tokens using a given regular expression and returns the split tokens. Syntax str:tokenize( STRING input.string, STRING regex, BOOL distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string which needs to be split. STRING No No regex The string value which is used to tokenize the 'input.string'. STRING No No distinct This flag is used to return only distinct values. false BOOL Yes No Extra Return Attributes Name Description Possible Types token The attribute which contains a single token. STRING Examples EXAMPLE 1 define stream inputStream (str string); @info(name = 'query1') from inputStream#str:tokenize(str , ',') select text insert into outputStream; This query performs tokenization on the given string. If the str is \"Android,Windows8,iOS\", then the string is split into 3 events containing the token attribute values, i.e., Android , Windows8 and iOS .","title":"tokenize (Stream Processor)"},{"location":"api/5.0.2/","text":"API Docs - v5.0.2 Str groupConcat (Aggregate Function) This function aggregates the received events by concatenating the keys in those events using a separator, e.g.,a comma (,) or a hyphen (-), and returns the concatenated key string. Syntax STRING str:groupConcat( STRING key, STRING separator, STRING distinct, STRING order) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key The string that needs to be aggregated. STRING No No separator The separator that separates each string key after concatenating the keys. , STRING Yes No distinct This is used to only have distinct values in the concatenated string that is returned. false STRING Yes No order This parameter accepts 'ASC' or 'DESC' strings to sort the string keys in either ascending or descending order respectively. No order STRING Yes No Examples EXAMPLE 1 from InputStream#window.time(5 min) select str:groupConcat( key ) as groupedKeys input OutputStream; When we input events having values for the key as 'A' , 'B' , 'S' , 'C' , 'A' , it returns \"A,B,S,C,A\" to the 'OutputStream'. EXAMPLE 2 from InputStream#window.time(5 min) select groupConcat( key , - ,true, ASC ) as groupedKeys input OutputStream; When we input events having values for the key as 'A' , 'B' , 'S' , 'C' , 'A' , specify the seperator as hyphen and choose the order to be ascending, the function returns \"A-B-C-S\" to the 'OutputStream'. charAt (Function) This function returns the 'char' value that is present at the given index position. of the input string. Syntax STRING str:charAt( STRING input.value, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.value The input string of which the char value at the given position needs to be returned. STRING No No index The variable that specifies the index of the char value that needs to be returned. INT No No Examples EXAMPLE 1 charAt( WSO2 , 1) In this case, the functiion returns the character that exists at index 1. Hence, it returns 'S'. coalesce (Function) This returns the first input parameter value of the given argument, that is not null. Syntax INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT str:coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have one or more input parameters in any data type. However, all the specified parameters are required to be of the same type. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No No Examples EXAMPLE 1 coalesce(null, BBB , CCC ) This returns the first input parameter that is not null. In this example, it returns \"BBB\". concat (Function) This function returns a string value that is obtained as a result of concatenating two or more input string values. Syntax STRING str:concat( STRING argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn This can have two or more string type input parameters. STRING No No Examples EXAMPLE 1 concat( D533 , 8JU^ , XYZ ) This returns a string value by concatenating two or more given arguments. In the example shown above, it returns \"D5338JU^XYZ\". contains (Function) This function returns true if the input.string contains the specified sequence of char values in the search.string . Syntax BOOL str:contains( STRING input.string, STRING search.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string Input string value. STRING No No search.string The string value to be searched for in the input.string . STRING No No Examples EXAMPLE 1 contains( 21 products are produced by WSO2 currently , WSO2 ) This returns a boolean value as the output. In this case, it returns true . equalsIgnoreCase (Function) This returns a boolean value by comparing two strings lexicographically without considering the letter case. Syntax BOOL str:equalsIgnoreCase( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument. This is compared with the first argument. STRING No No Examples EXAMPLE 1 equalsIgnoreCase( WSO2 , wso2 ) This returns a boolean value as the output. In this scenario, it returns \"true\". fillTemplate (Function) This extension replaces the templated positions that are marked with an index value in a specified template with the strings provided. Syntax STRING str:fillTemplate( STRING template, STRING|INT|LONG|DOUBLE|FLOAT|BOOL replacement.strings) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic template The string with templated fields that needs to be filled with the given strings. The format of the templated fields should be as follows: {{INDEX}} where 'INDEX' is an integer. This index is used to map the strings that are used to replace the templated fields. STRING No No replacement.strings The strings with which the templated positions in the template need to be replaced. The minimum of two arguments need to be included in the execution string. There is no upper limit on the number of arguments allowed to be included. STRING INT LONG DOUBLE FLOAT BOOL No No Examples EXAMPLE 1 str:fillTemplate( This is {{1}} for the {{2}} function , 'an example', 'fillTemplate') In this example, the template is 'This is {{1}} for the {{2}} function'.Here, the templated string {{1}} is replaced with the 1st string value provided, which is 'an example'. {{2}} is replaced with the 2nd string provided, which is 'fillTemplate' The complete return string is 'This is an example for the fillTemplate function'. hex (Function) This function returns a hexadecimal string by converting each byte of each character in the input string to two hexadecimal digits. Syntax STRING str:hex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the hexadecimal value. STRING No No Examples EXAMPLE 1 hex( MySQL ) This returns the hexadecimal value of the input.string. In this scenario, the output is \"4d7953514c\". length (Function) Returns the length of the input string. Syntax INT str:length( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the length. STRING No No Examples EXAMPLE 1 length( Hello World ) This outputs the length of the provided string. In this scenario, the, output is 11 . lower (Function) Converts the capital letters in the input string to the equivalent simple letters. Syntax STRING str:lower( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to convert to the lower case (i.e., equivalent simple letters). STRING No No Examples EXAMPLE 1 lower( WSO2 cep ) This converts the capital letters in the input.string to the equivalent simple letters. In this scenario, the output is \"wso2 cep \". regexp (Function) Returns a boolean value based on the matchability of the input string and the given regular expression. Syntax BOOL str:regexp( STRING input.string, STRING regex) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to match with the given regular expression. STRING No No regex The regular expression to be matched with the input string. STRING No No Examples EXAMPLE 1 regexp( WSO2 abcdh , WSO(.*h) ) This returns a boolean value after matching regular expression with the given string. In this scenario, it returns \"true\" as the output. repeat (Function) Repeats the input string for a specified number of times. Syntax STRING str:repeat( STRING input.string, INT times) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that is repeated the number of times as defined by the user. STRING No No times The number of times the input.string needs to be repeated . INT No No Examples EXAMPLE 1 repeat( StRing 1 , 3) This returns a string value by repeating the string for a specified number of times. In this scenario, the output is \"StRing 1StRing 1StRing 1\". replaceAll (Function) Finds all the substrings of the input string that matches with the given expression, and replaces them with the given replacement string. Syntax STRING str:replaceAll( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No regex The regular expression to be matched with the input string. STRING No No replacement.string The string with which each substring that matches the given expression should be replaced. STRING No No Examples EXAMPLE 1 replaceAll( hello hi hello , 'hello', 'test') This returns a string after replacing the substrings of the input string with the replacement string. In this scenario, the output is \"test hi test\" . replaceFirst (Function) Finds the first substring of the input string that matches with the given regular expression, and replaces itwith the given replacement string. Syntax STRING str:replaceFirst( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be replaced. STRING No No regex The regular expression with which the input string should be matched. STRING No No replacement.string The string with which the first substring of input string that matches the regular expression should be replaced. STRING No No Examples EXAMPLE 1 replaceFirst( hello WSO2 A hello , 'WSO2(.*)A', 'XXXX') This returns a string after replacing the first substring with the given replacement string. In this scenario, the output is \"hello XXXX hello\". reverse (Function) Returns the input string in the reverse order character-wise and string-wise. Syntax STRING str:reverse( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be reversed. STRING No No Examples EXAMPLE 1 reverse( Hello World ) This outputs a string value by reversing the incoming input.string . In this scenario, the output is \"dlroW olleH\". split (Function) Splits the input.string into substrings using the value parsed in the split.string and returns the substring at the position specified in the group.number . Syntax STRING str:split( STRING input.string, STRING split.string, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No split.string The string value to be used to split the input.string . STRING No No group.number The index of the split group INT No No Examples EXAMPLE 1 split( WSO2,ABM,NSFT , , , 0) This splits the given input.string by given split.string and returns the string in the index given by group.number. In this scenario, the output will is \"WSO2\". strcmp (Function) Compares two strings lexicographically and returns an integer value. If both strings are equal, 0 is returned. If the first string is lexicographically greater than the second string, a positive value is returned. If the first string is lexicographically greater than the second string, a negative value is returned. Syntax INT str:strcmp( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument that should be compared with the first argument lexicographically. STRING No No Examples EXAMPLE 1 strcmp( AbCDefghiJ KLMN , 'Hello') This compares two strings lexicographically and outputs an integer value. substr (Function) Returns a substring of the input string by considering a subset or all of the following factors: starting index, length, regular expression, and regex group number. Syntax STRING str:substr( STRING input.string, INT begin.index, INT length, STRING regex, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be processed. STRING No No begin.index Starting index to consider for the substring. INT No No length The length of the substring. INT No No regex The regular expression that should be matched with the input string. STRING No No group.number The regex group number INT No No Examples EXAMPLE 1 substr( AbCDefghiJ KLMN , 4) This outputs the substring based on the given begin.index . In this scenario, the output is \"efghiJ KLMN\". EXAMPLE 2 substr( AbCDefghiJ KLMN , 2, 4) This outputs the substring based on the given begin.index and length. In this scenario, the output is \"CDef\". EXAMPLE 3 substr( WSO2D efghiJ KLMN , '^WSO2(.*)') This outputs the substring by applying the regex. In this scenario, the output is \"WSO2D efghiJ KLMN\". EXAMPLE 4 substr( WSO2 cep WSO2 XX E hi hA WSO2 heAllo , 'WSO2(.*)A(.*)', 2) This outputs the substring by applying the regex and considering the group.number . In this scenario, the output is \" ello\". trim (Function) Returns a copy of the input string without the leading and trailing whitespace (if any). Syntax STRING str:trim( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that needs to be trimmed. STRING No No Examples EXAMPLE 1 trim( AbCDefghiJ KLMN ) This returns a copy of the input.string with the leading and/or trailing white-spaces omitted. In this scenario, the output is \"AbCDefghiJ KLMN\". unhex (Function) Returns a string by converting the hexadecimal characters in the input string. Syntax STRING str:unhex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The hexadecimal input string that needs to be converted to string. STRING No No Examples EXAMPLE 1 unhex( 4d7953514c ) This converts the hexadecimal value to string. upper (Function) Converts the simple letters in the input string to the equivalent capital/block letters. Syntax STRING str:upper( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be converted to the upper case (equivalent capital/block letters). STRING No No Examples EXAMPLE 1 upper( Hello World ) This converts the simple letters in the input.string to theequivalent capital letters. In this scenario, the output is \"HELLO WORLD\". tokenize (Stream Processor) This function splits the input string into tokens using a given regular expression and returns the split tokens. Syntax str:tokenize( STRING input.string, STRING regex, BOOL distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string which needs to be split. STRING No No regex The string value which is used to tokenize the 'input.string'. STRING No No distinct This flag is used to return only distinct values. false BOOL Yes No Extra Return Attributes Name Description Possible Types token The attribute which contains a single token. STRING Examples EXAMPLE 1 define stream inputStream (str string); @info(name = 'query1') from inputStream#str:tokenize(str , ',') select text insert into outputStream; This query performs tokenization on the given string. If the str is \"Android,Windows8,iOS\", then the string is split into 3 events containing the token attribute values, i.e., Android , Windows8 and iOS .","title":"5.0.2"},{"location":"api/5.0.2/#api-docs-v502","text":"","title":"API Docs - v5.0.2"},{"location":"api/5.0.2/#str","text":"","title":"Str"},{"location":"api/5.0.2/#groupconcat-aggregate-function","text":"This function aggregates the received events by concatenating the keys in those events using a separator, e.g.,a comma (,) or a hyphen (-), and returns the concatenated key string. Syntax STRING str:groupConcat( STRING key, STRING separator, STRING distinct, STRING order) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key The string that needs to be aggregated. STRING No No separator The separator that separates each string key after concatenating the keys. , STRING Yes No distinct This is used to only have distinct values in the concatenated string that is returned. false STRING Yes No order This parameter accepts 'ASC' or 'DESC' strings to sort the string keys in either ascending or descending order respectively. No order STRING Yes No Examples EXAMPLE 1 from InputStream#window.time(5 min) select str:groupConcat( key ) as groupedKeys input OutputStream; When we input events having values for the key as 'A' , 'B' , 'S' , 'C' , 'A' , it returns \"A,B,S,C,A\" to the 'OutputStream'. EXAMPLE 2 from InputStream#window.time(5 min) select groupConcat( key , - ,true, ASC ) as groupedKeys input OutputStream; When we input events having values for the key as 'A' , 'B' , 'S' , 'C' , 'A' , specify the seperator as hyphen and choose the order to be ascending, the function returns \"A-B-C-S\" to the 'OutputStream'.","title":"groupConcat (Aggregate Function)"},{"location":"api/5.0.2/#charat-function","text":"This function returns the 'char' value that is present at the given index position. of the input string. Syntax STRING str:charAt( STRING input.value, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.value The input string of which the char value at the given position needs to be returned. STRING No No index The variable that specifies the index of the char value that needs to be returned. INT No No Examples EXAMPLE 1 charAt( WSO2 , 1) In this case, the functiion returns the character that exists at index 1. Hence, it returns 'S'.","title":"charAt (Function)"},{"location":"api/5.0.2/#coalesce-function","text":"This returns the first input parameter value of the given argument, that is not null. Syntax INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT str:coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have one or more input parameters in any data type. However, all the specified parameters are required to be of the same type. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No No Examples EXAMPLE 1 coalesce(null, BBB , CCC ) This returns the first input parameter that is not null. In this example, it returns \"BBB\".","title":"coalesce (Function)"},{"location":"api/5.0.2/#concat-function","text":"This function returns a string value that is obtained as a result of concatenating two or more input string values. Syntax STRING str:concat( STRING argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn This can have two or more string type input parameters. STRING No No Examples EXAMPLE 1 concat( D533 , 8JU^ , XYZ ) This returns a string value by concatenating two or more given arguments. In the example shown above, it returns \"D5338JU^XYZ\".","title":"concat (Function)"},{"location":"api/5.0.2/#contains-function","text":"This function returns true if the input.string contains the specified sequence of char values in the search.string . Syntax BOOL str:contains( STRING input.string, STRING search.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string Input string value. STRING No No search.string The string value to be searched for in the input.string . STRING No No Examples EXAMPLE 1 contains( 21 products are produced by WSO2 currently , WSO2 ) This returns a boolean value as the output. In this case, it returns true .","title":"contains (Function)"},{"location":"api/5.0.2/#equalsignorecase-function","text":"This returns a boolean value by comparing two strings lexicographically without considering the letter case. Syntax BOOL str:equalsIgnoreCase( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument. This is compared with the first argument. STRING No No Examples EXAMPLE 1 equalsIgnoreCase( WSO2 , wso2 ) This returns a boolean value as the output. In this scenario, it returns \"true\".","title":"equalsIgnoreCase (Function)"},{"location":"api/5.0.2/#filltemplate-function","text":"This extension replaces the templated positions that are marked with an index value in a specified template with the strings provided. Syntax STRING str:fillTemplate( STRING template, STRING|INT|LONG|DOUBLE|FLOAT|BOOL replacement.strings) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic template The string with templated fields that needs to be filled with the given strings. The format of the templated fields should be as follows: {{INDEX}} where 'INDEX' is an integer. This index is used to map the strings that are used to replace the templated fields. STRING No No replacement.strings The strings with which the templated positions in the template need to be replaced. The minimum of two arguments need to be included in the execution string. There is no upper limit on the number of arguments allowed to be included. STRING INT LONG DOUBLE FLOAT BOOL No No Examples EXAMPLE 1 str:fillTemplate( This is {{1}} for the {{2}} function , 'an example', 'fillTemplate') In this example, the template is 'This is {{1}} for the {{2}} function'.Here, the templated string {{1}} is replaced with the 1st string value provided, which is 'an example'. {{2}} is replaced with the 2nd string provided, which is 'fillTemplate' The complete return string is 'This is an example for the fillTemplate function'.","title":"fillTemplate (Function)"},{"location":"api/5.0.2/#hex-function","text":"This function returns a hexadecimal string by converting each byte of each character in the input string to two hexadecimal digits. Syntax STRING str:hex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the hexadecimal value. STRING No No Examples EXAMPLE 1 hex( MySQL ) This returns the hexadecimal value of the input.string. In this scenario, the output is \"4d7953514c\".","title":"hex (Function)"},{"location":"api/5.0.2/#length-function","text":"Returns the length of the input string. Syntax INT str:length( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the length. STRING No No Examples EXAMPLE 1 length( Hello World ) This outputs the length of the provided string. In this scenario, the, output is 11 .","title":"length (Function)"},{"location":"api/5.0.2/#lower-function","text":"Converts the capital letters in the input string to the equivalent simple letters. Syntax STRING str:lower( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to convert to the lower case (i.e., equivalent simple letters). STRING No No Examples EXAMPLE 1 lower( WSO2 cep ) This converts the capital letters in the input.string to the equivalent simple letters. In this scenario, the output is \"wso2 cep \".","title":"lower (Function)"},{"location":"api/5.0.2/#regexp-function","text":"Returns a boolean value based on the matchability of the input string and the given regular expression. Syntax BOOL str:regexp( STRING input.string, STRING regex) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to match with the given regular expression. STRING No No regex The regular expression to be matched with the input string. STRING No No Examples EXAMPLE 1 regexp( WSO2 abcdh , WSO(.*h) ) This returns a boolean value after matching regular expression with the given string. In this scenario, it returns \"true\" as the output.","title":"regexp (Function)"},{"location":"api/5.0.2/#repeat-function","text":"Repeats the input string for a specified number of times. Syntax STRING str:repeat( STRING input.string, INT times) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that is repeated the number of times as defined by the user. STRING No No times The number of times the input.string needs to be repeated . INT No No Examples EXAMPLE 1 repeat( StRing 1 , 3) This returns a string value by repeating the string for a specified number of times. In this scenario, the output is \"StRing 1StRing 1StRing 1\".","title":"repeat (Function)"},{"location":"api/5.0.2/#replaceall-function","text":"Finds all the substrings of the input string that matches with the given expression, and replaces them with the given replacement string. Syntax STRING str:replaceAll( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No regex The regular expression to be matched with the input string. STRING No No replacement.string The string with which each substring that matches the given expression should be replaced. STRING No No Examples EXAMPLE 1 replaceAll( hello hi hello , 'hello', 'test') This returns a string after replacing the substrings of the input string with the replacement string. In this scenario, the output is \"test hi test\" .","title":"replaceAll (Function)"},{"location":"api/5.0.2/#replacefirst-function","text":"Finds the first substring of the input string that matches with the given regular expression, and replaces itwith the given replacement string. Syntax STRING str:replaceFirst( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be replaced. STRING No No regex The regular expression with which the input string should be matched. STRING No No replacement.string The string with which the first substring of input string that matches the regular expression should be replaced. STRING No No Examples EXAMPLE 1 replaceFirst( hello WSO2 A hello , 'WSO2(.*)A', 'XXXX') This returns a string after replacing the first substring with the given replacement string. In this scenario, the output is \"hello XXXX hello\".","title":"replaceFirst (Function)"},{"location":"api/5.0.2/#reverse-function","text":"Returns the input string in the reverse order character-wise and string-wise. Syntax STRING str:reverse( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be reversed. STRING No No Examples EXAMPLE 1 reverse( Hello World ) This outputs a string value by reversing the incoming input.string . In this scenario, the output is \"dlroW olleH\".","title":"reverse (Function)"},{"location":"api/5.0.2/#split-function","text":"Splits the input.string into substrings using the value parsed in the split.string and returns the substring at the position specified in the group.number . Syntax STRING str:split( STRING input.string, STRING split.string, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No split.string The string value to be used to split the input.string . STRING No No group.number The index of the split group INT No No Examples EXAMPLE 1 split( WSO2,ABM,NSFT , , , 0) This splits the given input.string by given split.string and returns the string in the index given by group.number. In this scenario, the output will is \"WSO2\".","title":"split (Function)"},{"location":"api/5.0.2/#strcmp-function","text":"Compares two strings lexicographically and returns an integer value. If both strings are equal, 0 is returned. If the first string is lexicographically greater than the second string, a positive value is returned. If the first string is lexicographically greater than the second string, a negative value is returned. Syntax INT str:strcmp( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument that should be compared with the first argument lexicographically. STRING No No Examples EXAMPLE 1 strcmp( AbCDefghiJ KLMN , 'Hello') This compares two strings lexicographically and outputs an integer value.","title":"strcmp (Function)"},{"location":"api/5.0.2/#substr-function","text":"Returns a substring of the input string by considering a subset or all of the following factors: starting index, length, regular expression, and regex group number. Syntax STRING str:substr( STRING input.string, INT begin.index, INT length, STRING regex, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be processed. STRING No No begin.index Starting index to consider for the substring. INT No No length The length of the substring. INT No No regex The regular expression that should be matched with the input string. STRING No No group.number The regex group number INT No No Examples EXAMPLE 1 substr( AbCDefghiJ KLMN , 4) This outputs the substring based on the given begin.index . In this scenario, the output is \"efghiJ KLMN\". EXAMPLE 2 substr( AbCDefghiJ KLMN , 2, 4) This outputs the substring based on the given begin.index and length. In this scenario, the output is \"CDef\". EXAMPLE 3 substr( WSO2D efghiJ KLMN , '^WSO2(.*)') This outputs the substring by applying the regex. In this scenario, the output is \"WSO2D efghiJ KLMN\". EXAMPLE 4 substr( WSO2 cep WSO2 XX E hi hA WSO2 heAllo , 'WSO2(.*)A(.*)', 2) This outputs the substring by applying the regex and considering the group.number . In this scenario, the output is \" ello\".","title":"substr (Function)"},{"location":"api/5.0.2/#trim-function","text":"Returns a copy of the input string without the leading and trailing whitespace (if any). Syntax STRING str:trim( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that needs to be trimmed. STRING No No Examples EXAMPLE 1 trim( AbCDefghiJ KLMN ) This returns a copy of the input.string with the leading and/or trailing white-spaces omitted. In this scenario, the output is \"AbCDefghiJ KLMN\".","title":"trim (Function)"},{"location":"api/5.0.2/#unhex-function","text":"Returns a string by converting the hexadecimal characters in the input string. Syntax STRING str:unhex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The hexadecimal input string that needs to be converted to string. STRING No No Examples EXAMPLE 1 unhex( 4d7953514c ) This converts the hexadecimal value to string.","title":"unhex (Function)"},{"location":"api/5.0.2/#upper-function","text":"Converts the simple letters in the input string to the equivalent capital/block letters. Syntax STRING str:upper( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be converted to the upper case (equivalent capital/block letters). STRING No No Examples EXAMPLE 1 upper( Hello World ) This converts the simple letters in the input.string to theequivalent capital letters. In this scenario, the output is \"HELLO WORLD\".","title":"upper (Function)"},{"location":"api/5.0.2/#tokenize-stream-processor","text":"This function splits the input string into tokens using a given regular expression and returns the split tokens. Syntax str:tokenize( STRING input.string, STRING regex, BOOL distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string which needs to be split. STRING No No regex The string value which is used to tokenize the 'input.string'. STRING No No distinct This flag is used to return only distinct values. false BOOL Yes No Extra Return Attributes Name Description Possible Types token The attribute which contains a single token. STRING Examples EXAMPLE 1 define stream inputStream (str string); @info(name = 'query1') from inputStream#str:tokenize(str , ',') select text insert into outputStream; This query performs tokenization on the given string. If the str is \"Android,Windows8,iOS\", then the string is split into 3 events containing the token attribute values, i.e., Android , Windows8 and iOS .","title":"tokenize (Stream Processor)"},{"location":"api/5.0.3/","text":"API Docs - v5.0.3 Tested Siddhi Core version: 5.0.2-SNAPSHOT It could also support other Siddhi Core minor versions. Core and (Aggregate Function) Returns the results of AND operation for all the events. Syntax BOOL and( BOOL arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The value that needs to be AND operation. BOOL No Yes Examples EXAMPLE 1 from cscStream#window.lengthBatch(10) select and(isFraud) as isFraudTransaction insert into alertStream; This will returns the result for AND operation of isFraud values as a boolean value for event chunk expiry by window length batch. avg (Aggregate Function) Calculates the average for all the events. Syntax DOUBLE avg( INT|LONG|DOUBLE|FLOAT arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The value that need to be averaged. INT LONG DOUBLE FLOAT No Yes Examples EXAMPLE 1 from fooStream#window.timeBatch select avg(temp) as avgTemp insert into barStream; avg(temp) returns the average temp value for all the events based on their arrival and expiry. count (Aggregate Function) Returns the count of all the events. Syntax LONG count() LONG count( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg This function accepts one parameter. It can belong to any one of the available types. INT LONG DOUBLE FLOAT STRING BOOL OBJECT Yes Yes Examples EXAMPLE 1 from fooStream#window.timeBatch(10 sec) select count() as count insert into barStream; This will return the count of all the events for time batch in 10 seconds. distinctCount (Aggregate Function) This returns the count of distinct occurrences for a given arg. Syntax LONG distinctCount( INT|LONG|DOUBLE|FLOAT|STRING arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The object for which the number of distinct occurences needs to be counted. INT LONG DOUBLE FLOAT STRING No Yes Examples EXAMPLE 1 from fooStream select distinctcount(pageID) as count insert into barStream; distinctcount(pageID) for the following output returns '3' when the available values are as follows. \"WEB_PAGE_1\" \"WEB_PAGE_1\" \"WEB_PAGE_2\" \"WEB_PAGE_3\" \"WEB_PAGE_1\" \"WEB_PAGE_2\" The three distinct occurences identified are 'WEB_PAGE_1', 'WEB_PAGE_2', and 'WEB_PAGE_3'. max (Aggregate Function) Returns the maximum value for all the events. Syntax INT|LONG|DOUBLE|FLOAT max( INT|LONG|DOUBLE|FLOAT arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The value that needs to be compared to find the maximum value. INT LONG DOUBLE FLOAT No Yes Examples EXAMPLE 1 from fooStream#window.timeBatch(10 sec) select max(temp) as maxTemp insert into barStream; max(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry. maxForever (Aggregate Function) This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front. Syntax INT|LONG|DOUBLE|FLOAT maxForever( INT|LONG|DOUBLE|FLOAT arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The value that needs to be compared to find the maximum value. INT LONG DOUBLE FLOAT No Yes Examples EXAMPLE 1 from inputStream select maxForever(temp) as max insert into outputStream; maxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query. min (Aggregate Function) Returns the minimum value for all the events. Syntax INT|LONG|DOUBLE|FLOAT min( INT|LONG|DOUBLE|FLOAT arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The value that needs to be compared to find the minimum value. INT LONG DOUBLE FLOAT No Yes Examples EXAMPLE 1 from inputStream select min(temp) as minTemp insert into outputStream; min(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry. minForever (Aggregate Function) This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front. Syntax INT|LONG|DOUBLE|FLOAT minForever( INT|LONG|DOUBLE|FLOAT arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The value that needs to be compared to find the minimum value. INT LONG DOUBLE FLOAT No Yes Examples EXAMPLE 1 from inputStream select minForever(temp) as max insert into outputStream; minForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query. or (Aggregate Function) Returns the results of OR operation for all the events. Syntax BOOL or( BOOL arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The value that needs to be OR operation. BOOL No Yes Examples EXAMPLE 1 from cscStream#window.lengthBatch(10) select or(isFraud) as isFraudTransaction insert into alertStream; This will returns the result for OR operation of isFraud values as a boolean value for event chunk expiry by window length batch. stdDev (Aggregate Function) Returns the calculated standard deviation for all the events. Syntax DOUBLE stdDev( INT|LONG|DOUBLE|FLOAT arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The value that should be used to calculate the standard deviation. INT LONG DOUBLE FLOAT No Yes Examples EXAMPLE 1 from inputStream select stddev(temp) as stdTemp insert into outputStream; stddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry. sum (Aggregate Function) Returns the sum for all the events. Syntax LONG|DOUBLE sum( INT|LONG|DOUBLE|FLOAT arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The value that needs to be summed. INT LONG DOUBLE FLOAT No Yes Examples EXAMPLE 1 from inputStream select sum(volume) as sumOfVolume insert into outputStream; This will returns the sum of volume values as a long value for each event arrival and expiry. unionSet (Aggregate Function) Union multiple sets. This attribute aggregator maintains a union of sets. The given input set is put into the union set and the union set is returned. Syntax OBJECT unionSet( OBJECT set) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic set The java.util.Set object that needs to be added into the union set. OBJECT No Yes Examples EXAMPLE 1 from stockStream select createSet(symbol) as initialSet insert into initStream from initStream#window.timeBatch(10 sec) select unionSet(initialSet) as distinctSymbols insert into distinctStockStream; distinctStockStream will return the set object which contains the distinct set of stock symbols received during a sliding window of 10 seconds. UUID (Function) Generates a UUID (Universally Unique Identifier). Syntax STRING UUID() Examples EXAMPLE 1 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream; This will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream; cast (Function) Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type. Syntax INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT cast( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT to.be.caster, STRING cast.to) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic to.be.caster This specifies the attribute to be casted. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No Yes cast.to A string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool. STRING No Yes Examples EXAMPLE 1 from fooStream select symbol as name, cast(temp, 'double') as temp insert into barStream; This will cast the fooStream temp field value into 'double' format. coalesce (Function) Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type. Syntax INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT arg, INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No Yes Examples EXAMPLE 1 from fooStream select coalesce('123', null, '789') as value insert into barStream; This will returns first null value 123. EXAMPLE 2 from fooStream select coalesce(null, 76, 567) as value insert into barStream; This will returns first null value 76. EXAMPLE 3 from fooStream select coalesce(null, null, null) as value insert into barStream; This will returns null as there are no notnull values. convert (Function) Converts the first input parameter according to the convertedTo parameter. Syntax INT|LONG|DOUBLE|FLOAT|STRING|BOOL convert( INT|LONG|DOUBLE|FLOAT|STRING|BOOL to.be.converted, STRING converted.to) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic to.be.converted This specifies the value to be converted. INT LONG DOUBLE FLOAT STRING BOOL No Yes converted.to A string constant parameter to which type the attribute need to be converted using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'. STRING No Yes Examples EXAMPLE 1 from fooStream select convert(temp, 'double') as temp insert into barStream; This will convert fooStream temp value into 'double'. EXAMPLE 2 from fooStream select convert(temp, 'int') as temp insert into barStream; This will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\"). createSet (Function) Includes the given input parameter in a java.util.HashSet and returns the set. Syntax OBJECT createSet( INT|LONG|DOUBLE|FLOAT|STRING|BOOL input) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input The input that needs to be added into the set. INT LONG DOUBLE FLOAT STRING BOOL No Yes Examples EXAMPLE 1 from stockStream select createSet(symbol) as initialSet insert into initStream; For every incoming stockStream event, the initStream stream will produce a set object having only one element: the symbol in the incoming stockStream. currentTimeMillis (Function) Returns the current timestamp of siddhi application in milliseconds. Syntax LONG currentTimeMillis() Examples EXAMPLE 1 from fooStream select symbol as name, currentTimeMillis() as eventTimestamp insert into barStream; This will extract current siddhi application timestamp. default (Function) Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter Syntax INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT default( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT attribute, INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT default) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic attribute The attribute that could be null. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No Yes default The default value that will be used when 'attribute' parameter is null INT LONG DOUBLE FLOAT STRING BOOL OBJECT No Yes Examples EXAMPLE 1 from TempStream select default(temp, 0.0) as temp, roomNum insert into StandardTempStream; This will replace TempStream's temp attribute with default value if the temp is null. eventTimestamp (Function) Returns the timestamp of the processed event. Syntax LONG eventTimestamp() Examples EXAMPLE 1 from fooStream select symbol as name, eventTimestamp() as eventTimestamp insert into barStream; This will extract current events timestamp. ifThenElse (Function) Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type. Syntax INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT ifThenElse( BOOL condition, INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT if.expression, INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT else.expression) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic condition This specifies the if then else condition value. BOOL No Yes if.expression This specifies the value to be returned if the value of the condition parameter is true. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No Yes else.expression This specifies the value to be returned if the value of the condition parameter is false. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No Yes Examples EXAMPLE 1 @info(name = 'query1') from sensorEventStream select sensorValue, ifThenElse(sensorValue 35,'High','Low') as status insert into outputStream; This will returns High if sensorValue = 50. EXAMPLE 2 @info(name = 'query1') from sensorEventStream select sensorValue, ifThenElse(voltage 5, 0, 1) as status insert into outputStream; This will returns 1 if voltage= 12. EXAMPLE 3 @info(name = 'query1') from userEventStream select userName, ifThenElse(password == 'admin', true, false) as passwordState insert into outputStream; This will returns passwordState as true if password = admin. instanceOfBoolean (Function) Checks whether the parameter is an instance of Boolean or not. Syntax BOOL instanceOfBoolean( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The parameter to be checked. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No Yes Examples EXAMPLE 1 from fooStream select instanceOfBoolean(switchState) as state insert into barStream; This will return true if the value of switchState is true. EXAMPLE 2 from fooStream select instanceOfBoolean(value) as state insert into barStream; if the value = 32 then this will returns false as the value is not an instance of the boolean. instanceOfDouble (Function) Checks whether the parameter is an instance of Double or not. Syntax BOOL instanceOfDouble( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The parameter to be checked. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No Yes Examples EXAMPLE 1 from fooStream select instanceOfDouble(value) as state insert into barStream; This will return true if the value field format is double ex : 56.45. EXAMPLE 2 from fooStream select instanceOfDouble(switchState) as state insert into barStream; if the switchState = true then this will returns false as the value is not an instance of the double. instanceOfFloat (Function) Checks whether the parameter is an instance of Float or not. Syntax BOOL instanceOfFloat( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The parameter to be checked. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No Yes Examples EXAMPLE 1 from fooStream select instanceOfFloat(value) as state insert into barStream; This will return true if the value field format is float ex : 56.45f. EXAMPLE 2 from fooStream select instanceOfFloat(switchState) as state insert into barStream; if the switchState = true then this will returns false as the value is an instance of the boolean not a float. instanceOfInteger (Function) Checks whether the parameter is an instance of Integer or not. Syntax BOOL instanceOfInteger( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The parameter to be checked. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No Yes Examples EXAMPLE 1 from fooStream select instanceOfInteger(value) as state insert into barStream; This will return true if the value field format is integer. EXAMPLE 2 from fooStream select instanceOfInteger(switchState) as state insert into barStream; if the switchState = true then this will returns false as the value is an instance of the boolean not a long. instanceOfLong (Function) Checks whether the parameter is an instance of Long or not. Syntax BOOL instanceOfLong( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The parameter to be checked. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No Yes Examples EXAMPLE 1 from fooStream select instanceOfLong(value) as state insert into barStream; This will return true if the value field format is long ex : 56456l. EXAMPLE 2 from fooStream select instanceOfLong(switchState) as state insert into barStream; if the switchState = true then this will returns false as the value is an instance of the boolean not a long. instanceOfString (Function) Checks whether the parameter is an instance of String or not. Syntax BOOL instanceOfString( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The parameter to be checked. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No Yes Examples EXAMPLE 1 from fooStream select instanceOfString(value) as state insert into barStream; This will return true if the value field format is string ex : 'test'. EXAMPLE 2 from fooStream select instanceOfString(switchState) as state insert into barStream; if the switchState = true then this will returns false as the value is an instance of the boolean not a string. maximum (Function) Returns the maximum value of the input parameters. Syntax INT|LONG|DOUBLE|FLOAT maximum( INT|LONG|DOUBLE|FLOAT arg, INT|LONG|DOUBLE|FLOAT ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. INT LONG DOUBLE FLOAT No Yes Examples EXAMPLE 1 @info(name = 'query1') from inputStream select maximum(price1, price2, price3) as max insert into outputStream; This will returns the maximum value of the input parameters price1, price2, price3. minimum (Function) Returns the minimum value of the input parameters. Syntax INT|LONG|DOUBLE|FLOAT minimum( INT|LONG|DOUBLE|FLOAT arg, INT|LONG|DOUBLE|FLOAT ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. INT LONG DOUBLE FLOAT No Yes Examples EXAMPLE 1 @info(name = 'query1') from inputStream select maximum(price1, price2, price3) as max insert into outputStream; This will returns the minimum value of the input parameters price1, price2, price3. sizeOfSet (Function) Returns the size of an object of type java.util.Set. Syntax INT sizeOfSet( OBJECT set) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic set The set object. This parameter should be of type java.util.Set. A set object may be created by the 'set' attribute aggregator in Siddhi. OBJECT No Yes Examples EXAMPLE 1 from stockStream select initSet(symbol) as initialSet insert into initStream; ;from initStream#window.timeBatch(10 sec) select union(initialSet) as distinctSymbols insert into distinctStockStream; from distinctStockStream select sizeOfSet(distinctSymbols) sizeOfSymbolSet insert into sizeStream; The sizeStream stream will output the number of distinct stock symbols received during a sliding window of 10 seconds. pol2Cart (Stream Function) The pol2Cart function calculating the cartesian coordinates x y for the given theta, rho coordinates and adding them as new attributes to the existing events. Syntax pol2Cart() pol2Cart( DOUBLE theta, DOUBLE rho) pol2Cart( DOUBLE theta, DOUBLE rho, DOUBLE z) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic theta The theta value of the coordinates. DOUBLE No Yes rho The rho value of the coordinates. DOUBLE No Yes z z value of the cartesian coordinates. If z value is not given, drop the third parameter of the output. DOUBLE Yes Yes Examples EXAMPLE 1 from PolarStream#pol2Cart(theta, rho) select x, y insert into outputStream ; This will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5. EXAMPLE 2 from PolarStream#pol2Cart(theta, rho, 3.4) select x, y, z insert into outputStream ; This will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4. log (Stream Processor) The logger logs the message on the given priority with or without processed event. Syntax log() log( STRING log.message) log( BOOL is.event.logged) log( STRING log.message, BOOL is.event.logged) log( STRING priority, STRING log.message) log( STRING priority, STRING log.message, BOOL is.event.logged) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic priority The priority/type of this log message (INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE). INFO STRING Yes No log.message This message will be logged. : STRING Yes Yes is.event.logged To log the processed event. true BOOL Yes No Examples EXAMPLE 1 from fooStream#log( INFO , Sample Event : , true) select * insert into barStream; This will log as INFO with the message \"Sample Event :\" + fooStream:events. EXAMPLE 2 from fooStream#log( Sample Event : , true) select * insert into barStream; This will logs with default log level as INFO. EXAMPLE 3 from fooStream#log( Sample Event : , fasle) select * insert into barStream; This will only log message. EXAMPLE 4 from fooStream#log(true) select * insert into barStream; This will only log fooStream:events. EXAMPLE 5 from fooStream#log() select * insert into barStream; This will only log fooStream:events. EXAMPLE 6 from fooStream#log( Sample Event : ) select * insert into barStream; This will log message and fooStream:events. batch (Window) A window that holds an incoming events batch. When a new set of events arrives, the previously arrived old events will be expired. Batch window can be used to aggregate events that comes in batches. If it has the parameter length specified, then batch window process the batch as several chunks. Syntax batch() batch( INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic window.length The length of a chunk If length value was not given it assign 0 as length and process the whole batch as once INT Yes No Examples EXAMPLE 1 define stream consumerItemStream (itemId string, price float) from consumerItemStream#window.batch() select price, str:groupConcat(itemId) as itemIds group by price insert into outputStream; This will output comma separated items IDs that have the same price for each incoming batch of events. cron (Window) This window outputs the arriving events as and when they arrive, and resets (expires) the window periodically based on the given cron expression. Syntax cron( STRING cron.expression) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic cron.expression The cron expression that resets the window. STRING No No Examples EXAMPLE 1 define stream InputEventStream (symbol string, price float, volume int); @info(name = 'query1') from InputEventStream#cron('*/5 * * * * ?') select symbol, sum(price) as totalPrice insert into OutputStream; This let the totalPrice to gradually increase and resets to zero as a batch every 5 seconds. EXAMPLE 2 define stream StockEventStream (symbol string, price float, volume int) define window StockEventWindow (symbol string, price float, volume int) cron('*/5 * * * * ?'); @info(name = 'query0') from StockEventStream insert into StockEventWindow; @info(name = 'query1') from StockEventWindow select symbol, sum(price) as totalPrice insert into OutputStream ; The defined window will let the totalPrice to gradually increase and resets to zero as a batch every 5 seconds. delay (Window) A delay window holds events for a specific time period that is regarded as a delay period before processing them. Syntax delay( INT|LONG|TIME window.delay) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic window.delay The time period (specified in sec, min, ms) for which the window should delay the events. INT LONG TIME No No Examples EXAMPLE 1 define window delayWindow(symbol string, volume int) delay(1 hour); define stream PurchaseStream(symbol string, volume int); define stream DeliveryStream(symbol string); define stream OutputStream(symbol string); @info(name='query1') from PurchaseStream select symbol, volume insert into delayWindow; @info(name='query2') from delayWindow join DeliveryStream on delayWindow.symbol == DeliveryStream.symbol select delayWindow.symbol insert into OutputStream; In this example, purchase events that arrive in the 'PurchaseStream' stream are directed to a delay window. At any given time, this delay window holds purchase events that have arrived within the last hour. These purchase events in the window are matched by the 'symbol' attribute, with delivery events that arrive in the 'DeliveryStream' stream. This monitors whether the delivery of products is done with a minimum delay of one hour after the purchase. externalTime (Window) A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp. Syntax externalTime( LONG timestamp, INT|LONG|TIME window.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic timestamp The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. LONG No Yes window.time The sliding time period for which the window should hold events. INT LONG TIME No No Examples EXAMPLE 1 define window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events; @info(name = 'query0') from cseEventStream insert into cseEventWindow; @info(name = 'query1') from cseEventWindow select symbol, sum(price) as price insert expired events into outputStream ; processing events arrived within the last 20 seconds from the eventTime and output expired events. externalTimeBatch (Window) A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime. Syntax externalTimeBatch( LONG timestamp, INT|LONG|TIME window.time) externalTimeBatch( LONG timestamp, INT|LONG|TIME window.time, INT|LONG|TIME start.time) externalTimeBatch( LONG timestamp, INT|LONG|TIME window.time, INT|LONG|TIME start.time, INT|LONG|TIME timeout) externalTimeBatch( LONG timestamp, INT|LONG|TIME window.time, INT|LONG|TIME start.time, INT|LONG|TIME timeout, BOOL replace.with.batchtime) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic timestamp The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. LONG No Yes window.time The batch time period for which the window should hold events. INT LONG TIME No No start.time User defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. Timestamp of first event INT LONG TIME Yes Yes timeout Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. System waits till an event from next batch arrives to flush current batch INT LONG TIME Yes No replace.with.batchtime This indicates to replace the expired event timeStamp as the batch end timeStamp System waits till an event from next batch arrives to flush current batch BOOL Yes No Examples EXAMPLE 1 define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events; @info(name = 'query0') from cseEventStream insert into cseEventWindow; @info(name = 'query1') from cseEventWindow select symbol, sum(price) as price insert expired events into outputStream ; This will processing events that arrive every 1 seconds from the eventTime. EXAMPLE 2 define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events; This will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour. EXAMPLE 3 define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events; This will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch. frequent (Window) Deprecated This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm. Syntax frequent( INT event.count) frequent( INT event.count, STRING attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic event.count The number of most frequent events to be emitted to the stream. INT No No attribute The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. The concatenation of all the attributes of the event is considered. STRING Yes Yes Examples EXAMPLE 1 @info(name = 'query1') from purchase[price = 30]#window.frequent(2) select cardNo, price insert all events into PotentialFraud; This will returns the 2 most frequent events. EXAMPLE 2 @info(name = 'query1') from purchase[price = 30]#window.frequent(2, cardNo) select cardNo, price insert all events into PotentialFraud; This will returns the 2 latest events with the most frequently appeared card numbers. length (Window) A sliding length window that holds the last 'window.length' events at a given time, and gets updated for each arrival and expiry. Syntax length( INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic window.length The number of events that should be included in a sliding length window. INT No No Examples EXAMPLE 1 define window StockEventWindow (symbol string, price float, volume int) length(10) output all events; @info(name = 'query0') from StockEventStream insert into StockEventWindow; @info(name = 'query1') from StockEventWindow select symbol, sum(price) as price insert all events into outputStream ; This will process last 10 events in a sliding manner. lengthBatch (Window) A batch (tumbling) length window that holds and process a number of events as specified in the window.length. Syntax lengthBatch( INT window.length) lengthBatch( INT window.length, BOOL stream.current.event) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic window.length The number of events the window should tumble. INT No No stream.current.event Let the window stream the current events out as and when they arrive to the window while expiring them in batches. false BOOL Yes No Examples EXAMPLE 1 define stream InputEventStream (symbol string, price float, volume int); @info(name = 'query1') from InputEventStream#lengthBatch(10) select symbol, sum(price) as price insert into OutputStream; This collect and process 10 events as a batch and output them. EXAMPLE 2 define stream InputEventStream (symbol string, price float, volume int); @info(name = 'query1') from InputEventStream#lengthBatch(10, true) select symbol, sum(price) as sumPrice insert into OutputStream; This window sends the arriving events directly to the output letting the sumPrice to increase gradually, after every 10 events it clears the window as a batch and resets the sumPrice to zero. EXAMPLE 3 define stream InputEventStream (symbol string, price float, volume int); define window StockEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events; @info(name = 'query0') from InputEventStream insert into StockEventWindow; @info(name = 'query1') from StockEventWindow select symbol, sum(price) as price insert all events into OutputStream ; This uses an defined window to process 10 events as a batch and output all events. lossyFrequent (Window) Deprecated This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter. Syntax lossyFrequent( DOUBLE support.threshold) lossyFrequent( DOUBLE support.threshold, DOUBLE error.bound) lossyFrequent( DOUBLE support.threshold, DOUBLE error.bound, STRING attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic support.threshold The support threshold value. DOUBLE No No error.bound The error bound value. DOUBLE No No attribute The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. The concatenation of all the attributes of the event is considered. STRING Yes Yes Examples EXAMPLE 1 define stream purchase (cardNo string, price float); define window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01); @info(name = 'query0') from purchase[price = 30] insert into purchaseWindow; @info(name = 'query1') from purchaseWindow select cardNo, price insert all events into PotentialFraud; lossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01. EXAMPLE 2 define stream purchase (cardNo string, price float); define window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo); @info(name = 'query0') from purchase[price = 30] insert into purchaseWindow; @info(name = 'query1') from purchaseWindow select cardNo, price insert all events into PotentialFraud; lossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05. session (Window) This is a session window that holds events that belong to a specific session. The events that belong to a specific session are identified by a grouping attribute (i.e., a session key). A session gap period is specified to determine the time period after which the session is considered to be expired. A new event that arrives with a specific value for the session key is matched with the session window with the same session key. There can be out of order and late arrival of events, these events can arrive after the session is expired, to include those events to the matching session key specify a latency time period that is less than the session gap period.To have aggregate functions with session windows, the events need to be grouped by the session key via a 'group by' clause. Syntax session( INT|LONG|TIME window.session) session( INT|LONG|TIME window.session, STRING window.key) session( INT|LONG|TIME window.session, STRING window.key, INT|LONG|TIME window.allowed.latency) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic window.session The time period for which the session considered is valid. This is specified in seconds, minutes, or milliseconds (i.e., 'min', 'sec', or 'ms'. INT LONG TIME No No window.key The grouping attribute for events. default-key STRING Yes Yes window.allowed.latency This specifies the time period for which the session window is valid after the expiration of the session. The time period specified here should be less than the session time gap (which is specified via the 'window.session' parameter). 0 INT LONG TIME Yes No Examples EXAMPLE 1 define stream PurchaseEventStream (user string, item_number int, price float, quantity int); @info(name='query0) from PurchaseEventStream#window.session(5 sec, user, 2 sec) select * insert all events into OutputStream; This query processes events that arrive at the PurchaseEvent input stream. The 'user' attribute is the session key, and the session gap is 5 seconds. '2 sec' is specified as the allowed latency. Therefore, events with the matching user name that arrive 2 seconds after the expiration of the session are also considered when performing aggregations for the session identified by the given user name. sort (Window) This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order. Syntax sort( INT window.length, STRING|DOUBLE|INT|LONG|FLOAT|LONG attribute) sort( INT window.length, STRING|DOUBLE|INT|LONG|FLOAT|LONG attribute, STRING order, STRING ...) sort( INT window.length, STRING|DOUBLE|INT|LONG|FLOAT|LONG attribute, STRING order, STRING|DOUBLE|INT|LONG|FLOAT|LONG attribute, STRING|DOUBLE|INT|LONG|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic window.length The size of the window length. INT No No attribute The attribute that should be checked for the order. The concatenation of all the attributes of the event is considered. STRING DOUBLE INT LONG FLOAT LONG Yes Yes order The order define as \"asc\" or \"desc\". asc STRING Yes No Examples EXAMPLE 1 define stream cseEventStream (symbol string, price float, volume long); define window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc'); @info(name = 'query0') from cseEventStream insert into cseEventWindow; @info(name = 'query1') from cseEventWindow select volume insert all events into outputStream ; sort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices. time (Window) A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry. Syntax time( INT|LONG|TIME window.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic window.time The sliding time period for which the window should hold events. INT LONG TIME No No Examples EXAMPLE 1 define window cseEventWindow (symbol string, price float, volume int) time(20) output all events; @info(name = 'query0') from cseEventStream insert into cseEventWindow; @info(name = 'query1') from cseEventWindow select symbol, sum(price) as price insert all events into outputStream ; This will processing events that arrived within the last 20 milliseconds. timeBatch (Window) A batch (tumbling) time window that holds and process events that arrive during 'window.time' period as a batch. Syntax timeBatch( INT|LONG|TIME window.time) timeBatch( INT|LONG|TIME window.time, INT|LONG start.time) timeBatch( INT|LONG|TIME window.time, BOOL stream.current.event) timeBatch( INT|LONG|TIME window.time, INT|LONG start.time, BOOL stream.current.event) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic window.time The batch time period in which the window process the events. INT LONG TIME No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes No stream.current.event Let the window stream the current events out as and when they arrive to the window while expiring them in batches. false BOOL Yes No Examples EXAMPLE 1 define stream InputEventStream (symbol string, price float, volume int); @info(name = 'query1') from InputEventStream#timeBatch(20 sec) select symbol, sum(price) as price insert into OutputStream; This collect and process incoming events as a batch every 20 seconds and output them. EXAMPLE 2 define stream InputEventStream (symbol string, price float, volume int); @info(name = 'query1') from InputEventStream#timeBatch(20 sec, true) select symbol, sum(price) as sumPrice insert into OutputStream; This window sends the arriving events directly to the output letting the sumPrice to increase gradually and on every 20 second interval it clears the window as a batch resetting the sumPrice to zero. EXAMPLE 3 define stream InputEventStream (symbol string, price float, volume int); define window StockEventWindow (symbol string, price float, volume int) timeBatch(20 sec) output all events; @info(name = 'query0') from InputEventStream insert into StockEventWindow; @info(name = 'query1') from StockEventWindow select symbol, sum(price) as price insert all events into OutputStream ; This uses an defined window to process events arrived every 20 seconds as a batch and output all events. timeLength (Window) A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry. Syntax timeLength( INT|LONG|TIME window.time, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic window.time The sliding time period for which the window should hold events. INT LONG TIME No No window.length The number of events that should be be included in a sliding length window.. INT No No Examples EXAMPLE 1 define stream cseEventStream (symbol string, price float, volume int); define window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10); @info(name = 'query0') from cseEventStream insert into cseEventWindow; @info(name = 'query1') from cseEventWindow select symbol, price, volume insert all events into outputStream; window.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry. Sink inMemory (Sink) In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition). Syntax @sink(type= inMemory , topic= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic topic Event will be delivered to allthe subscribers of the same topic STRING No No Examples EXAMPLE 1 @sink(type='inMemory', @map(type='passThrough')) define stream BarStream (symbol string, price float, volume long) In this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation. log (Sink) This is a sink that can be used as a logger. This will log the output events in the output stream with user specified priority and a prefix Syntax @sink(type= log , priority= STRING , prefix= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic priority This will set the logger priority i.e log level. Accepted values are INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE INFO STRING Yes No prefix This will be the prefix to the output message. If the output stream has event [2,4] and the prefix is given as \"Hello\" then the log will show \"Hello : [2,4]\" default prefix will be : STRING Yes No Examples EXAMPLE 1 @sink(type='log', prefix='My Log', priority='DEBUG') define stream BarStream (symbol string, price float, volume long) In this example BarStream uses log sink and the prefix is given as My Log. Also the priority is set to DEBUG. EXAMPLE 2 @sink(type='log', priority='DEBUG') define stream BarStream (symbol string, price float, volume long) In this example BarStream uses log sink and the priority is set to DEBUG. User has not specified prefix so the default prefix will be in the form Siddhi App Name : Stream Name EXAMPLE 3 @sink(type='log', prefix='My Log') define stream BarStream (symbol string, price float, volume long) In this example BarStream uses log sink and the prefix is given as My Log. User has not given a priority so it will be set to default INFO. EXAMPLE 4 @sink(type='log') define stream BarStream (symbol string, price float, volume long) In this example BarStream uses log sink. The user has not given prefix or priority so they will be set to their default values. Sinkmapper passThrough (Sink Mapper) Pass-through mapper passed events (Event[]) through without any mapping or modifications. Syntax @sink(..., @map(type= passThrough ) Examples EXAMPLE 1 @sink(type='inMemory', @map(type='passThrough')) define stream BarStream (symbol string, price float, volume long); In the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink. Source inMemory (Source) In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition). Syntax @source(type= inMemory , topic= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic topic Subscribes to sent on the given topic. STRING No No Examples EXAMPLE 1 @source(type='inMemory', @map(type='passThrough')) define stream BarStream (symbol string, price float, volume long) In this example BarStream uses inMemory transport which passes the received event internally without using external transport. Sourcemapper passThrough (Source Mapper) Pass-through mapper passed events (Event[]) through without any mapping or modifications. Syntax @source(..., @map(type= passThrough ) Examples EXAMPLE 1 @source(type='tcp', @map(type='passThrough')) define stream BarStream (symbol string, price float, volume long); In this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source. Str groupConcat (Aggregate Function) This function aggregates the received events by concatenating the keys in those events using a separator, e.g.,a comma (,) or a hyphen (-), and returns the concatenated key string. Syntax STRING str:groupConcat( STRING key, STRING separator, STRING distinct, STRING order) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key The string that needs to be aggregated. STRING No No separator The separator that separates each string key after concatenating the keys. , STRING Yes No distinct This is used to only have distinct values in the concatenated string that is returned. false STRING Yes No order This parameter accepts 'ASC' or 'DESC' strings to sort the string keys in either ascending or descending order respectively. No order STRING Yes No Examples EXAMPLE 1 from InputStream#window.time(5 min) select str:groupConcat( key ) as groupedKeys input OutputStream; When we input events having values for the key as 'A' , 'B' , 'S' , 'C' , 'A' , it returns \"A,B,S,C,A\" to the 'OutputStream'. EXAMPLE 2 from InputStream#window.time(5 min) select groupConcat( key , - ,true, ASC ) as groupedKeys input OutputStream; When we input events having values for the key as 'A' , 'B' , 'S' , 'C' , 'A' , specify the seperator as hyphen and choose the order to be ascending, the function returns \"A-B-C-S\" to the 'OutputStream'. charAt (Function) Deprecated This function returns the 'char' value that is present at the given index position. of the input string. Syntax STRING str:charAt( STRING input.value, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.value The input string of which the char value at the given position needs to be returned. STRING No No index The variable that specifies the index of the char value that needs to be returned. INT No No Examples EXAMPLE 1 charAt( WSO2 , 1) In this case, the functiion returns the character that exists at index 1. Hence, it returns 'S'. coalesce (Function) This returns the first input parameter value of the given argument, that is not null. Syntax INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT str:coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have one or more input parameters in any data type. However, all the specified parameters are required to be of the same type. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No No Examples EXAMPLE 1 coalesce(null, BBB , CCC ) This returns the first input parameter that is not null. In this example, it returns \"BBB\". concat (Function) This function returns a string value that is obtained as a result of concatenating two or more input string values. Syntax STRING str:concat( STRING argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn This can have two or more string type input parameters. STRING No No Examples EXAMPLE 1 concat( D533 , 8JU^ , XYZ ) This returns a string value by concatenating two or more given arguments. In the example shown above, it returns \"D5338JU^XYZ\". contains (Function) This function returns true if the input.string contains the specified sequence of char values in the search.string . Syntax BOOL str:contains( STRING input.string, STRING search.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string Input string value. STRING No No search.string The string value to be searched for in the input.string . STRING No No Examples EXAMPLE 1 contains( 21 products are produced by WSO2 currently , WSO2 ) This returns a boolean value as the output. In this case, it returns true . equalsIgnoreCase (Function) This returns a boolean value by comparing two strings lexicographically without considering the letter case. Syntax BOOL str:equalsIgnoreCase( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument. This is compared with the first argument. STRING No No Examples EXAMPLE 1 equalsIgnoreCase( WSO2 , wso2 ) This returns a boolean value as the output. In this scenario, it returns \"true\". fillTemplate (Function) This extension replaces the templated positions that are marked with an index value in a specified template with the strings provided. Syntax STRING str:fillTemplate( STRING template, STRING|INT|LONG|DOUBLE|FLOAT|BOOL replacement.strings) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic template The string with templated fields that needs to be filled with the given strings. The format of the templated fields should be as follows: {{INDEX}} where 'INDEX' is an integer. This index is used to map the strings that are used to replace the templated fields. STRING No No replacement.strings The strings with which the templated positions in the template need to be replaced. The minimum of two arguments need to be included in the execution string. There is no upper limit on the number of arguments allowed to be included. STRING INT LONG DOUBLE FLOAT BOOL No No Examples EXAMPLE 1 str:fillTemplate( This is {{1}} for the {{2}} function , 'an example', 'fillTemplate') In this example, the template is 'This is {{1}} for the {{2}} function'.Here, the templated string {{1}} is replaced with the 1st string value provided, which is 'an example'. {{2}} is replaced with the 2nd string provided, which is 'fillTemplate' The complete return string is 'This is an example for the fillTemplate function'. hex (Function) This function returns a hexadecimal string by converting each byte of each character in the input string to two hexadecimal digits. Syntax STRING str:hex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the hexadecimal value. STRING No No Examples EXAMPLE 1 hex( MySQL ) This returns the hexadecimal value of the input.string. In this scenario, the output is \"4d7953514c\". length (Function) Returns the length of the input string. Syntax INT str:length( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the length. STRING No No Examples EXAMPLE 1 length( Hello World ) This outputs the length of the provided string. In this scenario, the, output is 11 . lower (Function) Converts the capital letters in the input string to the equivalent simple letters. Syntax STRING str:lower( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to convert to the lower case (i.e., equivalent simple letters). STRING No No Examples EXAMPLE 1 lower( WSO2 cep ) This converts the capital letters in the input.string to the equivalent simple letters. In this scenario, the output is \"wso2 cep \". regexp (Function) Returns a boolean value based on the matchability of the input string and the given regular expression. Syntax BOOL str:regexp( STRING input.string, STRING regex) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to match with the given regular expression. STRING No No regex The regular expression to be matched with the input string. STRING No No Examples EXAMPLE 1 regexp( WSO2 abcdh , WSO(.*h) ) This returns a boolean value after matching regular expression with the given string. In this scenario, it returns \"true\" as the output. repeat (Function) Repeats the input string for a specified number of times. Syntax STRING str:repeat( STRING input.string, INT times) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that is repeated the number of times as defined by the user. STRING No No times The number of times the input.string needs to be repeated . INT No No Examples EXAMPLE 1 repeat( StRing 1 , 3) This returns a string value by repeating the string for a specified number of times. In this scenario, the output is \"StRing 1StRing 1StRing 1\". replaceAll (Function) Finds all the substrings of the input string that matches with the given expression, and replaces them with the given replacement string. Syntax STRING str:replaceAll( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No regex The regular expression to be matched with the input string. STRING No No replacement.string The string with which each substring that matches the given expression should be replaced. STRING No No Examples EXAMPLE 1 replaceAll( hello hi hello , 'hello', 'test') This returns a string after replacing the substrings of the input string with the replacement string. In this scenario, the output is \"test hi test\" . replaceFirst (Function) Finds the first substring of the input string that matches with the given regular expression, and replaces itwith the given replacement string. Syntax STRING str:replaceFirst( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be replaced. STRING No No regex The regular expression with which the input string should be matched. STRING No No replacement.string The string with which the first substring of input string that matches the regular expression should be replaced. STRING No No Examples EXAMPLE 1 replaceFirst( hello WSO2 A hello , 'WSO2(.*)A', 'XXXX') This returns a string after replacing the first substring with the given replacement string. In this scenario, the output is \"hello XXXX hello\". reverse (Function) Returns the input string in the reverse order character-wise and string-wise. Syntax STRING str:reverse( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be reversed. STRING No No Examples EXAMPLE 1 reverse( Hello World ) This outputs a string value by reversing the incoming input.string . In this scenario, the output is \"dlroW olleH\". split (Function) Splits the input.string into substrings using the value parsed in the split.string and returns the substring at the position specified in the group.number . Syntax STRING str:split( STRING input.string, STRING split.string, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No split.string The string value to be used to split the input.string . STRING No No group.number The index of the split group INT No No Examples EXAMPLE 1 split( WSO2,ABM,NSFT , , , 0) This splits the given input.string by given split.string and returns the string in the index given by group.number. In this scenario, the output will is \"WSO2\". strcmp (Function) Compares two strings lexicographically and returns an integer value. If both strings are equal, 0 is returned. If the first string is lexicographically greater than the second string, a positive value is returned. If the first string is lexicographically greater than the second string, a negative value is returned. Syntax INT str:strcmp( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument that should be compared with the first argument lexicographically. STRING No No Examples EXAMPLE 1 strcmp( AbCDefghiJ KLMN , 'Hello') This compares two strings lexicographically and outputs an integer value. substr (Function) Returns a substring of the input string by considering a subset or all of the following factors: starting index, length, regular expression, and regex group number. Syntax STRING str:substr( STRING input.string, INT begin.index, INT length, STRING regex, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be processed. STRING No No begin.index Starting index to consider for the substring. INT No No length The length of the substring. INT No No regex The regular expression that should be matched with the input string. STRING No No group.number The regex group number INT No No Examples EXAMPLE 1 substr( AbCDefghiJ KLMN , 4) This outputs the substring based on the given begin.index . In this scenario, the output is \"efghiJ KLMN\". EXAMPLE 2 substr( AbCDefghiJ KLMN , 2, 4) This outputs the substring based on the given begin.index and length. In this scenario, the output is \"CDef\". EXAMPLE 3 substr( WSO2D efghiJ KLMN , '^WSO2(.*)') This outputs the substring by applying the regex. In this scenario, the output is \"WSO2D efghiJ KLMN\". EXAMPLE 4 substr( WSO2 cep WSO2 XX E hi hA WSO2 heAllo , 'WSO2(.*)A(.*)', 2) This outputs the substring by applying the regex and considering the group.number . In this scenario, the output is \" ello\". trim (Function) Returns a copy of the input string without the leading and trailing whitespace (if any). Syntax STRING str:trim( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that needs to be trimmed. STRING No No Examples EXAMPLE 1 trim( AbCDefghiJ KLMN ) This returns a copy of the input.string with the leading and/or trailing white-spaces omitted. In this scenario, the output is \"AbCDefghiJ KLMN\". unhex (Function) Returns a string by converting the hexadecimal characters in the input string. Syntax STRING str:unhex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The hexadecimal input string that needs to be converted to string. STRING No No Examples EXAMPLE 1 unhex( 4d7953514c ) This converts the hexadecimal value to string. upper (Function) Converts the simple letters in the input string to the equivalent capital/block letters. Syntax STRING str:upper( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be converted to the upper case (equivalent capital/block letters). STRING No No Examples EXAMPLE 1 upper( Hello World ) This converts the simple letters in the input.string to theequivalent capital letters. In this scenario, the output is \"HELLO WORLD\". tokenize (Stream Processor) This function splits the input string into tokens using a given regular expression and returns the split tokens. Syntax str:tokenize( STRING input.string, STRING regex, BOOL distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string which needs to be split. STRING No No regex The string value which is used to tokenize the 'input.string'. STRING No No distinct This flag is used to return only distinct values. false BOOL Yes No Extra Return Attributes Name Description Possible Types token The attribute which contains a single token. STRING Examples EXAMPLE 1 define stream inputStream (str string); @info(name = 'query1') from inputStream#str:tokenize(str , ',') select text insert into outputStream; This query performs tokenization on the given string. If the str is \"Android,Windows8,iOS\", then the string is split into 3 events containing the token attribute values, i.e., Android , Windows8 and iOS .","title":"5.0.3"},{"location":"api/5.0.3/#api-docs-v503","text":"Tested Siddhi Core version: 5.0.2-SNAPSHOT It could also support other Siddhi Core minor versions.","title":"API Docs - v5.0.3"},{"location":"api/5.0.3/#core","text":"","title":"Core"},{"location":"api/5.0.3/#and-aggregate-function","text":"Returns the results of AND operation for all the events. Syntax BOOL and( BOOL arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The value that needs to be AND operation. BOOL No Yes Examples EXAMPLE 1 from cscStream#window.lengthBatch(10) select and(isFraud) as isFraudTransaction insert into alertStream; This will returns the result for AND operation of isFraud values as a boolean value for event chunk expiry by window length batch.","title":"and (Aggregate Function)"},{"location":"api/5.0.3/#avg-aggregate-function","text":"Calculates the average for all the events. Syntax DOUBLE avg( INT|LONG|DOUBLE|FLOAT arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The value that need to be averaged. INT LONG DOUBLE FLOAT No Yes Examples EXAMPLE 1 from fooStream#window.timeBatch select avg(temp) as avgTemp insert into barStream; avg(temp) returns the average temp value for all the events based on their arrival and expiry.","title":"avg (Aggregate Function)"},{"location":"api/5.0.3/#count-aggregate-function","text":"Returns the count of all the events. Syntax LONG count() LONG count( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg This function accepts one parameter. It can belong to any one of the available types. INT LONG DOUBLE FLOAT STRING BOOL OBJECT Yes Yes Examples EXAMPLE 1 from fooStream#window.timeBatch(10 sec) select count() as count insert into barStream; This will return the count of all the events for time batch in 10 seconds.","title":"count (Aggregate Function)"},{"location":"api/5.0.3/#distinctcount-aggregate-function","text":"This returns the count of distinct occurrences for a given arg. Syntax LONG distinctCount( INT|LONG|DOUBLE|FLOAT|STRING arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The object for which the number of distinct occurences needs to be counted. INT LONG DOUBLE FLOAT STRING No Yes Examples EXAMPLE 1 from fooStream select distinctcount(pageID) as count insert into barStream; distinctcount(pageID) for the following output returns '3' when the available values are as follows. \"WEB_PAGE_1\" \"WEB_PAGE_1\" \"WEB_PAGE_2\" \"WEB_PAGE_3\" \"WEB_PAGE_1\" \"WEB_PAGE_2\" The three distinct occurences identified are 'WEB_PAGE_1', 'WEB_PAGE_2', and 'WEB_PAGE_3'.","title":"distinctCount (Aggregate Function)"},{"location":"api/5.0.3/#max-aggregate-function","text":"Returns the maximum value for all the events. Syntax INT|LONG|DOUBLE|FLOAT max( INT|LONG|DOUBLE|FLOAT arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The value that needs to be compared to find the maximum value. INT LONG DOUBLE FLOAT No Yes Examples EXAMPLE 1 from fooStream#window.timeBatch(10 sec) select max(temp) as maxTemp insert into barStream; max(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.","title":"max (Aggregate Function)"},{"location":"api/5.0.3/#maxforever-aggregate-function","text":"This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front. Syntax INT|LONG|DOUBLE|FLOAT maxForever( INT|LONG|DOUBLE|FLOAT arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The value that needs to be compared to find the maximum value. INT LONG DOUBLE FLOAT No Yes Examples EXAMPLE 1 from inputStream select maxForever(temp) as max insert into outputStream; maxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.","title":"maxForever (Aggregate Function)"},{"location":"api/5.0.3/#min-aggregate-function","text":"Returns the minimum value for all the events. Syntax INT|LONG|DOUBLE|FLOAT min( INT|LONG|DOUBLE|FLOAT arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The value that needs to be compared to find the minimum value. INT LONG DOUBLE FLOAT No Yes Examples EXAMPLE 1 from inputStream select min(temp) as minTemp insert into outputStream; min(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.","title":"min (Aggregate Function)"},{"location":"api/5.0.3/#minforever-aggregate-function","text":"This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front. Syntax INT|LONG|DOUBLE|FLOAT minForever( INT|LONG|DOUBLE|FLOAT arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The value that needs to be compared to find the minimum value. INT LONG DOUBLE FLOAT No Yes Examples EXAMPLE 1 from inputStream select minForever(temp) as max insert into outputStream; minForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.","title":"minForever (Aggregate Function)"},{"location":"api/5.0.3/#or-aggregate-function","text":"Returns the results of OR operation for all the events. Syntax BOOL or( BOOL arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The value that needs to be OR operation. BOOL No Yes Examples EXAMPLE 1 from cscStream#window.lengthBatch(10) select or(isFraud) as isFraudTransaction insert into alertStream; This will returns the result for OR operation of isFraud values as a boolean value for event chunk expiry by window length batch.","title":"or (Aggregate Function)"},{"location":"api/5.0.3/#stddev-aggregate-function","text":"Returns the calculated standard deviation for all the events. Syntax DOUBLE stdDev( INT|LONG|DOUBLE|FLOAT arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The value that should be used to calculate the standard deviation. INT LONG DOUBLE FLOAT No Yes Examples EXAMPLE 1 from inputStream select stddev(temp) as stdTemp insert into outputStream; stddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.","title":"stdDev (Aggregate Function)"},{"location":"api/5.0.3/#sum-aggregate-function","text":"Returns the sum for all the events. Syntax LONG|DOUBLE sum( INT|LONG|DOUBLE|FLOAT arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The value that needs to be summed. INT LONG DOUBLE FLOAT No Yes Examples EXAMPLE 1 from inputStream select sum(volume) as sumOfVolume insert into outputStream; This will returns the sum of volume values as a long value for each event arrival and expiry.","title":"sum (Aggregate Function)"},{"location":"api/5.0.3/#unionset-aggregate-function","text":"Union multiple sets. This attribute aggregator maintains a union of sets. The given input set is put into the union set and the union set is returned. Syntax OBJECT unionSet( OBJECT set) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic set The java.util.Set object that needs to be added into the union set. OBJECT No Yes Examples EXAMPLE 1 from stockStream select createSet(symbol) as initialSet insert into initStream from initStream#window.timeBatch(10 sec) select unionSet(initialSet) as distinctSymbols insert into distinctStockStream; distinctStockStream will return the set object which contains the distinct set of stock symbols received during a sliding window of 10 seconds.","title":"unionSet (Aggregate Function)"},{"location":"api/5.0.3/#uuid-function","text":"Generates a UUID (Universally Unique Identifier). Syntax STRING UUID() Examples EXAMPLE 1 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream; This will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream;","title":"UUID (Function)"},{"location":"api/5.0.3/#cast-function","text":"Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type. Syntax INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT cast( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT to.be.caster, STRING cast.to) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic to.be.caster This specifies the attribute to be casted. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No Yes cast.to A string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool. STRING No Yes Examples EXAMPLE 1 from fooStream select symbol as name, cast(temp, 'double') as temp insert into barStream; This will cast the fooStream temp field value into 'double' format.","title":"cast (Function)"},{"location":"api/5.0.3/#coalesce-function","text":"Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type. Syntax INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT arg, INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No Yes Examples EXAMPLE 1 from fooStream select coalesce('123', null, '789') as value insert into barStream; This will returns first null value 123. EXAMPLE 2 from fooStream select coalesce(null, 76, 567) as value insert into barStream; This will returns first null value 76. EXAMPLE 3 from fooStream select coalesce(null, null, null) as value insert into barStream; This will returns null as there are no notnull values.","title":"coalesce (Function)"},{"location":"api/5.0.3/#convert-function","text":"Converts the first input parameter according to the convertedTo parameter. Syntax INT|LONG|DOUBLE|FLOAT|STRING|BOOL convert( INT|LONG|DOUBLE|FLOAT|STRING|BOOL to.be.converted, STRING converted.to) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic to.be.converted This specifies the value to be converted. INT LONG DOUBLE FLOAT STRING BOOL No Yes converted.to A string constant parameter to which type the attribute need to be converted using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'. STRING No Yes Examples EXAMPLE 1 from fooStream select convert(temp, 'double') as temp insert into barStream; This will convert fooStream temp value into 'double'. EXAMPLE 2 from fooStream select convert(temp, 'int') as temp insert into barStream; This will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").","title":"convert (Function)"},{"location":"api/5.0.3/#createset-function","text":"Includes the given input parameter in a java.util.HashSet and returns the set. Syntax OBJECT createSet( INT|LONG|DOUBLE|FLOAT|STRING|BOOL input) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input The input that needs to be added into the set. INT LONG DOUBLE FLOAT STRING BOOL No Yes Examples EXAMPLE 1 from stockStream select createSet(symbol) as initialSet insert into initStream; For every incoming stockStream event, the initStream stream will produce a set object having only one element: the symbol in the incoming stockStream.","title":"createSet (Function)"},{"location":"api/5.0.3/#currenttimemillis-function","text":"Returns the current timestamp of siddhi application in milliseconds. Syntax LONG currentTimeMillis() Examples EXAMPLE 1 from fooStream select symbol as name, currentTimeMillis() as eventTimestamp insert into barStream; This will extract current siddhi application timestamp.","title":"currentTimeMillis (Function)"},{"location":"api/5.0.3/#default-function","text":"Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter Syntax INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT default( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT attribute, INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT default) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic attribute The attribute that could be null. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No Yes default The default value that will be used when 'attribute' parameter is null INT LONG DOUBLE FLOAT STRING BOOL OBJECT No Yes Examples EXAMPLE 1 from TempStream select default(temp, 0.0) as temp, roomNum insert into StandardTempStream; This will replace TempStream's temp attribute with default value if the temp is null.","title":"default (Function)"},{"location":"api/5.0.3/#eventtimestamp-function","text":"Returns the timestamp of the processed event. Syntax LONG eventTimestamp() Examples EXAMPLE 1 from fooStream select symbol as name, eventTimestamp() as eventTimestamp insert into barStream; This will extract current events timestamp.","title":"eventTimestamp (Function)"},{"location":"api/5.0.3/#ifthenelse-function","text":"Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type. Syntax INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT ifThenElse( BOOL condition, INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT if.expression, INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT else.expression) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic condition This specifies the if then else condition value. BOOL No Yes if.expression This specifies the value to be returned if the value of the condition parameter is true. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No Yes else.expression This specifies the value to be returned if the value of the condition parameter is false. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No Yes Examples EXAMPLE 1 @info(name = 'query1') from sensorEventStream select sensorValue, ifThenElse(sensorValue 35,'High','Low') as status insert into outputStream; This will returns High if sensorValue = 50. EXAMPLE 2 @info(name = 'query1') from sensorEventStream select sensorValue, ifThenElse(voltage 5, 0, 1) as status insert into outputStream; This will returns 1 if voltage= 12. EXAMPLE 3 @info(name = 'query1') from userEventStream select userName, ifThenElse(password == 'admin', true, false) as passwordState insert into outputStream; This will returns passwordState as true if password = admin.","title":"ifThenElse (Function)"},{"location":"api/5.0.3/#instanceofboolean-function","text":"Checks whether the parameter is an instance of Boolean or not. Syntax BOOL instanceOfBoolean( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The parameter to be checked. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No Yes Examples EXAMPLE 1 from fooStream select instanceOfBoolean(switchState) as state insert into barStream; This will return true if the value of switchState is true. EXAMPLE 2 from fooStream select instanceOfBoolean(value) as state insert into barStream; if the value = 32 then this will returns false as the value is not an instance of the boolean.","title":"instanceOfBoolean (Function)"},{"location":"api/5.0.3/#instanceofdouble-function","text":"Checks whether the parameter is an instance of Double or not. Syntax BOOL instanceOfDouble( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The parameter to be checked. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No Yes Examples EXAMPLE 1 from fooStream select instanceOfDouble(value) as state insert into barStream; This will return true if the value field format is double ex : 56.45. EXAMPLE 2 from fooStream select instanceOfDouble(switchState) as state insert into barStream; if the switchState = true then this will returns false as the value is not an instance of the double.","title":"instanceOfDouble (Function)"},{"location":"api/5.0.3/#instanceoffloat-function","text":"Checks whether the parameter is an instance of Float or not. Syntax BOOL instanceOfFloat( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The parameter to be checked. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No Yes Examples EXAMPLE 1 from fooStream select instanceOfFloat(value) as state insert into barStream; This will return true if the value field format is float ex : 56.45f. EXAMPLE 2 from fooStream select instanceOfFloat(switchState) as state insert into barStream; if the switchState = true then this will returns false as the value is an instance of the boolean not a float.","title":"instanceOfFloat (Function)"},{"location":"api/5.0.3/#instanceofinteger-function","text":"Checks whether the parameter is an instance of Integer or not. Syntax BOOL instanceOfInteger( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The parameter to be checked. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No Yes Examples EXAMPLE 1 from fooStream select instanceOfInteger(value) as state insert into barStream; This will return true if the value field format is integer. EXAMPLE 2 from fooStream select instanceOfInteger(switchState) as state insert into barStream; if the switchState = true then this will returns false as the value is an instance of the boolean not a long.","title":"instanceOfInteger (Function)"},{"location":"api/5.0.3/#instanceoflong-function","text":"Checks whether the parameter is an instance of Long or not. Syntax BOOL instanceOfLong( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The parameter to be checked. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No Yes Examples EXAMPLE 1 from fooStream select instanceOfLong(value) as state insert into barStream; This will return true if the value field format is long ex : 56456l. EXAMPLE 2 from fooStream select instanceOfLong(switchState) as state insert into barStream; if the switchState = true then this will returns false as the value is an instance of the boolean not a long.","title":"instanceOfLong (Function)"},{"location":"api/5.0.3/#instanceofstring-function","text":"Checks whether the parameter is an instance of String or not. Syntax BOOL instanceOfString( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The parameter to be checked. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No Yes Examples EXAMPLE 1 from fooStream select instanceOfString(value) as state insert into barStream; This will return true if the value field format is string ex : 'test'. EXAMPLE 2 from fooStream select instanceOfString(switchState) as state insert into barStream; if the switchState = true then this will returns false as the value is an instance of the boolean not a string.","title":"instanceOfString (Function)"},{"location":"api/5.0.3/#maximum-function","text":"Returns the maximum value of the input parameters. Syntax INT|LONG|DOUBLE|FLOAT maximum( INT|LONG|DOUBLE|FLOAT arg, INT|LONG|DOUBLE|FLOAT ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. INT LONG DOUBLE FLOAT No Yes Examples EXAMPLE 1 @info(name = 'query1') from inputStream select maximum(price1, price2, price3) as max insert into outputStream; This will returns the maximum value of the input parameters price1, price2, price3.","title":"maximum (Function)"},{"location":"api/5.0.3/#minimum-function","text":"Returns the minimum value of the input parameters. Syntax INT|LONG|DOUBLE|FLOAT minimum( INT|LONG|DOUBLE|FLOAT arg, INT|LONG|DOUBLE|FLOAT ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. INT LONG DOUBLE FLOAT No Yes Examples EXAMPLE 1 @info(name = 'query1') from inputStream select maximum(price1, price2, price3) as max insert into outputStream; This will returns the minimum value of the input parameters price1, price2, price3.","title":"minimum (Function)"},{"location":"api/5.0.3/#sizeofset-function","text":"Returns the size of an object of type java.util.Set. Syntax INT sizeOfSet( OBJECT set) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic set The set object. This parameter should be of type java.util.Set. A set object may be created by the 'set' attribute aggregator in Siddhi. OBJECT No Yes Examples EXAMPLE 1 from stockStream select initSet(symbol) as initialSet insert into initStream; ;from initStream#window.timeBatch(10 sec) select union(initialSet) as distinctSymbols insert into distinctStockStream; from distinctStockStream select sizeOfSet(distinctSymbols) sizeOfSymbolSet insert into sizeStream; The sizeStream stream will output the number of distinct stock symbols received during a sliding window of 10 seconds.","title":"sizeOfSet (Function)"},{"location":"api/5.0.3/#pol2cart-stream-function","text":"The pol2Cart function calculating the cartesian coordinates x y for the given theta, rho coordinates and adding them as new attributes to the existing events. Syntax pol2Cart() pol2Cart( DOUBLE theta, DOUBLE rho) pol2Cart( DOUBLE theta, DOUBLE rho, DOUBLE z) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic theta The theta value of the coordinates. DOUBLE No Yes rho The rho value of the coordinates. DOUBLE No Yes z z value of the cartesian coordinates. If z value is not given, drop the third parameter of the output. DOUBLE Yes Yes Examples EXAMPLE 1 from PolarStream#pol2Cart(theta, rho) select x, y insert into outputStream ; This will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5. EXAMPLE 2 from PolarStream#pol2Cart(theta, rho, 3.4) select x, y, z insert into outputStream ; This will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.","title":"pol2Cart (Stream Function)"},{"location":"api/5.0.3/#log-stream-processor","text":"The logger logs the message on the given priority with or without processed event. Syntax log() log( STRING log.message) log( BOOL is.event.logged) log( STRING log.message, BOOL is.event.logged) log( STRING priority, STRING log.message) log( STRING priority, STRING log.message, BOOL is.event.logged) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic priority The priority/type of this log message (INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE). INFO STRING Yes No log.message This message will be logged. : STRING Yes Yes is.event.logged To log the processed event. true BOOL Yes No Examples EXAMPLE 1 from fooStream#log( INFO , Sample Event : , true) select * insert into barStream; This will log as INFO with the message \"Sample Event :\" + fooStream:events. EXAMPLE 2 from fooStream#log( Sample Event : , true) select * insert into barStream; This will logs with default log level as INFO. EXAMPLE 3 from fooStream#log( Sample Event : , fasle) select * insert into barStream; This will only log message. EXAMPLE 4 from fooStream#log(true) select * insert into barStream; This will only log fooStream:events. EXAMPLE 5 from fooStream#log() select * insert into barStream; This will only log fooStream:events. EXAMPLE 6 from fooStream#log( Sample Event : ) select * insert into barStream; This will log message and fooStream:events.","title":"log (Stream Processor)"},{"location":"api/5.0.3/#batch-window","text":"A window that holds an incoming events batch. When a new set of events arrives, the previously arrived old events will be expired. Batch window can be used to aggregate events that comes in batches. If it has the parameter length specified, then batch window process the batch as several chunks. Syntax batch() batch( INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic window.length The length of a chunk If length value was not given it assign 0 as length and process the whole batch as once INT Yes No Examples EXAMPLE 1 define stream consumerItemStream (itemId string, price float) from consumerItemStream#window.batch() select price, str:groupConcat(itemId) as itemIds group by price insert into outputStream; This will output comma separated items IDs that have the same price for each incoming batch of events.","title":"batch (Window)"},{"location":"api/5.0.3/#cron-window","text":"This window outputs the arriving events as and when they arrive, and resets (expires) the window periodically based on the given cron expression. Syntax cron( STRING cron.expression) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic cron.expression The cron expression that resets the window. STRING No No Examples EXAMPLE 1 define stream InputEventStream (symbol string, price float, volume int); @info(name = 'query1') from InputEventStream#cron('*/5 * * * * ?') select symbol, sum(price) as totalPrice insert into OutputStream; This let the totalPrice to gradually increase and resets to zero as a batch every 5 seconds. EXAMPLE 2 define stream StockEventStream (symbol string, price float, volume int) define window StockEventWindow (symbol string, price float, volume int) cron('*/5 * * * * ?'); @info(name = 'query0') from StockEventStream insert into StockEventWindow; @info(name = 'query1') from StockEventWindow select symbol, sum(price) as totalPrice insert into OutputStream ; The defined window will let the totalPrice to gradually increase and resets to zero as a batch every 5 seconds.","title":"cron (Window)"},{"location":"api/5.0.3/#delay-window","text":"A delay window holds events for a specific time period that is regarded as a delay period before processing them. Syntax delay( INT|LONG|TIME window.delay) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic window.delay The time period (specified in sec, min, ms) for which the window should delay the events. INT LONG TIME No No Examples EXAMPLE 1 define window delayWindow(symbol string, volume int) delay(1 hour); define stream PurchaseStream(symbol string, volume int); define stream DeliveryStream(symbol string); define stream OutputStream(symbol string); @info(name='query1') from PurchaseStream select symbol, volume insert into delayWindow; @info(name='query2') from delayWindow join DeliveryStream on delayWindow.symbol == DeliveryStream.symbol select delayWindow.symbol insert into OutputStream; In this example, purchase events that arrive in the 'PurchaseStream' stream are directed to a delay window. At any given time, this delay window holds purchase events that have arrived within the last hour. These purchase events in the window are matched by the 'symbol' attribute, with delivery events that arrive in the 'DeliveryStream' stream. This monitors whether the delivery of products is done with a minimum delay of one hour after the purchase.","title":"delay (Window)"},{"location":"api/5.0.3/#externaltime-window","text":"A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp. Syntax externalTime( LONG timestamp, INT|LONG|TIME window.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic timestamp The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. LONG No Yes window.time The sliding time period for which the window should hold events. INT LONG TIME No No Examples EXAMPLE 1 define window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events; @info(name = 'query0') from cseEventStream insert into cseEventWindow; @info(name = 'query1') from cseEventWindow select symbol, sum(price) as price insert expired events into outputStream ; processing events arrived within the last 20 seconds from the eventTime and output expired events.","title":"externalTime (Window)"},{"location":"api/5.0.3/#externaltimebatch-window","text":"A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime. Syntax externalTimeBatch( LONG timestamp, INT|LONG|TIME window.time) externalTimeBatch( LONG timestamp, INT|LONG|TIME window.time, INT|LONG|TIME start.time) externalTimeBatch( LONG timestamp, INT|LONG|TIME window.time, INT|LONG|TIME start.time, INT|LONG|TIME timeout) externalTimeBatch( LONG timestamp, INT|LONG|TIME window.time, INT|LONG|TIME start.time, INT|LONG|TIME timeout, BOOL replace.with.batchtime) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic timestamp The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. LONG No Yes window.time The batch time period for which the window should hold events. INT LONG TIME No No start.time User defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. Timestamp of first event INT LONG TIME Yes Yes timeout Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. System waits till an event from next batch arrives to flush current batch INT LONG TIME Yes No replace.with.batchtime This indicates to replace the expired event timeStamp as the batch end timeStamp System waits till an event from next batch arrives to flush current batch BOOL Yes No Examples EXAMPLE 1 define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events; @info(name = 'query0') from cseEventStream insert into cseEventWindow; @info(name = 'query1') from cseEventWindow select symbol, sum(price) as price insert expired events into outputStream ; This will processing events that arrive every 1 seconds from the eventTime. EXAMPLE 2 define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events; This will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour. EXAMPLE 3 define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events; This will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.","title":"externalTimeBatch (Window)"},{"location":"api/5.0.3/#frequent-window","text":"Deprecated This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm. Syntax frequent( INT event.count) frequent( INT event.count, STRING attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic event.count The number of most frequent events to be emitted to the stream. INT No No attribute The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. The concatenation of all the attributes of the event is considered. STRING Yes Yes Examples EXAMPLE 1 @info(name = 'query1') from purchase[price = 30]#window.frequent(2) select cardNo, price insert all events into PotentialFraud; This will returns the 2 most frequent events. EXAMPLE 2 @info(name = 'query1') from purchase[price = 30]#window.frequent(2, cardNo) select cardNo, price insert all events into PotentialFraud; This will returns the 2 latest events with the most frequently appeared card numbers.","title":"frequent (Window)"},{"location":"api/5.0.3/#length-window","text":"A sliding length window that holds the last 'window.length' events at a given time, and gets updated for each arrival and expiry. Syntax length( INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic window.length The number of events that should be included in a sliding length window. INT No No Examples EXAMPLE 1 define window StockEventWindow (symbol string, price float, volume int) length(10) output all events; @info(name = 'query0') from StockEventStream insert into StockEventWindow; @info(name = 'query1') from StockEventWindow select symbol, sum(price) as price insert all events into outputStream ; This will process last 10 events in a sliding manner.","title":"length (Window)"},{"location":"api/5.0.3/#lengthbatch-window","text":"A batch (tumbling) length window that holds and process a number of events as specified in the window.length. Syntax lengthBatch( INT window.length) lengthBatch( INT window.length, BOOL stream.current.event) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic window.length The number of events the window should tumble. INT No No stream.current.event Let the window stream the current events out as and when they arrive to the window while expiring them in batches. false BOOL Yes No Examples EXAMPLE 1 define stream InputEventStream (symbol string, price float, volume int); @info(name = 'query1') from InputEventStream#lengthBatch(10) select symbol, sum(price) as price insert into OutputStream; This collect and process 10 events as a batch and output them. EXAMPLE 2 define stream InputEventStream (symbol string, price float, volume int); @info(name = 'query1') from InputEventStream#lengthBatch(10, true) select symbol, sum(price) as sumPrice insert into OutputStream; This window sends the arriving events directly to the output letting the sumPrice to increase gradually, after every 10 events it clears the window as a batch and resets the sumPrice to zero. EXAMPLE 3 define stream InputEventStream (symbol string, price float, volume int); define window StockEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events; @info(name = 'query0') from InputEventStream insert into StockEventWindow; @info(name = 'query1') from StockEventWindow select symbol, sum(price) as price insert all events into OutputStream ; This uses an defined window to process 10 events as a batch and output all events.","title":"lengthBatch (Window)"},{"location":"api/5.0.3/#lossyfrequent-window","text":"Deprecated This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter. Syntax lossyFrequent( DOUBLE support.threshold) lossyFrequent( DOUBLE support.threshold, DOUBLE error.bound) lossyFrequent( DOUBLE support.threshold, DOUBLE error.bound, STRING attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic support.threshold The support threshold value. DOUBLE No No error.bound The error bound value. DOUBLE No No attribute The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. The concatenation of all the attributes of the event is considered. STRING Yes Yes Examples EXAMPLE 1 define stream purchase (cardNo string, price float); define window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01); @info(name = 'query0') from purchase[price = 30] insert into purchaseWindow; @info(name = 'query1') from purchaseWindow select cardNo, price insert all events into PotentialFraud; lossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01. EXAMPLE 2 define stream purchase (cardNo string, price float); define window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo); @info(name = 'query0') from purchase[price = 30] insert into purchaseWindow; @info(name = 'query1') from purchaseWindow select cardNo, price insert all events into PotentialFraud; lossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.","title":"lossyFrequent (Window)"},{"location":"api/5.0.3/#session-window","text":"This is a session window that holds events that belong to a specific session. The events that belong to a specific session are identified by a grouping attribute (i.e., a session key). A session gap period is specified to determine the time period after which the session is considered to be expired. A new event that arrives with a specific value for the session key is matched with the session window with the same session key. There can be out of order and late arrival of events, these events can arrive after the session is expired, to include those events to the matching session key specify a latency time period that is less than the session gap period.To have aggregate functions with session windows, the events need to be grouped by the session key via a 'group by' clause. Syntax session( INT|LONG|TIME window.session) session( INT|LONG|TIME window.session, STRING window.key) session( INT|LONG|TIME window.session, STRING window.key, INT|LONG|TIME window.allowed.latency) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic window.session The time period for which the session considered is valid. This is specified in seconds, minutes, or milliseconds (i.e., 'min', 'sec', or 'ms'. INT LONG TIME No No window.key The grouping attribute for events. default-key STRING Yes Yes window.allowed.latency This specifies the time period for which the session window is valid after the expiration of the session. The time period specified here should be less than the session time gap (which is specified via the 'window.session' parameter). 0 INT LONG TIME Yes No Examples EXAMPLE 1 define stream PurchaseEventStream (user string, item_number int, price float, quantity int); @info(name='query0) from PurchaseEventStream#window.session(5 sec, user, 2 sec) select * insert all events into OutputStream; This query processes events that arrive at the PurchaseEvent input stream. The 'user' attribute is the session key, and the session gap is 5 seconds. '2 sec' is specified as the allowed latency. Therefore, events with the matching user name that arrive 2 seconds after the expiration of the session are also considered when performing aggregations for the session identified by the given user name.","title":"session (Window)"},{"location":"api/5.0.3/#sort-window","text":"This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order. Syntax sort( INT window.length, STRING|DOUBLE|INT|LONG|FLOAT|LONG attribute) sort( INT window.length, STRING|DOUBLE|INT|LONG|FLOAT|LONG attribute, STRING order, STRING ...) sort( INT window.length, STRING|DOUBLE|INT|LONG|FLOAT|LONG attribute, STRING order, STRING|DOUBLE|INT|LONG|FLOAT|LONG attribute, STRING|DOUBLE|INT|LONG|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic window.length The size of the window length. INT No No attribute The attribute that should be checked for the order. The concatenation of all the attributes of the event is considered. STRING DOUBLE INT LONG FLOAT LONG Yes Yes order The order define as \"asc\" or \"desc\". asc STRING Yes No Examples EXAMPLE 1 define stream cseEventStream (symbol string, price float, volume long); define window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc'); @info(name = 'query0') from cseEventStream insert into cseEventWindow; @info(name = 'query1') from cseEventWindow select volume insert all events into outputStream ; sort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.","title":"sort (Window)"},{"location":"api/5.0.3/#time-window","text":"A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry. Syntax time( INT|LONG|TIME window.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic window.time The sliding time period for which the window should hold events. INT LONG TIME No No Examples EXAMPLE 1 define window cseEventWindow (symbol string, price float, volume int) time(20) output all events; @info(name = 'query0') from cseEventStream insert into cseEventWindow; @info(name = 'query1') from cseEventWindow select symbol, sum(price) as price insert all events into outputStream ; This will processing events that arrived within the last 20 milliseconds.","title":"time (Window)"},{"location":"api/5.0.3/#timebatch-window","text":"A batch (tumbling) time window that holds and process events that arrive during 'window.time' period as a batch. Syntax timeBatch( INT|LONG|TIME window.time) timeBatch( INT|LONG|TIME window.time, INT|LONG start.time) timeBatch( INT|LONG|TIME window.time, BOOL stream.current.event) timeBatch( INT|LONG|TIME window.time, INT|LONG start.time, BOOL stream.current.event) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic window.time The batch time period in which the window process the events. INT LONG TIME No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes No stream.current.event Let the window stream the current events out as and when they arrive to the window while expiring them in batches. false BOOL Yes No Examples EXAMPLE 1 define stream InputEventStream (symbol string, price float, volume int); @info(name = 'query1') from InputEventStream#timeBatch(20 sec) select symbol, sum(price) as price insert into OutputStream; This collect and process incoming events as a batch every 20 seconds and output them. EXAMPLE 2 define stream InputEventStream (symbol string, price float, volume int); @info(name = 'query1') from InputEventStream#timeBatch(20 sec, true) select symbol, sum(price) as sumPrice insert into OutputStream; This window sends the arriving events directly to the output letting the sumPrice to increase gradually and on every 20 second interval it clears the window as a batch resetting the sumPrice to zero. EXAMPLE 3 define stream InputEventStream (symbol string, price float, volume int); define window StockEventWindow (symbol string, price float, volume int) timeBatch(20 sec) output all events; @info(name = 'query0') from InputEventStream insert into StockEventWindow; @info(name = 'query1') from StockEventWindow select symbol, sum(price) as price insert all events into OutputStream ; This uses an defined window to process events arrived every 20 seconds as a batch and output all events.","title":"timeBatch (Window)"},{"location":"api/5.0.3/#timelength-window","text":"A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry. Syntax timeLength( INT|LONG|TIME window.time, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic window.time The sliding time period for which the window should hold events. INT LONG TIME No No window.length The number of events that should be be included in a sliding length window.. INT No No Examples EXAMPLE 1 define stream cseEventStream (symbol string, price float, volume int); define window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10); @info(name = 'query0') from cseEventStream insert into cseEventWindow; @info(name = 'query1') from cseEventWindow select symbol, price, volume insert all events into outputStream; window.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.","title":"timeLength (Window)"},{"location":"api/5.0.3/#sink","text":"","title":"Sink"},{"location":"api/5.0.3/#inmemory-sink","text":"In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition). Syntax @sink(type= inMemory , topic= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic topic Event will be delivered to allthe subscribers of the same topic STRING No No Examples EXAMPLE 1 @sink(type='inMemory', @map(type='passThrough')) define stream BarStream (symbol string, price float, volume long) In this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.","title":"inMemory (Sink)"},{"location":"api/5.0.3/#log-sink","text":"This is a sink that can be used as a logger. This will log the output events in the output stream with user specified priority and a prefix Syntax @sink(type= log , priority= STRING , prefix= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic priority This will set the logger priority i.e log level. Accepted values are INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE INFO STRING Yes No prefix This will be the prefix to the output message. If the output stream has event [2,4] and the prefix is given as \"Hello\" then the log will show \"Hello : [2,4]\" default prefix will be : STRING Yes No Examples EXAMPLE 1 @sink(type='log', prefix='My Log', priority='DEBUG') define stream BarStream (symbol string, price float, volume long) In this example BarStream uses log sink and the prefix is given as My Log. Also the priority is set to DEBUG. EXAMPLE 2 @sink(type='log', priority='DEBUG') define stream BarStream (symbol string, price float, volume long) In this example BarStream uses log sink and the priority is set to DEBUG. User has not specified prefix so the default prefix will be in the form Siddhi App Name : Stream Name EXAMPLE 3 @sink(type='log', prefix='My Log') define stream BarStream (symbol string, price float, volume long) In this example BarStream uses log sink and the prefix is given as My Log. User has not given a priority so it will be set to default INFO. EXAMPLE 4 @sink(type='log') define stream BarStream (symbol string, price float, volume long) In this example BarStream uses log sink. The user has not given prefix or priority so they will be set to their default values.","title":"log (Sink)"},{"location":"api/5.0.3/#sinkmapper","text":"","title":"Sinkmapper"},{"location":"api/5.0.3/#passthrough-sink-mapper","text":"Pass-through mapper passed events (Event[]) through without any mapping or modifications. Syntax @sink(..., @map(type= passThrough ) Examples EXAMPLE 1 @sink(type='inMemory', @map(type='passThrough')) define stream BarStream (symbol string, price float, volume long); In the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.","title":"passThrough (Sink Mapper)"},{"location":"api/5.0.3/#source","text":"","title":"Source"},{"location":"api/5.0.3/#inmemory-source","text":"In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition). Syntax @source(type= inMemory , topic= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic topic Subscribes to sent on the given topic. STRING No No Examples EXAMPLE 1 @source(type='inMemory', @map(type='passThrough')) define stream BarStream (symbol string, price float, volume long) In this example BarStream uses inMemory transport which passes the received event internally without using external transport.","title":"inMemory (Source)"},{"location":"api/5.0.3/#sourcemapper","text":"","title":"Sourcemapper"},{"location":"api/5.0.3/#passthrough-source-mapper","text":"Pass-through mapper passed events (Event[]) through without any mapping or modifications. Syntax @source(..., @map(type= passThrough ) Examples EXAMPLE 1 @source(type='tcp', @map(type='passThrough')) define stream BarStream (symbol string, price float, volume long); In this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.","title":"passThrough (Source Mapper)"},{"location":"api/5.0.3/#str","text":"","title":"Str"},{"location":"api/5.0.3/#groupconcat-aggregate-function","text":"This function aggregates the received events by concatenating the keys in those events using a separator, e.g.,a comma (,) or a hyphen (-), and returns the concatenated key string. Syntax STRING str:groupConcat( STRING key, STRING separator, STRING distinct, STRING order) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key The string that needs to be aggregated. STRING No No separator The separator that separates each string key after concatenating the keys. , STRING Yes No distinct This is used to only have distinct values in the concatenated string that is returned. false STRING Yes No order This parameter accepts 'ASC' or 'DESC' strings to sort the string keys in either ascending or descending order respectively. No order STRING Yes No Examples EXAMPLE 1 from InputStream#window.time(5 min) select str:groupConcat( key ) as groupedKeys input OutputStream; When we input events having values for the key as 'A' , 'B' , 'S' , 'C' , 'A' , it returns \"A,B,S,C,A\" to the 'OutputStream'. EXAMPLE 2 from InputStream#window.time(5 min) select groupConcat( key , - ,true, ASC ) as groupedKeys input OutputStream; When we input events having values for the key as 'A' , 'B' , 'S' , 'C' , 'A' , specify the seperator as hyphen and choose the order to be ascending, the function returns \"A-B-C-S\" to the 'OutputStream'.","title":"groupConcat (Aggregate Function)"},{"location":"api/5.0.3/#charat-function","text":"Deprecated This function returns the 'char' value that is present at the given index position. of the input string. Syntax STRING str:charAt( STRING input.value, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.value The input string of which the char value at the given position needs to be returned. STRING No No index The variable that specifies the index of the char value that needs to be returned. INT No No Examples EXAMPLE 1 charAt( WSO2 , 1) In this case, the functiion returns the character that exists at index 1. Hence, it returns 'S'.","title":"charAt (Function)"},{"location":"api/5.0.3/#coalesce-function_1","text":"This returns the first input parameter value of the given argument, that is not null. Syntax INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT str:coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have one or more input parameters in any data type. However, all the specified parameters are required to be of the same type. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No No Examples EXAMPLE 1 coalesce(null, BBB , CCC ) This returns the first input parameter that is not null. In this example, it returns \"BBB\".","title":"coalesce (Function)"},{"location":"api/5.0.3/#concat-function","text":"This function returns a string value that is obtained as a result of concatenating two or more input string values. Syntax STRING str:concat( STRING argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn This can have two or more string type input parameters. STRING No No Examples EXAMPLE 1 concat( D533 , 8JU^ , XYZ ) This returns a string value by concatenating two or more given arguments. In the example shown above, it returns \"D5338JU^XYZ\".","title":"concat (Function)"},{"location":"api/5.0.3/#contains-function","text":"This function returns true if the input.string contains the specified sequence of char values in the search.string . Syntax BOOL str:contains( STRING input.string, STRING search.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string Input string value. STRING No No search.string The string value to be searched for in the input.string . STRING No No Examples EXAMPLE 1 contains( 21 products are produced by WSO2 currently , WSO2 ) This returns a boolean value as the output. In this case, it returns true .","title":"contains (Function)"},{"location":"api/5.0.3/#equalsignorecase-function","text":"This returns a boolean value by comparing two strings lexicographically without considering the letter case. Syntax BOOL str:equalsIgnoreCase( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument. This is compared with the first argument. STRING No No Examples EXAMPLE 1 equalsIgnoreCase( WSO2 , wso2 ) This returns a boolean value as the output. In this scenario, it returns \"true\".","title":"equalsIgnoreCase (Function)"},{"location":"api/5.0.3/#filltemplate-function","text":"This extension replaces the templated positions that are marked with an index value in a specified template with the strings provided. Syntax STRING str:fillTemplate( STRING template, STRING|INT|LONG|DOUBLE|FLOAT|BOOL replacement.strings) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic template The string with templated fields that needs to be filled with the given strings. The format of the templated fields should be as follows: {{INDEX}} where 'INDEX' is an integer. This index is used to map the strings that are used to replace the templated fields. STRING No No replacement.strings The strings with which the templated positions in the template need to be replaced. The minimum of two arguments need to be included in the execution string. There is no upper limit on the number of arguments allowed to be included. STRING INT LONG DOUBLE FLOAT BOOL No No Examples EXAMPLE 1 str:fillTemplate( This is {{1}} for the {{2}} function , 'an example', 'fillTemplate') In this example, the template is 'This is {{1}} for the {{2}} function'.Here, the templated string {{1}} is replaced with the 1st string value provided, which is 'an example'. {{2}} is replaced with the 2nd string provided, which is 'fillTemplate' The complete return string is 'This is an example for the fillTemplate function'.","title":"fillTemplate (Function)"},{"location":"api/5.0.3/#hex-function","text":"This function returns a hexadecimal string by converting each byte of each character in the input string to two hexadecimal digits. Syntax STRING str:hex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the hexadecimal value. STRING No No Examples EXAMPLE 1 hex( MySQL ) This returns the hexadecimal value of the input.string. In this scenario, the output is \"4d7953514c\".","title":"hex (Function)"},{"location":"api/5.0.3/#length-function","text":"Returns the length of the input string. Syntax INT str:length( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the length. STRING No No Examples EXAMPLE 1 length( Hello World ) This outputs the length of the provided string. In this scenario, the, output is 11 .","title":"length (Function)"},{"location":"api/5.0.3/#lower-function","text":"Converts the capital letters in the input string to the equivalent simple letters. Syntax STRING str:lower( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to convert to the lower case (i.e., equivalent simple letters). STRING No No Examples EXAMPLE 1 lower( WSO2 cep ) This converts the capital letters in the input.string to the equivalent simple letters. In this scenario, the output is \"wso2 cep \".","title":"lower (Function)"},{"location":"api/5.0.3/#regexp-function","text":"Returns a boolean value based on the matchability of the input string and the given regular expression. Syntax BOOL str:regexp( STRING input.string, STRING regex) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to match with the given regular expression. STRING No No regex The regular expression to be matched with the input string. STRING No No Examples EXAMPLE 1 regexp( WSO2 abcdh , WSO(.*h) ) This returns a boolean value after matching regular expression with the given string. In this scenario, it returns \"true\" as the output.","title":"regexp (Function)"},{"location":"api/5.0.3/#repeat-function","text":"Repeats the input string for a specified number of times. Syntax STRING str:repeat( STRING input.string, INT times) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that is repeated the number of times as defined by the user. STRING No No times The number of times the input.string needs to be repeated . INT No No Examples EXAMPLE 1 repeat( StRing 1 , 3) This returns a string value by repeating the string for a specified number of times. In this scenario, the output is \"StRing 1StRing 1StRing 1\".","title":"repeat (Function)"},{"location":"api/5.0.3/#replaceall-function","text":"Finds all the substrings of the input string that matches with the given expression, and replaces them with the given replacement string. Syntax STRING str:replaceAll( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No regex The regular expression to be matched with the input string. STRING No No replacement.string The string with which each substring that matches the given expression should be replaced. STRING No No Examples EXAMPLE 1 replaceAll( hello hi hello , 'hello', 'test') This returns a string after replacing the substrings of the input string with the replacement string. In this scenario, the output is \"test hi test\" .","title":"replaceAll (Function)"},{"location":"api/5.0.3/#replacefirst-function","text":"Finds the first substring of the input string that matches with the given regular expression, and replaces itwith the given replacement string. Syntax STRING str:replaceFirst( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be replaced. STRING No No regex The regular expression with which the input string should be matched. STRING No No replacement.string The string with which the first substring of input string that matches the regular expression should be replaced. STRING No No Examples EXAMPLE 1 replaceFirst( hello WSO2 A hello , 'WSO2(.*)A', 'XXXX') This returns a string after replacing the first substring with the given replacement string. In this scenario, the output is \"hello XXXX hello\".","title":"replaceFirst (Function)"},{"location":"api/5.0.3/#reverse-function","text":"Returns the input string in the reverse order character-wise and string-wise. Syntax STRING str:reverse( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be reversed. STRING No No Examples EXAMPLE 1 reverse( Hello World ) This outputs a string value by reversing the incoming input.string . In this scenario, the output is \"dlroW olleH\".","title":"reverse (Function)"},{"location":"api/5.0.3/#split-function","text":"Splits the input.string into substrings using the value parsed in the split.string and returns the substring at the position specified in the group.number . Syntax STRING str:split( STRING input.string, STRING split.string, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No split.string The string value to be used to split the input.string . STRING No No group.number The index of the split group INT No No Examples EXAMPLE 1 split( WSO2,ABM,NSFT , , , 0) This splits the given input.string by given split.string and returns the string in the index given by group.number. In this scenario, the output will is \"WSO2\".","title":"split (Function)"},{"location":"api/5.0.3/#strcmp-function","text":"Compares two strings lexicographically and returns an integer value. If both strings are equal, 0 is returned. If the first string is lexicographically greater than the second string, a positive value is returned. If the first string is lexicographically greater than the second string, a negative value is returned. Syntax INT str:strcmp( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument that should be compared with the first argument lexicographically. STRING No No Examples EXAMPLE 1 strcmp( AbCDefghiJ KLMN , 'Hello') This compares two strings lexicographically and outputs an integer value.","title":"strcmp (Function)"},{"location":"api/5.0.3/#substr-function","text":"Returns a substring of the input string by considering a subset or all of the following factors: starting index, length, regular expression, and regex group number. Syntax STRING str:substr( STRING input.string, INT begin.index, INT length, STRING regex, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be processed. STRING No No begin.index Starting index to consider for the substring. INT No No length The length of the substring. INT No No regex The regular expression that should be matched with the input string. STRING No No group.number The regex group number INT No No Examples EXAMPLE 1 substr( AbCDefghiJ KLMN , 4) This outputs the substring based on the given begin.index . In this scenario, the output is \"efghiJ KLMN\". EXAMPLE 2 substr( AbCDefghiJ KLMN , 2, 4) This outputs the substring based on the given begin.index and length. In this scenario, the output is \"CDef\". EXAMPLE 3 substr( WSO2D efghiJ KLMN , '^WSO2(.*)') This outputs the substring by applying the regex. In this scenario, the output is \"WSO2D efghiJ KLMN\". EXAMPLE 4 substr( WSO2 cep WSO2 XX E hi hA WSO2 heAllo , 'WSO2(.*)A(.*)', 2) This outputs the substring by applying the regex and considering the group.number . In this scenario, the output is \" ello\".","title":"substr (Function)"},{"location":"api/5.0.3/#trim-function","text":"Returns a copy of the input string without the leading and trailing whitespace (if any). Syntax STRING str:trim( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that needs to be trimmed. STRING No No Examples EXAMPLE 1 trim( AbCDefghiJ KLMN ) This returns a copy of the input.string with the leading and/or trailing white-spaces omitted. In this scenario, the output is \"AbCDefghiJ KLMN\".","title":"trim (Function)"},{"location":"api/5.0.3/#unhex-function","text":"Returns a string by converting the hexadecimal characters in the input string. Syntax STRING str:unhex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The hexadecimal input string that needs to be converted to string. STRING No No Examples EXAMPLE 1 unhex( 4d7953514c ) This converts the hexadecimal value to string.","title":"unhex (Function)"},{"location":"api/5.0.3/#upper-function","text":"Converts the simple letters in the input string to the equivalent capital/block letters. Syntax STRING str:upper( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be converted to the upper case (equivalent capital/block letters). STRING No No Examples EXAMPLE 1 upper( Hello World ) This converts the simple letters in the input.string to theequivalent capital letters. In this scenario, the output is \"HELLO WORLD\".","title":"upper (Function)"},{"location":"api/5.0.3/#tokenize-stream-processor","text":"This function splits the input string into tokens using a given regular expression and returns the split tokens. Syntax str:tokenize( STRING input.string, STRING regex, BOOL distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string which needs to be split. STRING No No regex The string value which is used to tokenize the 'input.string'. STRING No No distinct This flag is used to return only distinct values. false BOOL Yes No Extra Return Attributes Name Description Possible Types token The attribute which contains a single token. STRING Examples EXAMPLE 1 define stream inputStream (str string); @info(name = 'query1') from inputStream#str:tokenize(str , ',') select text insert into outputStream; This query performs tokenization on the given string. If the str is \"Android,Windows8,iOS\", then the string is split into 3 events containing the token attribute values, i.e., Android , Windows8 and iOS .","title":"tokenize (Stream Processor)"},{"location":"api/latest/","text":"API Docs - v5.0.3 Tested Siddhi Core version: 5.0.2-SNAPSHOT It could also support other Siddhi Core minor versions. Core and (Aggregate Function) Returns the results of AND operation for all the events. Syntax BOOL and( BOOL arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The value that needs to be AND operation. BOOL No Yes Examples EXAMPLE 1 from cscStream#window.lengthBatch(10) select and(isFraud) as isFraudTransaction insert into alertStream; This will returns the result for AND operation of isFraud values as a boolean value for event chunk expiry by window length batch. avg (Aggregate Function) Calculates the average for all the events. Syntax DOUBLE avg( INT|LONG|DOUBLE|FLOAT arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The value that need to be averaged. INT LONG DOUBLE FLOAT No Yes Examples EXAMPLE 1 from fooStream#window.timeBatch select avg(temp) as avgTemp insert into barStream; avg(temp) returns the average temp value for all the events based on their arrival and expiry. count (Aggregate Function) Returns the count of all the events. Syntax LONG count() LONG count( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg This function accepts one parameter. It can belong to any one of the available types. INT LONG DOUBLE FLOAT STRING BOOL OBJECT Yes Yes Examples EXAMPLE 1 from fooStream#window.timeBatch(10 sec) select count() as count insert into barStream; This will return the count of all the events for time batch in 10 seconds. distinctCount (Aggregate Function) This returns the count of distinct occurrences for a given arg. Syntax LONG distinctCount( INT|LONG|DOUBLE|FLOAT|STRING arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The object for which the number of distinct occurences needs to be counted. INT LONG DOUBLE FLOAT STRING No Yes Examples EXAMPLE 1 from fooStream select distinctcount(pageID) as count insert into barStream; distinctcount(pageID) for the following output returns '3' when the available values are as follows. \"WEB_PAGE_1\" \"WEB_PAGE_1\" \"WEB_PAGE_2\" \"WEB_PAGE_3\" \"WEB_PAGE_1\" \"WEB_PAGE_2\" The three distinct occurences identified are 'WEB_PAGE_1', 'WEB_PAGE_2', and 'WEB_PAGE_3'. max (Aggregate Function) Returns the maximum value for all the events. Syntax INT|LONG|DOUBLE|FLOAT max( INT|LONG|DOUBLE|FLOAT arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The value that needs to be compared to find the maximum value. INT LONG DOUBLE FLOAT No Yes Examples EXAMPLE 1 from fooStream#window.timeBatch(10 sec) select max(temp) as maxTemp insert into barStream; max(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry. maxForever (Aggregate Function) This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front. Syntax INT|LONG|DOUBLE|FLOAT maxForever( INT|LONG|DOUBLE|FLOAT arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The value that needs to be compared to find the maximum value. INT LONG DOUBLE FLOAT No Yes Examples EXAMPLE 1 from inputStream select maxForever(temp) as max insert into outputStream; maxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query. min (Aggregate Function) Returns the minimum value for all the events. Syntax INT|LONG|DOUBLE|FLOAT min( INT|LONG|DOUBLE|FLOAT arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The value that needs to be compared to find the minimum value. INT LONG DOUBLE FLOAT No Yes Examples EXAMPLE 1 from inputStream select min(temp) as minTemp insert into outputStream; min(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry. minForever (Aggregate Function) This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front. Syntax INT|LONG|DOUBLE|FLOAT minForever( INT|LONG|DOUBLE|FLOAT arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The value that needs to be compared to find the minimum value. INT LONG DOUBLE FLOAT No Yes Examples EXAMPLE 1 from inputStream select minForever(temp) as max insert into outputStream; minForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query. or (Aggregate Function) Returns the results of OR operation for all the events. Syntax BOOL or( BOOL arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The value that needs to be OR operation. BOOL No Yes Examples EXAMPLE 1 from cscStream#window.lengthBatch(10) select or(isFraud) as isFraudTransaction insert into alertStream; This will returns the result for OR operation of isFraud values as a boolean value for event chunk expiry by window length batch. stdDev (Aggregate Function) Returns the calculated standard deviation for all the events. Syntax DOUBLE stdDev( INT|LONG|DOUBLE|FLOAT arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The value that should be used to calculate the standard deviation. INT LONG DOUBLE FLOAT No Yes Examples EXAMPLE 1 from inputStream select stddev(temp) as stdTemp insert into outputStream; stddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry. sum (Aggregate Function) Returns the sum for all the events. Syntax LONG|DOUBLE sum( INT|LONG|DOUBLE|FLOAT arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The value that needs to be summed. INT LONG DOUBLE FLOAT No Yes Examples EXAMPLE 1 from inputStream select sum(volume) as sumOfVolume insert into outputStream; This will returns the sum of volume values as a long value for each event arrival and expiry. unionSet (Aggregate Function) Union multiple sets. This attribute aggregator maintains a union of sets. The given input set is put into the union set and the union set is returned. Syntax OBJECT unionSet( OBJECT set) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic set The java.util.Set object that needs to be added into the union set. OBJECT No Yes Examples EXAMPLE 1 from stockStream select createSet(symbol) as initialSet insert into initStream from initStream#window.timeBatch(10 sec) select unionSet(initialSet) as distinctSymbols insert into distinctStockStream; distinctStockStream will return the set object which contains the distinct set of stock symbols received during a sliding window of 10 seconds. UUID (Function) Generates a UUID (Universally Unique Identifier). Syntax STRING UUID() Examples EXAMPLE 1 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream; This will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream; cast (Function) Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type. Syntax INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT cast( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT to.be.caster, STRING cast.to) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic to.be.caster This specifies the attribute to be casted. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No Yes cast.to A string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool. STRING No Yes Examples EXAMPLE 1 from fooStream select symbol as name, cast(temp, 'double') as temp insert into barStream; This will cast the fooStream temp field value into 'double' format. coalesce (Function) Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type. Syntax INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT arg, INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No Yes Examples EXAMPLE 1 from fooStream select coalesce('123', null, '789') as value insert into barStream; This will returns first null value 123. EXAMPLE 2 from fooStream select coalesce(null, 76, 567) as value insert into barStream; This will returns first null value 76. EXAMPLE 3 from fooStream select coalesce(null, null, null) as value insert into barStream; This will returns null as there are no notnull values. convert (Function) Converts the first input parameter according to the convertedTo parameter. Syntax INT|LONG|DOUBLE|FLOAT|STRING|BOOL convert( INT|LONG|DOUBLE|FLOAT|STRING|BOOL to.be.converted, STRING converted.to) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic to.be.converted This specifies the value to be converted. INT LONG DOUBLE FLOAT STRING BOOL No Yes converted.to A string constant parameter to which type the attribute need to be converted using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'. STRING No Yes Examples EXAMPLE 1 from fooStream select convert(temp, 'double') as temp insert into barStream; This will convert fooStream temp value into 'double'. EXAMPLE 2 from fooStream select convert(temp, 'int') as temp insert into barStream; This will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\"). createSet (Function) Includes the given input parameter in a java.util.HashSet and returns the set. Syntax OBJECT createSet( INT|LONG|DOUBLE|FLOAT|STRING|BOOL input) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input The input that needs to be added into the set. INT LONG DOUBLE FLOAT STRING BOOL No Yes Examples EXAMPLE 1 from stockStream select createSet(symbol) as initialSet insert into initStream; For every incoming stockStream event, the initStream stream will produce a set object having only one element: the symbol in the incoming stockStream. currentTimeMillis (Function) Returns the current timestamp of siddhi application in milliseconds. Syntax LONG currentTimeMillis() Examples EXAMPLE 1 from fooStream select symbol as name, currentTimeMillis() as eventTimestamp insert into barStream; This will extract current siddhi application timestamp. default (Function) Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter Syntax INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT default( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT attribute, INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT default) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic attribute The attribute that could be null. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No Yes default The default value that will be used when 'attribute' parameter is null INT LONG DOUBLE FLOAT STRING BOOL OBJECT No Yes Examples EXAMPLE 1 from TempStream select default(temp, 0.0) as temp, roomNum insert into StandardTempStream; This will replace TempStream's temp attribute with default value if the temp is null. eventTimestamp (Function) Returns the timestamp of the processed event. Syntax LONG eventTimestamp() Examples EXAMPLE 1 from fooStream select symbol as name, eventTimestamp() as eventTimestamp insert into barStream; This will extract current events timestamp. ifThenElse (Function) Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type. Syntax INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT ifThenElse( BOOL condition, INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT if.expression, INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT else.expression) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic condition This specifies the if then else condition value. BOOL No Yes if.expression This specifies the value to be returned if the value of the condition parameter is true. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No Yes else.expression This specifies the value to be returned if the value of the condition parameter is false. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No Yes Examples EXAMPLE 1 @info(name = 'query1') from sensorEventStream select sensorValue, ifThenElse(sensorValue 35,'High','Low') as status insert into outputStream; This will returns High if sensorValue = 50. EXAMPLE 2 @info(name = 'query1') from sensorEventStream select sensorValue, ifThenElse(voltage 5, 0, 1) as status insert into outputStream; This will returns 1 if voltage= 12. EXAMPLE 3 @info(name = 'query1') from userEventStream select userName, ifThenElse(password == 'admin', true, false) as passwordState insert into outputStream; This will returns passwordState as true if password = admin. instanceOfBoolean (Function) Checks whether the parameter is an instance of Boolean or not. Syntax BOOL instanceOfBoolean( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The parameter to be checked. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No Yes Examples EXAMPLE 1 from fooStream select instanceOfBoolean(switchState) as state insert into barStream; This will return true if the value of switchState is true. EXAMPLE 2 from fooStream select instanceOfBoolean(value) as state insert into barStream; if the value = 32 then this will returns false as the value is not an instance of the boolean. instanceOfDouble (Function) Checks whether the parameter is an instance of Double or not. Syntax BOOL instanceOfDouble( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The parameter to be checked. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No Yes Examples EXAMPLE 1 from fooStream select instanceOfDouble(value) as state insert into barStream; This will return true if the value field format is double ex : 56.45. EXAMPLE 2 from fooStream select instanceOfDouble(switchState) as state insert into barStream; if the switchState = true then this will returns false as the value is not an instance of the double. instanceOfFloat (Function) Checks whether the parameter is an instance of Float or not. Syntax BOOL instanceOfFloat( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The parameter to be checked. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No Yes Examples EXAMPLE 1 from fooStream select instanceOfFloat(value) as state insert into barStream; This will return true if the value field format is float ex : 56.45f. EXAMPLE 2 from fooStream select instanceOfFloat(switchState) as state insert into barStream; if the switchState = true then this will returns false as the value is an instance of the boolean not a float. instanceOfInteger (Function) Checks whether the parameter is an instance of Integer or not. Syntax BOOL instanceOfInteger( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The parameter to be checked. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No Yes Examples EXAMPLE 1 from fooStream select instanceOfInteger(value) as state insert into barStream; This will return true if the value field format is integer. EXAMPLE 2 from fooStream select instanceOfInteger(switchState) as state insert into barStream; if the switchState = true then this will returns false as the value is an instance of the boolean not a long. instanceOfLong (Function) Checks whether the parameter is an instance of Long or not. Syntax BOOL instanceOfLong( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The parameter to be checked. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No Yes Examples EXAMPLE 1 from fooStream select instanceOfLong(value) as state insert into barStream; This will return true if the value field format is long ex : 56456l. EXAMPLE 2 from fooStream select instanceOfLong(switchState) as state insert into barStream; if the switchState = true then this will returns false as the value is an instance of the boolean not a long. instanceOfString (Function) Checks whether the parameter is an instance of String or not. Syntax BOOL instanceOfString( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The parameter to be checked. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No Yes Examples EXAMPLE 1 from fooStream select instanceOfString(value) as state insert into barStream; This will return true if the value field format is string ex : 'test'. EXAMPLE 2 from fooStream select instanceOfString(switchState) as state insert into barStream; if the switchState = true then this will returns false as the value is an instance of the boolean not a string. maximum (Function) Returns the maximum value of the input parameters. Syntax INT|LONG|DOUBLE|FLOAT maximum( INT|LONG|DOUBLE|FLOAT arg, INT|LONG|DOUBLE|FLOAT ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. INT LONG DOUBLE FLOAT No Yes Examples EXAMPLE 1 @info(name = 'query1') from inputStream select maximum(price1, price2, price3) as max insert into outputStream; This will returns the maximum value of the input parameters price1, price2, price3. minimum (Function) Returns the minimum value of the input parameters. Syntax INT|LONG|DOUBLE|FLOAT minimum( INT|LONG|DOUBLE|FLOAT arg, INT|LONG|DOUBLE|FLOAT ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. INT LONG DOUBLE FLOAT No Yes Examples EXAMPLE 1 @info(name = 'query1') from inputStream select maximum(price1, price2, price3) as max insert into outputStream; This will returns the minimum value of the input parameters price1, price2, price3. sizeOfSet (Function) Returns the size of an object of type java.util.Set. Syntax INT sizeOfSet( OBJECT set) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic set The set object. This parameter should be of type java.util.Set. A set object may be created by the 'set' attribute aggregator in Siddhi. OBJECT No Yes Examples EXAMPLE 1 from stockStream select initSet(symbol) as initialSet insert into initStream; ;from initStream#window.timeBatch(10 sec) select union(initialSet) as distinctSymbols insert into distinctStockStream; from distinctStockStream select sizeOfSet(distinctSymbols) sizeOfSymbolSet insert into sizeStream; The sizeStream stream will output the number of distinct stock symbols received during a sliding window of 10 seconds. pol2Cart (Stream Function) The pol2Cart function calculating the cartesian coordinates x y for the given theta, rho coordinates and adding them as new attributes to the existing events. Syntax pol2Cart() pol2Cart( DOUBLE theta, DOUBLE rho) pol2Cart( DOUBLE theta, DOUBLE rho, DOUBLE z) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic theta The theta value of the coordinates. DOUBLE No Yes rho The rho value of the coordinates. DOUBLE No Yes z z value of the cartesian coordinates. If z value is not given, drop the third parameter of the output. DOUBLE Yes Yes Examples EXAMPLE 1 from PolarStream#pol2Cart(theta, rho) select x, y insert into outputStream ; This will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5. EXAMPLE 2 from PolarStream#pol2Cart(theta, rho, 3.4) select x, y, z insert into outputStream ; This will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4. log (Stream Processor) The logger logs the message on the given priority with or without processed event. Syntax log() log( STRING log.message) log( BOOL is.event.logged) log( STRING log.message, BOOL is.event.logged) log( STRING priority, STRING log.message) log( STRING priority, STRING log.message, BOOL is.event.logged) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic priority The priority/type of this log message (INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE). INFO STRING Yes No log.message This message will be logged. : STRING Yes Yes is.event.logged To log the processed event. true BOOL Yes No Examples EXAMPLE 1 from fooStream#log( INFO , Sample Event : , true) select * insert into barStream; This will log as INFO with the message \"Sample Event :\" + fooStream:events. EXAMPLE 2 from fooStream#log( Sample Event : , true) select * insert into barStream; This will logs with default log level as INFO. EXAMPLE 3 from fooStream#log( Sample Event : , fasle) select * insert into barStream; This will only log message. EXAMPLE 4 from fooStream#log(true) select * insert into barStream; This will only log fooStream:events. EXAMPLE 5 from fooStream#log() select * insert into barStream; This will only log fooStream:events. EXAMPLE 6 from fooStream#log( Sample Event : ) select * insert into barStream; This will log message and fooStream:events. batch (Window) A window that holds an incoming events batch. When a new set of events arrives, the previously arrived old events will be expired. Batch window can be used to aggregate events that comes in batches. If it has the parameter length specified, then batch window process the batch as several chunks. Syntax batch() batch( INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic window.length The length of a chunk If length value was not given it assign 0 as length and process the whole batch as once INT Yes No Examples EXAMPLE 1 define stream consumerItemStream (itemId string, price float) from consumerItemStream#window.batch() select price, str:groupConcat(itemId) as itemIds group by price insert into outputStream; This will output comma separated items IDs that have the same price for each incoming batch of events. cron (Window) This window outputs the arriving events as and when they arrive, and resets (expires) the window periodically based on the given cron expression. Syntax cron( STRING cron.expression) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic cron.expression The cron expression that resets the window. STRING No No Examples EXAMPLE 1 define stream InputEventStream (symbol string, price float, volume int); @info(name = 'query1') from InputEventStream#cron('*/5 * * * * ?') select symbol, sum(price) as totalPrice insert into OutputStream; This let the totalPrice to gradually increase and resets to zero as a batch every 5 seconds. EXAMPLE 2 define stream StockEventStream (symbol string, price float, volume int) define window StockEventWindow (symbol string, price float, volume int) cron('*/5 * * * * ?'); @info(name = 'query0') from StockEventStream insert into StockEventWindow; @info(name = 'query1') from StockEventWindow select symbol, sum(price) as totalPrice insert into OutputStream ; The defined window will let the totalPrice to gradually increase and resets to zero as a batch every 5 seconds. delay (Window) A delay window holds events for a specific time period that is regarded as a delay period before processing them. Syntax delay( INT|LONG|TIME window.delay) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic window.delay The time period (specified in sec, min, ms) for which the window should delay the events. INT LONG TIME No No Examples EXAMPLE 1 define window delayWindow(symbol string, volume int) delay(1 hour); define stream PurchaseStream(symbol string, volume int); define stream DeliveryStream(symbol string); define stream OutputStream(symbol string); @info(name='query1') from PurchaseStream select symbol, volume insert into delayWindow; @info(name='query2') from delayWindow join DeliveryStream on delayWindow.symbol == DeliveryStream.symbol select delayWindow.symbol insert into OutputStream; In this example, purchase events that arrive in the 'PurchaseStream' stream are directed to a delay window. At any given time, this delay window holds purchase events that have arrived within the last hour. These purchase events in the window are matched by the 'symbol' attribute, with delivery events that arrive in the 'DeliveryStream' stream. This monitors whether the delivery of products is done with a minimum delay of one hour after the purchase. externalTime (Window) A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp. Syntax externalTime( LONG timestamp, INT|LONG|TIME window.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic timestamp The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. LONG No Yes window.time The sliding time period for which the window should hold events. INT LONG TIME No No Examples EXAMPLE 1 define window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events; @info(name = 'query0') from cseEventStream insert into cseEventWindow; @info(name = 'query1') from cseEventWindow select symbol, sum(price) as price insert expired events into outputStream ; processing events arrived within the last 20 seconds from the eventTime and output expired events. externalTimeBatch (Window) A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime. Syntax externalTimeBatch( LONG timestamp, INT|LONG|TIME window.time) externalTimeBatch( LONG timestamp, INT|LONG|TIME window.time, INT|LONG|TIME start.time) externalTimeBatch( LONG timestamp, INT|LONG|TIME window.time, INT|LONG|TIME start.time, INT|LONG|TIME timeout) externalTimeBatch( LONG timestamp, INT|LONG|TIME window.time, INT|LONG|TIME start.time, INT|LONG|TIME timeout, BOOL replace.with.batchtime) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic timestamp The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. LONG No Yes window.time The batch time period for which the window should hold events. INT LONG TIME No No start.time User defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. Timestamp of first event INT LONG TIME Yes Yes timeout Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. System waits till an event from next batch arrives to flush current batch INT LONG TIME Yes No replace.with.batchtime This indicates to replace the expired event timeStamp as the batch end timeStamp System waits till an event from next batch arrives to flush current batch BOOL Yes No Examples EXAMPLE 1 define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events; @info(name = 'query0') from cseEventStream insert into cseEventWindow; @info(name = 'query1') from cseEventWindow select symbol, sum(price) as price insert expired events into outputStream ; This will processing events that arrive every 1 seconds from the eventTime. EXAMPLE 2 define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events; This will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour. EXAMPLE 3 define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events; This will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch. frequent (Window) Deprecated This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm. Syntax frequent( INT event.count) frequent( INT event.count, STRING attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic event.count The number of most frequent events to be emitted to the stream. INT No No attribute The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. The concatenation of all the attributes of the event is considered. STRING Yes Yes Examples EXAMPLE 1 @info(name = 'query1') from purchase[price = 30]#window.frequent(2) select cardNo, price insert all events into PotentialFraud; This will returns the 2 most frequent events. EXAMPLE 2 @info(name = 'query1') from purchase[price = 30]#window.frequent(2, cardNo) select cardNo, price insert all events into PotentialFraud; This will returns the 2 latest events with the most frequently appeared card numbers. length (Window) A sliding length window that holds the last 'window.length' events at a given time, and gets updated for each arrival and expiry. Syntax length( INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic window.length The number of events that should be included in a sliding length window. INT No No Examples EXAMPLE 1 define window StockEventWindow (symbol string, price float, volume int) length(10) output all events; @info(name = 'query0') from StockEventStream insert into StockEventWindow; @info(name = 'query1') from StockEventWindow select symbol, sum(price) as price insert all events into outputStream ; This will process last 10 events in a sliding manner. lengthBatch (Window) A batch (tumbling) length window that holds and process a number of events as specified in the window.length. Syntax lengthBatch( INT window.length) lengthBatch( INT window.length, BOOL stream.current.event) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic window.length The number of events the window should tumble. INT No No stream.current.event Let the window stream the current events out as and when they arrive to the window while expiring them in batches. false BOOL Yes No Examples EXAMPLE 1 define stream InputEventStream (symbol string, price float, volume int); @info(name = 'query1') from InputEventStream#lengthBatch(10) select symbol, sum(price) as price insert into OutputStream; This collect and process 10 events as a batch and output them. EXAMPLE 2 define stream InputEventStream (symbol string, price float, volume int); @info(name = 'query1') from InputEventStream#lengthBatch(10, true) select symbol, sum(price) as sumPrice insert into OutputStream; This window sends the arriving events directly to the output letting the sumPrice to increase gradually, after every 10 events it clears the window as a batch and resets the sumPrice to zero. EXAMPLE 3 define stream InputEventStream (symbol string, price float, volume int); define window StockEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events; @info(name = 'query0') from InputEventStream insert into StockEventWindow; @info(name = 'query1') from StockEventWindow select symbol, sum(price) as price insert all events into OutputStream ; This uses an defined window to process 10 events as a batch and output all events. lossyFrequent (Window) Deprecated This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter. Syntax lossyFrequent( DOUBLE support.threshold) lossyFrequent( DOUBLE support.threshold, DOUBLE error.bound) lossyFrequent( DOUBLE support.threshold, DOUBLE error.bound, STRING attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic support.threshold The support threshold value. DOUBLE No No error.bound The error bound value. DOUBLE No No attribute The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. The concatenation of all the attributes of the event is considered. STRING Yes Yes Examples EXAMPLE 1 define stream purchase (cardNo string, price float); define window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01); @info(name = 'query0') from purchase[price = 30] insert into purchaseWindow; @info(name = 'query1') from purchaseWindow select cardNo, price insert all events into PotentialFraud; lossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01. EXAMPLE 2 define stream purchase (cardNo string, price float); define window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo); @info(name = 'query0') from purchase[price = 30] insert into purchaseWindow; @info(name = 'query1') from purchaseWindow select cardNo, price insert all events into PotentialFraud; lossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05. session (Window) This is a session window that holds events that belong to a specific session. The events that belong to a specific session are identified by a grouping attribute (i.e., a session key). A session gap period is specified to determine the time period after which the session is considered to be expired. A new event that arrives with a specific value for the session key is matched with the session window with the same session key. There can be out of order and late arrival of events, these events can arrive after the session is expired, to include those events to the matching session key specify a latency time period that is less than the session gap period.To have aggregate functions with session windows, the events need to be grouped by the session key via a 'group by' clause. Syntax session( INT|LONG|TIME window.session) session( INT|LONG|TIME window.session, STRING window.key) session( INT|LONG|TIME window.session, STRING window.key, INT|LONG|TIME window.allowed.latency) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic window.session The time period for which the session considered is valid. This is specified in seconds, minutes, or milliseconds (i.e., 'min', 'sec', or 'ms'. INT LONG TIME No No window.key The grouping attribute for events. default-key STRING Yes Yes window.allowed.latency This specifies the time period for which the session window is valid after the expiration of the session. The time period specified here should be less than the session time gap (which is specified via the 'window.session' parameter). 0 INT LONG TIME Yes No Examples EXAMPLE 1 define stream PurchaseEventStream (user string, item_number int, price float, quantity int); @info(name='query0) from PurchaseEventStream#window.session(5 sec, user, 2 sec) select * insert all events into OutputStream; This query processes events that arrive at the PurchaseEvent input stream. The 'user' attribute is the session key, and the session gap is 5 seconds. '2 sec' is specified as the allowed latency. Therefore, events with the matching user name that arrive 2 seconds after the expiration of the session are also considered when performing aggregations for the session identified by the given user name. sort (Window) This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order. Syntax sort( INT window.length, STRING|DOUBLE|INT|LONG|FLOAT|LONG attribute) sort( INT window.length, STRING|DOUBLE|INT|LONG|FLOAT|LONG attribute, STRING order, STRING ...) sort( INT window.length, STRING|DOUBLE|INT|LONG|FLOAT|LONG attribute, STRING order, STRING|DOUBLE|INT|LONG|FLOAT|LONG attribute, STRING|DOUBLE|INT|LONG|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic window.length The size of the window length. INT No No attribute The attribute that should be checked for the order. The concatenation of all the attributes of the event is considered. STRING DOUBLE INT LONG FLOAT LONG Yes Yes order The order define as \"asc\" or \"desc\". asc STRING Yes No Examples EXAMPLE 1 define stream cseEventStream (symbol string, price float, volume long); define window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc'); @info(name = 'query0') from cseEventStream insert into cseEventWindow; @info(name = 'query1') from cseEventWindow select volume insert all events into outputStream ; sort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices. time (Window) A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry. Syntax time( INT|LONG|TIME window.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic window.time The sliding time period for which the window should hold events. INT LONG TIME No No Examples EXAMPLE 1 define window cseEventWindow (symbol string, price float, volume int) time(20) output all events; @info(name = 'query0') from cseEventStream insert into cseEventWindow; @info(name = 'query1') from cseEventWindow select symbol, sum(price) as price insert all events into outputStream ; This will processing events that arrived within the last 20 milliseconds. timeBatch (Window) A batch (tumbling) time window that holds and process events that arrive during 'window.time' period as a batch. Syntax timeBatch( INT|LONG|TIME window.time) timeBatch( INT|LONG|TIME window.time, INT|LONG start.time) timeBatch( INT|LONG|TIME window.time, BOOL stream.current.event) timeBatch( INT|LONG|TIME window.time, INT|LONG start.time, BOOL stream.current.event) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic window.time The batch time period in which the window process the events. INT LONG TIME No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes No stream.current.event Let the window stream the current events out as and when they arrive to the window while expiring them in batches. false BOOL Yes No Examples EXAMPLE 1 define stream InputEventStream (symbol string, price float, volume int); @info(name = 'query1') from InputEventStream#timeBatch(20 sec) select symbol, sum(price) as price insert into OutputStream; This collect and process incoming events as a batch every 20 seconds and output them. EXAMPLE 2 define stream InputEventStream (symbol string, price float, volume int); @info(name = 'query1') from InputEventStream#timeBatch(20 sec, true) select symbol, sum(price) as sumPrice insert into OutputStream; This window sends the arriving events directly to the output letting the sumPrice to increase gradually and on every 20 second interval it clears the window as a batch resetting the sumPrice to zero. EXAMPLE 3 define stream InputEventStream (symbol string, price float, volume int); define window StockEventWindow (symbol string, price float, volume int) timeBatch(20 sec) output all events; @info(name = 'query0') from InputEventStream insert into StockEventWindow; @info(name = 'query1') from StockEventWindow select symbol, sum(price) as price insert all events into OutputStream ; This uses an defined window to process events arrived every 20 seconds as a batch and output all events. timeLength (Window) A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry. Syntax timeLength( INT|LONG|TIME window.time, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic window.time The sliding time period for which the window should hold events. INT LONG TIME No No window.length The number of events that should be be included in a sliding length window.. INT No No Examples EXAMPLE 1 define stream cseEventStream (symbol string, price float, volume int); define window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10); @info(name = 'query0') from cseEventStream insert into cseEventWindow; @info(name = 'query1') from cseEventWindow select symbol, price, volume insert all events into outputStream; window.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry. Sink inMemory (Sink) In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition). Syntax @sink(type= inMemory , topic= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic topic Event will be delivered to allthe subscribers of the same topic STRING No No Examples EXAMPLE 1 @sink(type='inMemory', @map(type='passThrough')) define stream BarStream (symbol string, price float, volume long) In this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation. log (Sink) This is a sink that can be used as a logger. This will log the output events in the output stream with user specified priority and a prefix Syntax @sink(type= log , priority= STRING , prefix= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic priority This will set the logger priority i.e log level. Accepted values are INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE INFO STRING Yes No prefix This will be the prefix to the output message. If the output stream has event [2,4] and the prefix is given as \"Hello\" then the log will show \"Hello : [2,4]\" default prefix will be : STRING Yes No Examples EXAMPLE 1 @sink(type='log', prefix='My Log', priority='DEBUG') define stream BarStream (symbol string, price float, volume long) In this example BarStream uses log sink and the prefix is given as My Log. Also the priority is set to DEBUG. EXAMPLE 2 @sink(type='log', priority='DEBUG') define stream BarStream (symbol string, price float, volume long) In this example BarStream uses log sink and the priority is set to DEBUG. User has not specified prefix so the default prefix will be in the form Siddhi App Name : Stream Name EXAMPLE 3 @sink(type='log', prefix='My Log') define stream BarStream (symbol string, price float, volume long) In this example BarStream uses log sink and the prefix is given as My Log. User has not given a priority so it will be set to default INFO. EXAMPLE 4 @sink(type='log') define stream BarStream (symbol string, price float, volume long) In this example BarStream uses log sink. The user has not given prefix or priority so they will be set to their default values. Sinkmapper passThrough (Sink Mapper) Pass-through mapper passed events (Event[]) through without any mapping or modifications. Syntax @sink(..., @map(type= passThrough ) Examples EXAMPLE 1 @sink(type='inMemory', @map(type='passThrough')) define stream BarStream (symbol string, price float, volume long); In the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink. Source inMemory (Source) In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition). Syntax @source(type= inMemory , topic= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic topic Subscribes to sent on the given topic. STRING No No Examples EXAMPLE 1 @source(type='inMemory', @map(type='passThrough')) define stream BarStream (symbol string, price float, volume long) In this example BarStream uses inMemory transport which passes the received event internally without using external transport. Sourcemapper passThrough (Source Mapper) Pass-through mapper passed events (Event[]) through without any mapping or modifications. Syntax @source(..., @map(type= passThrough ) Examples EXAMPLE 1 @source(type='tcp', @map(type='passThrough')) define stream BarStream (symbol string, price float, volume long); In this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source. Str groupConcat (Aggregate Function) This function aggregates the received events by concatenating the keys in those events using a separator, e.g.,a comma (,) or a hyphen (-), and returns the concatenated key string. Syntax STRING str:groupConcat( STRING key, STRING separator, STRING distinct, STRING order) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key The string that needs to be aggregated. STRING No No separator The separator that separates each string key after concatenating the keys. , STRING Yes No distinct This is used to only have distinct values in the concatenated string that is returned. false STRING Yes No order This parameter accepts 'ASC' or 'DESC' strings to sort the string keys in either ascending or descending order respectively. No order STRING Yes No Examples EXAMPLE 1 from InputStream#window.time(5 min) select str:groupConcat( key ) as groupedKeys input OutputStream; When we input events having values for the key as 'A' , 'B' , 'S' , 'C' , 'A' , it returns \"A,B,S,C,A\" to the 'OutputStream'. EXAMPLE 2 from InputStream#window.time(5 min) select groupConcat( key , - ,true, ASC ) as groupedKeys input OutputStream; When we input events having values for the key as 'A' , 'B' , 'S' , 'C' , 'A' , specify the seperator as hyphen and choose the order to be ascending, the function returns \"A-B-C-S\" to the 'OutputStream'. charAt (Function) Deprecated This function returns the 'char' value that is present at the given index position. of the input string. Syntax STRING str:charAt( STRING input.value, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.value The input string of which the char value at the given position needs to be returned. STRING No No index The variable that specifies the index of the char value that needs to be returned. INT No No Examples EXAMPLE 1 charAt( WSO2 , 1) In this case, the functiion returns the character that exists at index 1. Hence, it returns 'S'. coalesce (Function) This returns the first input parameter value of the given argument, that is not null. Syntax INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT str:coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have one or more input parameters in any data type. However, all the specified parameters are required to be of the same type. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No No Examples EXAMPLE 1 coalesce(null, BBB , CCC ) This returns the first input parameter that is not null. In this example, it returns \"BBB\". concat (Function) This function returns a string value that is obtained as a result of concatenating two or more input string values. Syntax STRING str:concat( STRING argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn This can have two or more string type input parameters. STRING No No Examples EXAMPLE 1 concat( D533 , 8JU^ , XYZ ) This returns a string value by concatenating two or more given arguments. In the example shown above, it returns \"D5338JU^XYZ\". contains (Function) This function returns true if the input.string contains the specified sequence of char values in the search.string . Syntax BOOL str:contains( STRING input.string, STRING search.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string Input string value. STRING No No search.string The string value to be searched for in the input.string . STRING No No Examples EXAMPLE 1 contains( 21 products are produced by WSO2 currently , WSO2 ) This returns a boolean value as the output. In this case, it returns true . equalsIgnoreCase (Function) This returns a boolean value by comparing two strings lexicographically without considering the letter case. Syntax BOOL str:equalsIgnoreCase( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument. This is compared with the first argument. STRING No No Examples EXAMPLE 1 equalsIgnoreCase( WSO2 , wso2 ) This returns a boolean value as the output. In this scenario, it returns \"true\". fillTemplate (Function) This extension replaces the templated positions that are marked with an index value in a specified template with the strings provided. Syntax STRING str:fillTemplate( STRING template, STRING|INT|LONG|DOUBLE|FLOAT|BOOL replacement.strings) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic template The string with templated fields that needs to be filled with the given strings. The format of the templated fields should be as follows: {{INDEX}} where 'INDEX' is an integer. This index is used to map the strings that are used to replace the templated fields. STRING No No replacement.strings The strings with which the templated positions in the template need to be replaced. The minimum of two arguments need to be included in the execution string. There is no upper limit on the number of arguments allowed to be included. STRING INT LONG DOUBLE FLOAT BOOL No No Examples EXAMPLE 1 str:fillTemplate( This is {{1}} for the {{2}} function , 'an example', 'fillTemplate') In this example, the template is 'This is {{1}} for the {{2}} function'.Here, the templated string {{1}} is replaced with the 1st string value provided, which is 'an example'. {{2}} is replaced with the 2nd string provided, which is 'fillTemplate' The complete return string is 'This is an example for the fillTemplate function'. hex (Function) This function returns a hexadecimal string by converting each byte of each character in the input string to two hexadecimal digits. Syntax STRING str:hex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the hexadecimal value. STRING No No Examples EXAMPLE 1 hex( MySQL ) This returns the hexadecimal value of the input.string. In this scenario, the output is \"4d7953514c\". length (Function) Returns the length of the input string. Syntax INT str:length( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the length. STRING No No Examples EXAMPLE 1 length( Hello World ) This outputs the length of the provided string. In this scenario, the, output is 11 . lower (Function) Converts the capital letters in the input string to the equivalent simple letters. Syntax STRING str:lower( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to convert to the lower case (i.e., equivalent simple letters). STRING No No Examples EXAMPLE 1 lower( WSO2 cep ) This converts the capital letters in the input.string to the equivalent simple letters. In this scenario, the output is \"wso2 cep \". regexp (Function) Returns a boolean value based on the matchability of the input string and the given regular expression. Syntax BOOL str:regexp( STRING input.string, STRING regex) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to match with the given regular expression. STRING No No regex The regular expression to be matched with the input string. STRING No No Examples EXAMPLE 1 regexp( WSO2 abcdh , WSO(.*h) ) This returns a boolean value after matching regular expression with the given string. In this scenario, it returns \"true\" as the output. repeat (Function) Repeats the input string for a specified number of times. Syntax STRING str:repeat( STRING input.string, INT times) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that is repeated the number of times as defined by the user. STRING No No times The number of times the input.string needs to be repeated . INT No No Examples EXAMPLE 1 repeat( StRing 1 , 3) This returns a string value by repeating the string for a specified number of times. In this scenario, the output is \"StRing 1StRing 1StRing 1\". replaceAll (Function) Finds all the substrings of the input string that matches with the given expression, and replaces them with the given replacement string. Syntax STRING str:replaceAll( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No regex The regular expression to be matched with the input string. STRING No No replacement.string The string with which each substring that matches the given expression should be replaced. STRING No No Examples EXAMPLE 1 replaceAll( hello hi hello , 'hello', 'test') This returns a string after replacing the substrings of the input string with the replacement string. In this scenario, the output is \"test hi test\" . replaceFirst (Function) Finds the first substring of the input string that matches with the given regular expression, and replaces itwith the given replacement string. Syntax STRING str:replaceFirst( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be replaced. STRING No No regex The regular expression with which the input string should be matched. STRING No No replacement.string The string with which the first substring of input string that matches the regular expression should be replaced. STRING No No Examples EXAMPLE 1 replaceFirst( hello WSO2 A hello , 'WSO2(.*)A', 'XXXX') This returns a string after replacing the first substring with the given replacement string. In this scenario, the output is \"hello XXXX hello\". reverse (Function) Returns the input string in the reverse order character-wise and string-wise. Syntax STRING str:reverse( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be reversed. STRING No No Examples EXAMPLE 1 reverse( Hello World ) This outputs a string value by reversing the incoming input.string . In this scenario, the output is \"dlroW olleH\". split (Function) Splits the input.string into substrings using the value parsed in the split.string and returns the substring at the position specified in the group.number . Syntax STRING str:split( STRING input.string, STRING split.string, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No split.string The string value to be used to split the input.string . STRING No No group.number The index of the split group INT No No Examples EXAMPLE 1 split( WSO2,ABM,NSFT , , , 0) This splits the given input.string by given split.string and returns the string in the index given by group.number. In this scenario, the output will is \"WSO2\". strcmp (Function) Compares two strings lexicographically and returns an integer value. If both strings are equal, 0 is returned. If the first string is lexicographically greater than the second string, a positive value is returned. If the first string is lexicographically greater than the second string, a negative value is returned. Syntax INT str:strcmp( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument that should be compared with the first argument lexicographically. STRING No No Examples EXAMPLE 1 strcmp( AbCDefghiJ KLMN , 'Hello') This compares two strings lexicographically and outputs an integer value. substr (Function) Returns a substring of the input string by considering a subset or all of the following factors: starting index, length, regular expression, and regex group number. Syntax STRING str:substr( STRING input.string, INT begin.index, INT length, STRING regex, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be processed. STRING No No begin.index Starting index to consider for the substring. INT No No length The length of the substring. INT No No regex The regular expression that should be matched with the input string. STRING No No group.number The regex group number INT No No Examples EXAMPLE 1 substr( AbCDefghiJ KLMN , 4) This outputs the substring based on the given begin.index . In this scenario, the output is \"efghiJ KLMN\". EXAMPLE 2 substr( AbCDefghiJ KLMN , 2, 4) This outputs the substring based on the given begin.index and length. In this scenario, the output is \"CDef\". EXAMPLE 3 substr( WSO2D efghiJ KLMN , '^WSO2(.*)') This outputs the substring by applying the regex. In this scenario, the output is \"WSO2D efghiJ KLMN\". EXAMPLE 4 substr( WSO2 cep WSO2 XX E hi hA WSO2 heAllo , 'WSO2(.*)A(.*)', 2) This outputs the substring by applying the regex and considering the group.number . In this scenario, the output is \" ello\". trim (Function) Returns a copy of the input string without the leading and trailing whitespace (if any). Syntax STRING str:trim( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that needs to be trimmed. STRING No No Examples EXAMPLE 1 trim( AbCDefghiJ KLMN ) This returns a copy of the input.string with the leading and/or trailing white-spaces omitted. In this scenario, the output is \"AbCDefghiJ KLMN\". unhex (Function) Returns a string by converting the hexadecimal characters in the input string. Syntax STRING str:unhex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The hexadecimal input string that needs to be converted to string. STRING No No Examples EXAMPLE 1 unhex( 4d7953514c ) This converts the hexadecimal value to string. upper (Function) Converts the simple letters in the input string to the equivalent capital/block letters. Syntax STRING str:upper( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be converted to the upper case (equivalent capital/block letters). STRING No No Examples EXAMPLE 1 upper( Hello World ) This converts the simple letters in the input.string to theequivalent capital letters. In this scenario, the output is \"HELLO WORLD\". tokenize (Stream Processor) This function splits the input string into tokens using a given regular expression and returns the split tokens. Syntax str:tokenize( STRING input.string, STRING regex, BOOL distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string which needs to be split. STRING No No regex The string value which is used to tokenize the 'input.string'. STRING No No distinct This flag is used to return only distinct values. false BOOL Yes No Extra Return Attributes Name Description Possible Types token The attribute which contains a single token. STRING Examples EXAMPLE 1 define stream inputStream (str string); @info(name = 'query1') from inputStream#str:tokenize(str , ',') select text insert into outputStream; This query performs tokenization on the given string. If the str is \"Android,Windows8,iOS\", then the string is split into 3 events containing the token attribute values, i.e., Android , Windows8 and iOS .","title":"latest"},{"location":"api/latest/#api-docs-v503","text":"Tested Siddhi Core version: 5.0.2-SNAPSHOT It could also support other Siddhi Core minor versions.","title":"API Docs - v5.0.3"},{"location":"api/latest/#core","text":"","title":"Core"},{"location":"api/latest/#and-aggregate-function","text":"Returns the results of AND operation for all the events. Syntax BOOL and( BOOL arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The value that needs to be AND operation. BOOL No Yes Examples EXAMPLE 1 from cscStream#window.lengthBatch(10) select and(isFraud) as isFraudTransaction insert into alertStream; This will returns the result for AND operation of isFraud values as a boolean value for event chunk expiry by window length batch.","title":"and (Aggregate Function)"},{"location":"api/latest/#avg-aggregate-function","text":"Calculates the average for all the events. Syntax DOUBLE avg( INT|LONG|DOUBLE|FLOAT arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The value that need to be averaged. INT LONG DOUBLE FLOAT No Yes Examples EXAMPLE 1 from fooStream#window.timeBatch select avg(temp) as avgTemp insert into barStream; avg(temp) returns the average temp value for all the events based on their arrival and expiry.","title":"avg (Aggregate Function)"},{"location":"api/latest/#count-aggregate-function","text":"Returns the count of all the events. Syntax LONG count() LONG count( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg This function accepts one parameter. It can belong to any one of the available types. INT LONG DOUBLE FLOAT STRING BOOL OBJECT Yes Yes Examples EXAMPLE 1 from fooStream#window.timeBatch(10 sec) select count() as count insert into barStream; This will return the count of all the events for time batch in 10 seconds.","title":"count (Aggregate Function)"},{"location":"api/latest/#distinctcount-aggregate-function","text":"This returns the count of distinct occurrences for a given arg. Syntax LONG distinctCount( INT|LONG|DOUBLE|FLOAT|STRING arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The object for which the number of distinct occurences needs to be counted. INT LONG DOUBLE FLOAT STRING No Yes Examples EXAMPLE 1 from fooStream select distinctcount(pageID) as count insert into barStream; distinctcount(pageID) for the following output returns '3' when the available values are as follows. \"WEB_PAGE_1\" \"WEB_PAGE_1\" \"WEB_PAGE_2\" \"WEB_PAGE_3\" \"WEB_PAGE_1\" \"WEB_PAGE_2\" The three distinct occurences identified are 'WEB_PAGE_1', 'WEB_PAGE_2', and 'WEB_PAGE_3'.","title":"distinctCount (Aggregate Function)"},{"location":"api/latest/#max-aggregate-function","text":"Returns the maximum value for all the events. Syntax INT|LONG|DOUBLE|FLOAT max( INT|LONG|DOUBLE|FLOAT arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The value that needs to be compared to find the maximum value. INT LONG DOUBLE FLOAT No Yes Examples EXAMPLE 1 from fooStream#window.timeBatch(10 sec) select max(temp) as maxTemp insert into barStream; max(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.","title":"max (Aggregate Function)"},{"location":"api/latest/#maxforever-aggregate-function","text":"This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front. Syntax INT|LONG|DOUBLE|FLOAT maxForever( INT|LONG|DOUBLE|FLOAT arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The value that needs to be compared to find the maximum value. INT LONG DOUBLE FLOAT No Yes Examples EXAMPLE 1 from inputStream select maxForever(temp) as max insert into outputStream; maxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.","title":"maxForever (Aggregate Function)"},{"location":"api/latest/#min-aggregate-function","text":"Returns the minimum value for all the events. Syntax INT|LONG|DOUBLE|FLOAT min( INT|LONG|DOUBLE|FLOAT arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The value that needs to be compared to find the minimum value. INT LONG DOUBLE FLOAT No Yes Examples EXAMPLE 1 from inputStream select min(temp) as minTemp insert into outputStream; min(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.","title":"min (Aggregate Function)"},{"location":"api/latest/#minforever-aggregate-function","text":"This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front. Syntax INT|LONG|DOUBLE|FLOAT minForever( INT|LONG|DOUBLE|FLOAT arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The value that needs to be compared to find the minimum value. INT LONG DOUBLE FLOAT No Yes Examples EXAMPLE 1 from inputStream select minForever(temp) as max insert into outputStream; minForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.","title":"minForever (Aggregate Function)"},{"location":"api/latest/#or-aggregate-function","text":"Returns the results of OR operation for all the events. Syntax BOOL or( BOOL arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The value that needs to be OR operation. BOOL No Yes Examples EXAMPLE 1 from cscStream#window.lengthBatch(10) select or(isFraud) as isFraudTransaction insert into alertStream; This will returns the result for OR operation of isFraud values as a boolean value for event chunk expiry by window length batch.","title":"or (Aggregate Function)"},{"location":"api/latest/#stddev-aggregate-function","text":"Returns the calculated standard deviation for all the events. Syntax DOUBLE stdDev( INT|LONG|DOUBLE|FLOAT arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The value that should be used to calculate the standard deviation. INT LONG DOUBLE FLOAT No Yes Examples EXAMPLE 1 from inputStream select stddev(temp) as stdTemp insert into outputStream; stddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.","title":"stdDev (Aggregate Function)"},{"location":"api/latest/#sum-aggregate-function","text":"Returns the sum for all the events. Syntax LONG|DOUBLE sum( INT|LONG|DOUBLE|FLOAT arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The value that needs to be summed. INT LONG DOUBLE FLOAT No Yes Examples EXAMPLE 1 from inputStream select sum(volume) as sumOfVolume insert into outputStream; This will returns the sum of volume values as a long value for each event arrival and expiry.","title":"sum (Aggregate Function)"},{"location":"api/latest/#unionset-aggregate-function","text":"Union multiple sets. This attribute aggregator maintains a union of sets. The given input set is put into the union set and the union set is returned. Syntax OBJECT unionSet( OBJECT set) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic set The java.util.Set object that needs to be added into the union set. OBJECT No Yes Examples EXAMPLE 1 from stockStream select createSet(symbol) as initialSet insert into initStream from initStream#window.timeBatch(10 sec) select unionSet(initialSet) as distinctSymbols insert into distinctStockStream; distinctStockStream will return the set object which contains the distinct set of stock symbols received during a sliding window of 10 seconds.","title":"unionSet (Aggregate Function)"},{"location":"api/latest/#uuid-function","text":"Generates a UUID (Universally Unique Identifier). Syntax STRING UUID() Examples EXAMPLE 1 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream; This will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream;","title":"UUID (Function)"},{"location":"api/latest/#cast-function","text":"Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type. Syntax INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT cast( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT to.be.caster, STRING cast.to) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic to.be.caster This specifies the attribute to be casted. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No Yes cast.to A string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool. STRING No Yes Examples EXAMPLE 1 from fooStream select symbol as name, cast(temp, 'double') as temp insert into barStream; This will cast the fooStream temp field value into 'double' format.","title":"cast (Function)"},{"location":"api/latest/#coalesce-function","text":"Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type. Syntax INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT arg, INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No Yes Examples EXAMPLE 1 from fooStream select coalesce('123', null, '789') as value insert into barStream; This will returns first null value 123. EXAMPLE 2 from fooStream select coalesce(null, 76, 567) as value insert into barStream; This will returns first null value 76. EXAMPLE 3 from fooStream select coalesce(null, null, null) as value insert into barStream; This will returns null as there are no notnull values.","title":"coalesce (Function)"},{"location":"api/latest/#convert-function","text":"Converts the first input parameter according to the convertedTo parameter. Syntax INT|LONG|DOUBLE|FLOAT|STRING|BOOL convert( INT|LONG|DOUBLE|FLOAT|STRING|BOOL to.be.converted, STRING converted.to) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic to.be.converted This specifies the value to be converted. INT LONG DOUBLE FLOAT STRING BOOL No Yes converted.to A string constant parameter to which type the attribute need to be converted using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'. STRING No Yes Examples EXAMPLE 1 from fooStream select convert(temp, 'double') as temp insert into barStream; This will convert fooStream temp value into 'double'. EXAMPLE 2 from fooStream select convert(temp, 'int') as temp insert into barStream; This will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").","title":"convert (Function)"},{"location":"api/latest/#createset-function","text":"Includes the given input parameter in a java.util.HashSet and returns the set. Syntax OBJECT createSet( INT|LONG|DOUBLE|FLOAT|STRING|BOOL input) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input The input that needs to be added into the set. INT LONG DOUBLE FLOAT STRING BOOL No Yes Examples EXAMPLE 1 from stockStream select createSet(symbol) as initialSet insert into initStream; For every incoming stockStream event, the initStream stream will produce a set object having only one element: the symbol in the incoming stockStream.","title":"createSet (Function)"},{"location":"api/latest/#currenttimemillis-function","text":"Returns the current timestamp of siddhi application in milliseconds. Syntax LONG currentTimeMillis() Examples EXAMPLE 1 from fooStream select symbol as name, currentTimeMillis() as eventTimestamp insert into barStream; This will extract current siddhi application timestamp.","title":"currentTimeMillis (Function)"},{"location":"api/latest/#default-function","text":"Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter Syntax INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT default( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT attribute, INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT default) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic attribute The attribute that could be null. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No Yes default The default value that will be used when 'attribute' parameter is null INT LONG DOUBLE FLOAT STRING BOOL OBJECT No Yes Examples EXAMPLE 1 from TempStream select default(temp, 0.0) as temp, roomNum insert into StandardTempStream; This will replace TempStream's temp attribute with default value if the temp is null.","title":"default (Function)"},{"location":"api/latest/#eventtimestamp-function","text":"Returns the timestamp of the processed event. Syntax LONG eventTimestamp() Examples EXAMPLE 1 from fooStream select symbol as name, eventTimestamp() as eventTimestamp insert into barStream; This will extract current events timestamp.","title":"eventTimestamp (Function)"},{"location":"api/latest/#ifthenelse-function","text":"Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type. Syntax INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT ifThenElse( BOOL condition, INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT if.expression, INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT else.expression) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic condition This specifies the if then else condition value. BOOL No Yes if.expression This specifies the value to be returned if the value of the condition parameter is true. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No Yes else.expression This specifies the value to be returned if the value of the condition parameter is false. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No Yes Examples EXAMPLE 1 @info(name = 'query1') from sensorEventStream select sensorValue, ifThenElse(sensorValue 35,'High','Low') as status insert into outputStream; This will returns High if sensorValue = 50. EXAMPLE 2 @info(name = 'query1') from sensorEventStream select sensorValue, ifThenElse(voltage 5, 0, 1) as status insert into outputStream; This will returns 1 if voltage= 12. EXAMPLE 3 @info(name = 'query1') from userEventStream select userName, ifThenElse(password == 'admin', true, false) as passwordState insert into outputStream; This will returns passwordState as true if password = admin.","title":"ifThenElse (Function)"},{"location":"api/latest/#instanceofboolean-function","text":"Checks whether the parameter is an instance of Boolean or not. Syntax BOOL instanceOfBoolean( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The parameter to be checked. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No Yes Examples EXAMPLE 1 from fooStream select instanceOfBoolean(switchState) as state insert into barStream; This will return true if the value of switchState is true. EXAMPLE 2 from fooStream select instanceOfBoolean(value) as state insert into barStream; if the value = 32 then this will returns false as the value is not an instance of the boolean.","title":"instanceOfBoolean (Function)"},{"location":"api/latest/#instanceofdouble-function","text":"Checks whether the parameter is an instance of Double or not. Syntax BOOL instanceOfDouble( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The parameter to be checked. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No Yes Examples EXAMPLE 1 from fooStream select instanceOfDouble(value) as state insert into barStream; This will return true if the value field format is double ex : 56.45. EXAMPLE 2 from fooStream select instanceOfDouble(switchState) as state insert into barStream; if the switchState = true then this will returns false as the value is not an instance of the double.","title":"instanceOfDouble (Function)"},{"location":"api/latest/#instanceoffloat-function","text":"Checks whether the parameter is an instance of Float or not. Syntax BOOL instanceOfFloat( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The parameter to be checked. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No Yes Examples EXAMPLE 1 from fooStream select instanceOfFloat(value) as state insert into barStream; This will return true if the value field format is float ex : 56.45f. EXAMPLE 2 from fooStream select instanceOfFloat(switchState) as state insert into barStream; if the switchState = true then this will returns false as the value is an instance of the boolean not a float.","title":"instanceOfFloat (Function)"},{"location":"api/latest/#instanceofinteger-function","text":"Checks whether the parameter is an instance of Integer or not. Syntax BOOL instanceOfInteger( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The parameter to be checked. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No Yes Examples EXAMPLE 1 from fooStream select instanceOfInteger(value) as state insert into barStream; This will return true if the value field format is integer. EXAMPLE 2 from fooStream select instanceOfInteger(switchState) as state insert into barStream; if the switchState = true then this will returns false as the value is an instance of the boolean not a long.","title":"instanceOfInteger (Function)"},{"location":"api/latest/#instanceoflong-function","text":"Checks whether the parameter is an instance of Long or not. Syntax BOOL instanceOfLong( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The parameter to be checked. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No Yes Examples EXAMPLE 1 from fooStream select instanceOfLong(value) as state insert into barStream; This will return true if the value field format is long ex : 56456l. EXAMPLE 2 from fooStream select instanceOfLong(switchState) as state insert into barStream; if the switchState = true then this will returns false as the value is an instance of the boolean not a long.","title":"instanceOfLong (Function)"},{"location":"api/latest/#instanceofstring-function","text":"Checks whether the parameter is an instance of String or not. Syntax BOOL instanceOfString( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The parameter to be checked. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No Yes Examples EXAMPLE 1 from fooStream select instanceOfString(value) as state insert into barStream; This will return true if the value field format is string ex : 'test'. EXAMPLE 2 from fooStream select instanceOfString(switchState) as state insert into barStream; if the switchState = true then this will returns false as the value is an instance of the boolean not a string.","title":"instanceOfString (Function)"},{"location":"api/latest/#maximum-function","text":"Returns the maximum value of the input parameters. Syntax INT|LONG|DOUBLE|FLOAT maximum( INT|LONG|DOUBLE|FLOAT arg, INT|LONG|DOUBLE|FLOAT ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. INT LONG DOUBLE FLOAT No Yes Examples EXAMPLE 1 @info(name = 'query1') from inputStream select maximum(price1, price2, price3) as max insert into outputStream; This will returns the maximum value of the input parameters price1, price2, price3.","title":"maximum (Function)"},{"location":"api/latest/#minimum-function","text":"Returns the minimum value of the input parameters. Syntax INT|LONG|DOUBLE|FLOAT minimum( INT|LONG|DOUBLE|FLOAT arg, INT|LONG|DOUBLE|FLOAT ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. INT LONG DOUBLE FLOAT No Yes Examples EXAMPLE 1 @info(name = 'query1') from inputStream select maximum(price1, price2, price3) as max insert into outputStream; This will returns the minimum value of the input parameters price1, price2, price3.","title":"minimum (Function)"},{"location":"api/latest/#sizeofset-function","text":"Returns the size of an object of type java.util.Set. Syntax INT sizeOfSet( OBJECT set) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic set The set object. This parameter should be of type java.util.Set. A set object may be created by the 'set' attribute aggregator in Siddhi. OBJECT No Yes Examples EXAMPLE 1 from stockStream select initSet(symbol) as initialSet insert into initStream; ;from initStream#window.timeBatch(10 sec) select union(initialSet) as distinctSymbols insert into distinctStockStream; from distinctStockStream select sizeOfSet(distinctSymbols) sizeOfSymbolSet insert into sizeStream; The sizeStream stream will output the number of distinct stock symbols received during a sliding window of 10 seconds.","title":"sizeOfSet (Function)"},{"location":"api/latest/#pol2cart-stream-function","text":"The pol2Cart function calculating the cartesian coordinates x y for the given theta, rho coordinates and adding them as new attributes to the existing events. Syntax pol2Cart() pol2Cart( DOUBLE theta, DOUBLE rho) pol2Cart( DOUBLE theta, DOUBLE rho, DOUBLE z) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic theta The theta value of the coordinates. DOUBLE No Yes rho The rho value of the coordinates. DOUBLE No Yes z z value of the cartesian coordinates. If z value is not given, drop the third parameter of the output. DOUBLE Yes Yes Examples EXAMPLE 1 from PolarStream#pol2Cart(theta, rho) select x, y insert into outputStream ; This will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5. EXAMPLE 2 from PolarStream#pol2Cart(theta, rho, 3.4) select x, y, z insert into outputStream ; This will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.","title":"pol2Cart (Stream Function)"},{"location":"api/latest/#log-stream-processor","text":"The logger logs the message on the given priority with or without processed event. Syntax log() log( STRING log.message) log( BOOL is.event.logged) log( STRING log.message, BOOL is.event.logged) log( STRING priority, STRING log.message) log( STRING priority, STRING log.message, BOOL is.event.logged) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic priority The priority/type of this log message (INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE). INFO STRING Yes No log.message This message will be logged. : STRING Yes Yes is.event.logged To log the processed event. true BOOL Yes No Examples EXAMPLE 1 from fooStream#log( INFO , Sample Event : , true) select * insert into barStream; This will log as INFO with the message \"Sample Event :\" + fooStream:events. EXAMPLE 2 from fooStream#log( Sample Event : , true) select * insert into barStream; This will logs with default log level as INFO. EXAMPLE 3 from fooStream#log( Sample Event : , fasle) select * insert into barStream; This will only log message. EXAMPLE 4 from fooStream#log(true) select * insert into barStream; This will only log fooStream:events. EXAMPLE 5 from fooStream#log() select * insert into barStream; This will only log fooStream:events. EXAMPLE 6 from fooStream#log( Sample Event : ) select * insert into barStream; This will log message and fooStream:events.","title":"log (Stream Processor)"},{"location":"api/latest/#batch-window","text":"A window that holds an incoming events batch. When a new set of events arrives, the previously arrived old events will be expired. Batch window can be used to aggregate events that comes in batches. If it has the parameter length specified, then batch window process the batch as several chunks. Syntax batch() batch( INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic window.length The length of a chunk If length value was not given it assign 0 as length and process the whole batch as once INT Yes No Examples EXAMPLE 1 define stream consumerItemStream (itemId string, price float) from consumerItemStream#window.batch() select price, str:groupConcat(itemId) as itemIds group by price insert into outputStream; This will output comma separated items IDs that have the same price for each incoming batch of events.","title":"batch (Window)"},{"location":"api/latest/#cron-window","text":"This window outputs the arriving events as and when they arrive, and resets (expires) the window periodically based on the given cron expression. Syntax cron( STRING cron.expression) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic cron.expression The cron expression that resets the window. STRING No No Examples EXAMPLE 1 define stream InputEventStream (symbol string, price float, volume int); @info(name = 'query1') from InputEventStream#cron('*/5 * * * * ?') select symbol, sum(price) as totalPrice insert into OutputStream; This let the totalPrice to gradually increase and resets to zero as a batch every 5 seconds. EXAMPLE 2 define stream StockEventStream (symbol string, price float, volume int) define window StockEventWindow (symbol string, price float, volume int) cron('*/5 * * * * ?'); @info(name = 'query0') from StockEventStream insert into StockEventWindow; @info(name = 'query1') from StockEventWindow select symbol, sum(price) as totalPrice insert into OutputStream ; The defined window will let the totalPrice to gradually increase and resets to zero as a batch every 5 seconds.","title":"cron (Window)"},{"location":"api/latest/#delay-window","text":"A delay window holds events for a specific time period that is regarded as a delay period before processing them. Syntax delay( INT|LONG|TIME window.delay) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic window.delay The time period (specified in sec, min, ms) for which the window should delay the events. INT LONG TIME No No Examples EXAMPLE 1 define window delayWindow(symbol string, volume int) delay(1 hour); define stream PurchaseStream(symbol string, volume int); define stream DeliveryStream(symbol string); define stream OutputStream(symbol string); @info(name='query1') from PurchaseStream select symbol, volume insert into delayWindow; @info(name='query2') from delayWindow join DeliveryStream on delayWindow.symbol == DeliveryStream.symbol select delayWindow.symbol insert into OutputStream; In this example, purchase events that arrive in the 'PurchaseStream' stream are directed to a delay window. At any given time, this delay window holds purchase events that have arrived within the last hour. These purchase events in the window are matched by the 'symbol' attribute, with delivery events that arrive in the 'DeliveryStream' stream. This monitors whether the delivery of products is done with a minimum delay of one hour after the purchase.","title":"delay (Window)"},{"location":"api/latest/#externaltime-window","text":"A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp. Syntax externalTime( LONG timestamp, INT|LONG|TIME window.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic timestamp The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. LONG No Yes window.time The sliding time period for which the window should hold events. INT LONG TIME No No Examples EXAMPLE 1 define window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events; @info(name = 'query0') from cseEventStream insert into cseEventWindow; @info(name = 'query1') from cseEventWindow select symbol, sum(price) as price insert expired events into outputStream ; processing events arrived within the last 20 seconds from the eventTime and output expired events.","title":"externalTime (Window)"},{"location":"api/latest/#externaltimebatch-window","text":"A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime. Syntax externalTimeBatch( LONG timestamp, INT|LONG|TIME window.time) externalTimeBatch( LONG timestamp, INT|LONG|TIME window.time, INT|LONG|TIME start.time) externalTimeBatch( LONG timestamp, INT|LONG|TIME window.time, INT|LONG|TIME start.time, INT|LONG|TIME timeout) externalTimeBatch( LONG timestamp, INT|LONG|TIME window.time, INT|LONG|TIME start.time, INT|LONG|TIME timeout, BOOL replace.with.batchtime) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic timestamp The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. LONG No Yes window.time The batch time period for which the window should hold events. INT LONG TIME No No start.time User defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. Timestamp of first event INT LONG TIME Yes Yes timeout Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. System waits till an event from next batch arrives to flush current batch INT LONG TIME Yes No replace.with.batchtime This indicates to replace the expired event timeStamp as the batch end timeStamp System waits till an event from next batch arrives to flush current batch BOOL Yes No Examples EXAMPLE 1 define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events; @info(name = 'query0') from cseEventStream insert into cseEventWindow; @info(name = 'query1') from cseEventWindow select symbol, sum(price) as price insert expired events into outputStream ; This will processing events that arrive every 1 seconds from the eventTime. EXAMPLE 2 define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events; This will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour. EXAMPLE 3 define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events; This will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.","title":"externalTimeBatch (Window)"},{"location":"api/latest/#frequent-window","text":"Deprecated This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm. Syntax frequent( INT event.count) frequent( INT event.count, STRING attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic event.count The number of most frequent events to be emitted to the stream. INT No No attribute The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. The concatenation of all the attributes of the event is considered. STRING Yes Yes Examples EXAMPLE 1 @info(name = 'query1') from purchase[price = 30]#window.frequent(2) select cardNo, price insert all events into PotentialFraud; This will returns the 2 most frequent events. EXAMPLE 2 @info(name = 'query1') from purchase[price = 30]#window.frequent(2, cardNo) select cardNo, price insert all events into PotentialFraud; This will returns the 2 latest events with the most frequently appeared card numbers.","title":"frequent (Window)"},{"location":"api/latest/#length-window","text":"A sliding length window that holds the last 'window.length' events at a given time, and gets updated for each arrival and expiry. Syntax length( INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic window.length The number of events that should be included in a sliding length window. INT No No Examples EXAMPLE 1 define window StockEventWindow (symbol string, price float, volume int) length(10) output all events; @info(name = 'query0') from StockEventStream insert into StockEventWindow; @info(name = 'query1') from StockEventWindow select symbol, sum(price) as price insert all events into outputStream ; This will process last 10 events in a sliding manner.","title":"length (Window)"},{"location":"api/latest/#lengthbatch-window","text":"A batch (tumbling) length window that holds and process a number of events as specified in the window.length. Syntax lengthBatch( INT window.length) lengthBatch( INT window.length, BOOL stream.current.event) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic window.length The number of events the window should tumble. INT No No stream.current.event Let the window stream the current events out as and when they arrive to the window while expiring them in batches. false BOOL Yes No Examples EXAMPLE 1 define stream InputEventStream (symbol string, price float, volume int); @info(name = 'query1') from InputEventStream#lengthBatch(10) select symbol, sum(price) as price insert into OutputStream; This collect and process 10 events as a batch and output them. EXAMPLE 2 define stream InputEventStream (symbol string, price float, volume int); @info(name = 'query1') from InputEventStream#lengthBatch(10, true) select symbol, sum(price) as sumPrice insert into OutputStream; This window sends the arriving events directly to the output letting the sumPrice to increase gradually, after every 10 events it clears the window as a batch and resets the sumPrice to zero. EXAMPLE 3 define stream InputEventStream (symbol string, price float, volume int); define window StockEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events; @info(name = 'query0') from InputEventStream insert into StockEventWindow; @info(name = 'query1') from StockEventWindow select symbol, sum(price) as price insert all events into OutputStream ; This uses an defined window to process 10 events as a batch and output all events.","title":"lengthBatch (Window)"},{"location":"api/latest/#lossyfrequent-window","text":"Deprecated This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter. Syntax lossyFrequent( DOUBLE support.threshold) lossyFrequent( DOUBLE support.threshold, DOUBLE error.bound) lossyFrequent( DOUBLE support.threshold, DOUBLE error.bound, STRING attribute) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic support.threshold The support threshold value. DOUBLE No No error.bound The error bound value. DOUBLE No No attribute The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. The concatenation of all the attributes of the event is considered. STRING Yes Yes Examples EXAMPLE 1 define stream purchase (cardNo string, price float); define window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01); @info(name = 'query0') from purchase[price = 30] insert into purchaseWindow; @info(name = 'query1') from purchaseWindow select cardNo, price insert all events into PotentialFraud; lossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01. EXAMPLE 2 define stream purchase (cardNo string, price float); define window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo); @info(name = 'query0') from purchase[price = 30] insert into purchaseWindow; @info(name = 'query1') from purchaseWindow select cardNo, price insert all events into PotentialFraud; lossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.","title":"lossyFrequent (Window)"},{"location":"api/latest/#session-window","text":"This is a session window that holds events that belong to a specific session. The events that belong to a specific session are identified by a grouping attribute (i.e., a session key). A session gap period is specified to determine the time period after which the session is considered to be expired. A new event that arrives with a specific value for the session key is matched with the session window with the same session key. There can be out of order and late arrival of events, these events can arrive after the session is expired, to include those events to the matching session key specify a latency time period that is less than the session gap period.To have aggregate functions with session windows, the events need to be grouped by the session key via a 'group by' clause. Syntax session( INT|LONG|TIME window.session) session( INT|LONG|TIME window.session, STRING window.key) session( INT|LONG|TIME window.session, STRING window.key, INT|LONG|TIME window.allowed.latency) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic window.session The time period for which the session considered is valid. This is specified in seconds, minutes, or milliseconds (i.e., 'min', 'sec', or 'ms'. INT LONG TIME No No window.key The grouping attribute for events. default-key STRING Yes Yes window.allowed.latency This specifies the time period for which the session window is valid after the expiration of the session. The time period specified here should be less than the session time gap (which is specified via the 'window.session' parameter). 0 INT LONG TIME Yes No Examples EXAMPLE 1 define stream PurchaseEventStream (user string, item_number int, price float, quantity int); @info(name='query0) from PurchaseEventStream#window.session(5 sec, user, 2 sec) select * insert all events into OutputStream; This query processes events that arrive at the PurchaseEvent input stream. The 'user' attribute is the session key, and the session gap is 5 seconds. '2 sec' is specified as the allowed latency. Therefore, events with the matching user name that arrive 2 seconds after the expiration of the session are also considered when performing aggregations for the session identified by the given user name.","title":"session (Window)"},{"location":"api/latest/#sort-window","text":"This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order. Syntax sort( INT window.length, STRING|DOUBLE|INT|LONG|FLOAT|LONG attribute) sort( INT window.length, STRING|DOUBLE|INT|LONG|FLOAT|LONG attribute, STRING order, STRING ...) sort( INT window.length, STRING|DOUBLE|INT|LONG|FLOAT|LONG attribute, STRING order, STRING|DOUBLE|INT|LONG|FLOAT|LONG attribute, STRING|DOUBLE|INT|LONG|FLOAT|LONG ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic window.length The size of the window length. INT No No attribute The attribute that should be checked for the order. The concatenation of all the attributes of the event is considered. STRING DOUBLE INT LONG FLOAT LONG Yes Yes order The order define as \"asc\" or \"desc\". asc STRING Yes No Examples EXAMPLE 1 define stream cseEventStream (symbol string, price float, volume long); define window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc'); @info(name = 'query0') from cseEventStream insert into cseEventWindow; @info(name = 'query1') from cseEventWindow select volume insert all events into outputStream ; sort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.","title":"sort (Window)"},{"location":"api/latest/#time-window","text":"A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry. Syntax time( INT|LONG|TIME window.time) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic window.time The sliding time period for which the window should hold events. INT LONG TIME No No Examples EXAMPLE 1 define window cseEventWindow (symbol string, price float, volume int) time(20) output all events; @info(name = 'query0') from cseEventStream insert into cseEventWindow; @info(name = 'query1') from cseEventWindow select symbol, sum(price) as price insert all events into outputStream ; This will processing events that arrived within the last 20 milliseconds.","title":"time (Window)"},{"location":"api/latest/#timebatch-window","text":"A batch (tumbling) time window that holds and process events that arrive during 'window.time' period as a batch. Syntax timeBatch( INT|LONG|TIME window.time) timeBatch( INT|LONG|TIME window.time, INT|LONG start.time) timeBatch( INT|LONG|TIME window.time, BOOL stream.current.event) timeBatch( INT|LONG|TIME window.time, INT|LONG start.time, BOOL stream.current.event) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic window.time The batch time period in which the window process the events. INT LONG TIME No No start.time This specifies an offset in milliseconds in order to start the window at a time different to the standard time. Timestamp of first event INT LONG Yes No stream.current.event Let the window stream the current events out as and when they arrive to the window while expiring them in batches. false BOOL Yes No Examples EXAMPLE 1 define stream InputEventStream (symbol string, price float, volume int); @info(name = 'query1') from InputEventStream#timeBatch(20 sec) select symbol, sum(price) as price insert into OutputStream; This collect and process incoming events as a batch every 20 seconds and output them. EXAMPLE 2 define stream InputEventStream (symbol string, price float, volume int); @info(name = 'query1') from InputEventStream#timeBatch(20 sec, true) select symbol, sum(price) as sumPrice insert into OutputStream; This window sends the arriving events directly to the output letting the sumPrice to increase gradually and on every 20 second interval it clears the window as a batch resetting the sumPrice to zero. EXAMPLE 3 define stream InputEventStream (symbol string, price float, volume int); define window StockEventWindow (symbol string, price float, volume int) timeBatch(20 sec) output all events; @info(name = 'query0') from InputEventStream insert into StockEventWindow; @info(name = 'query1') from StockEventWindow select symbol, sum(price) as price insert all events into OutputStream ; This uses an defined window to process events arrived every 20 seconds as a batch and output all events.","title":"timeBatch (Window)"},{"location":"api/latest/#timelength-window","text":"A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry. Syntax timeLength( INT|LONG|TIME window.time, INT window.length) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic window.time The sliding time period for which the window should hold events. INT LONG TIME No No window.length The number of events that should be be included in a sliding length window.. INT No No Examples EXAMPLE 1 define stream cseEventStream (symbol string, price float, volume int); define window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10); @info(name = 'query0') from cseEventStream insert into cseEventWindow; @info(name = 'query1') from cseEventWindow select symbol, price, volume insert all events into outputStream; window.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.","title":"timeLength (Window)"},{"location":"api/latest/#sink","text":"","title":"Sink"},{"location":"api/latest/#inmemory-sink","text":"In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition). Syntax @sink(type= inMemory , topic= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic topic Event will be delivered to allthe subscribers of the same topic STRING No No Examples EXAMPLE 1 @sink(type='inMemory', @map(type='passThrough')) define stream BarStream (symbol string, price float, volume long) In this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.","title":"inMemory (Sink)"},{"location":"api/latest/#log-sink","text":"This is a sink that can be used as a logger. This will log the output events in the output stream with user specified priority and a prefix Syntax @sink(type= log , priority= STRING , prefix= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic priority This will set the logger priority i.e log level. Accepted values are INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE INFO STRING Yes No prefix This will be the prefix to the output message. If the output stream has event [2,4] and the prefix is given as \"Hello\" then the log will show \"Hello : [2,4]\" default prefix will be : STRING Yes No Examples EXAMPLE 1 @sink(type='log', prefix='My Log', priority='DEBUG') define stream BarStream (symbol string, price float, volume long) In this example BarStream uses log sink and the prefix is given as My Log. Also the priority is set to DEBUG. EXAMPLE 2 @sink(type='log', priority='DEBUG') define stream BarStream (symbol string, price float, volume long) In this example BarStream uses log sink and the priority is set to DEBUG. User has not specified prefix so the default prefix will be in the form Siddhi App Name : Stream Name EXAMPLE 3 @sink(type='log', prefix='My Log') define stream BarStream (symbol string, price float, volume long) In this example BarStream uses log sink and the prefix is given as My Log. User has not given a priority so it will be set to default INFO. EXAMPLE 4 @sink(type='log') define stream BarStream (symbol string, price float, volume long) In this example BarStream uses log sink. The user has not given prefix or priority so they will be set to their default values.","title":"log (Sink)"},{"location":"api/latest/#sinkmapper","text":"","title":"Sinkmapper"},{"location":"api/latest/#passthrough-sink-mapper","text":"Pass-through mapper passed events (Event[]) through without any mapping or modifications. Syntax @sink(..., @map(type= passThrough ) Examples EXAMPLE 1 @sink(type='inMemory', @map(type='passThrough')) define stream BarStream (symbol string, price float, volume long); In the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.","title":"passThrough (Sink Mapper)"},{"location":"api/latest/#source","text":"","title":"Source"},{"location":"api/latest/#inmemory-source","text":"In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition). Syntax @source(type= inMemory , topic= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic topic Subscribes to sent on the given topic. STRING No No Examples EXAMPLE 1 @source(type='inMemory', @map(type='passThrough')) define stream BarStream (symbol string, price float, volume long) In this example BarStream uses inMemory transport which passes the received event internally without using external transport.","title":"inMemory (Source)"},{"location":"api/latest/#sourcemapper","text":"","title":"Sourcemapper"},{"location":"api/latest/#passthrough-source-mapper","text":"Pass-through mapper passed events (Event[]) through without any mapping or modifications. Syntax @source(..., @map(type= passThrough ) Examples EXAMPLE 1 @source(type='tcp', @map(type='passThrough')) define stream BarStream (symbol string, price float, volume long); In this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.","title":"passThrough (Source Mapper)"},{"location":"api/latest/#str","text":"","title":"Str"},{"location":"api/latest/#groupconcat-aggregate-function","text":"This function aggregates the received events by concatenating the keys in those events using a separator, e.g.,a comma (,) or a hyphen (-), and returns the concatenated key string. Syntax STRING str:groupConcat( STRING key, STRING separator, STRING distinct, STRING order) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic key The string that needs to be aggregated. STRING No No separator The separator that separates each string key after concatenating the keys. , STRING Yes No distinct This is used to only have distinct values in the concatenated string that is returned. false STRING Yes No order This parameter accepts 'ASC' or 'DESC' strings to sort the string keys in either ascending or descending order respectively. No order STRING Yes No Examples EXAMPLE 1 from InputStream#window.time(5 min) select str:groupConcat( key ) as groupedKeys input OutputStream; When we input events having values for the key as 'A' , 'B' , 'S' , 'C' , 'A' , it returns \"A,B,S,C,A\" to the 'OutputStream'. EXAMPLE 2 from InputStream#window.time(5 min) select groupConcat( key , - ,true, ASC ) as groupedKeys input OutputStream; When we input events having values for the key as 'A' , 'B' , 'S' , 'C' , 'A' , specify the seperator as hyphen and choose the order to be ascending, the function returns \"A-B-C-S\" to the 'OutputStream'.","title":"groupConcat (Aggregate Function)"},{"location":"api/latest/#charat-function","text":"Deprecated This function returns the 'char' value that is present at the given index position. of the input string. Syntax STRING str:charAt( STRING input.value, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.value The input string of which the char value at the given position needs to be returned. STRING No No index The variable that specifies the index of the char value that needs to be returned. INT No No Examples EXAMPLE 1 charAt( WSO2 , 1) In this case, the functiion returns the character that exists at index 1. Hence, it returns 'S'.","title":"charAt (Function)"},{"location":"api/latest/#coalesce-function_1","text":"This returns the first input parameter value of the given argument, that is not null. Syntax INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT str:coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn It can have one or more input parameters in any data type. However, all the specified parameters are required to be of the same type. INT LONG DOUBLE FLOAT STRING BOOL OBJECT No No Examples EXAMPLE 1 coalesce(null, BBB , CCC ) This returns the first input parameter that is not null. In this example, it returns \"BBB\".","title":"coalesce (Function)"},{"location":"api/latest/#concat-function","text":"This function returns a string value that is obtained as a result of concatenating two or more input string values. Syntax STRING str:concat( STRING argn) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic argn This can have two or more string type input parameters. STRING No No Examples EXAMPLE 1 concat( D533 , 8JU^ , XYZ ) This returns a string value by concatenating two or more given arguments. In the example shown above, it returns \"D5338JU^XYZ\".","title":"concat (Function)"},{"location":"api/latest/#contains-function","text":"This function returns true if the input.string contains the specified sequence of char values in the search.string . Syntax BOOL str:contains( STRING input.string, STRING search.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string Input string value. STRING No No search.string The string value to be searched for in the input.string . STRING No No Examples EXAMPLE 1 contains( 21 products are produced by WSO2 currently , WSO2 ) This returns a boolean value as the output. In this case, it returns true .","title":"contains (Function)"},{"location":"api/latest/#equalsignorecase-function","text":"This returns a boolean value by comparing two strings lexicographically without considering the letter case. Syntax BOOL str:equalsIgnoreCase( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument. This is compared with the first argument. STRING No No Examples EXAMPLE 1 equalsIgnoreCase( WSO2 , wso2 ) This returns a boolean value as the output. In this scenario, it returns \"true\".","title":"equalsIgnoreCase (Function)"},{"location":"api/latest/#filltemplate-function","text":"This extension replaces the templated positions that are marked with an index value in a specified template with the strings provided. Syntax STRING str:fillTemplate( STRING template, STRING|INT|LONG|DOUBLE|FLOAT|BOOL replacement.strings) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic template The string with templated fields that needs to be filled with the given strings. The format of the templated fields should be as follows: {{INDEX}} where 'INDEX' is an integer. This index is used to map the strings that are used to replace the templated fields. STRING No No replacement.strings The strings with which the templated positions in the template need to be replaced. The minimum of two arguments need to be included in the execution string. There is no upper limit on the number of arguments allowed to be included. STRING INT LONG DOUBLE FLOAT BOOL No No Examples EXAMPLE 1 str:fillTemplate( This is {{1}} for the {{2}} function , 'an example', 'fillTemplate') In this example, the template is 'This is {{1}} for the {{2}} function'.Here, the templated string {{1}} is replaced with the 1st string value provided, which is 'an example'. {{2}} is replaced with the 2nd string provided, which is 'fillTemplate' The complete return string is 'This is an example for the fillTemplate function'.","title":"fillTemplate (Function)"},{"location":"api/latest/#hex-function","text":"This function returns a hexadecimal string by converting each byte of each character in the input string to two hexadecimal digits. Syntax STRING str:hex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the hexadecimal value. STRING No No Examples EXAMPLE 1 hex( MySQL ) This returns the hexadecimal value of the input.string. In this scenario, the output is \"4d7953514c\".","title":"hex (Function)"},{"location":"api/latest/#length-function","text":"Returns the length of the input string. Syntax INT str:length( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to derive the length. STRING No No Examples EXAMPLE 1 length( Hello World ) This outputs the length of the provided string. In this scenario, the, output is 11 .","title":"length (Function)"},{"location":"api/latest/#lower-function","text":"Converts the capital letters in the input string to the equivalent simple letters. Syntax STRING str:lower( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to convert to the lower case (i.e., equivalent simple letters). STRING No No Examples EXAMPLE 1 lower( WSO2 cep ) This converts the capital letters in the input.string to the equivalent simple letters. In this scenario, the output is \"wso2 cep \".","title":"lower (Function)"},{"location":"api/latest/#regexp-function","text":"Returns a boolean value based on the matchability of the input string and the given regular expression. Syntax BOOL str:regexp( STRING input.string, STRING regex) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to match with the given regular expression. STRING No No regex The regular expression to be matched with the input string. STRING No No Examples EXAMPLE 1 regexp( WSO2 abcdh , WSO(.*h) ) This returns a boolean value after matching regular expression with the given string. In this scenario, it returns \"true\" as the output.","title":"regexp (Function)"},{"location":"api/latest/#repeat-function","text":"Repeats the input string for a specified number of times. Syntax STRING str:repeat( STRING input.string, INT times) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that is repeated the number of times as defined by the user. STRING No No times The number of times the input.string needs to be repeated . INT No No Examples EXAMPLE 1 repeat( StRing 1 , 3) This returns a string value by repeating the string for a specified number of times. In this scenario, the output is \"StRing 1StRing 1StRing 1\".","title":"repeat (Function)"},{"location":"api/latest/#replaceall-function","text":"Finds all the substrings of the input string that matches with the given expression, and replaces them with the given replacement string. Syntax STRING str:replaceAll( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No regex The regular expression to be matched with the input string. STRING No No replacement.string The string with which each substring that matches the given expression should be replaced. STRING No No Examples EXAMPLE 1 replaceAll( hello hi hello , 'hello', 'test') This returns a string after replacing the substrings of the input string with the replacement string. In this scenario, the output is \"test hi test\" .","title":"replaceAll (Function)"},{"location":"api/latest/#replacefirst-function","text":"Finds the first substring of the input string that matches with the given regular expression, and replaces itwith the given replacement string. Syntax STRING str:replaceFirst( STRING input.string, STRING regex, STRING replacement.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be replaced. STRING No No regex The regular expression with which the input string should be matched. STRING No No replacement.string The string with which the first substring of input string that matches the regular expression should be replaced. STRING No No Examples EXAMPLE 1 replaceFirst( hello WSO2 A hello , 'WSO2(.*)A', 'XXXX') This returns a string after replacing the first substring with the given replacement string. In this scenario, the output is \"hello XXXX hello\".","title":"replaceFirst (Function)"},{"location":"api/latest/#reverse-function","text":"Returns the input string in the reverse order character-wise and string-wise. Syntax STRING str:reverse( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be reversed. STRING No No Examples EXAMPLE 1 reverse( Hello World ) This outputs a string value by reversing the incoming input.string . In this scenario, the output is \"dlroW olleH\".","title":"reverse (Function)"},{"location":"api/latest/#split-function","text":"Splits the input.string into substrings using the value parsed in the split.string and returns the substring at the position specified in the group.number . Syntax STRING str:split( STRING input.string, STRING split.string, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be replaced. STRING No No split.string The string value to be used to split the input.string . STRING No No group.number The index of the split group INT No No Examples EXAMPLE 1 split( WSO2,ABM,NSFT , , , 0) This splits the given input.string by given split.string and returns the string in the index given by group.number. In this scenario, the output will is \"WSO2\".","title":"split (Function)"},{"location":"api/latest/#strcmp-function","text":"Compares two strings lexicographically and returns an integer value. If both strings are equal, 0 is returned. If the first string is lexicographically greater than the second string, a positive value is returned. If the first string is lexicographically greater than the second string, a negative value is returned. Syntax INT str:strcmp( STRING arg1, STRING arg2) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg1 The first input string argument. STRING No No arg2 The second input string argument that should be compared with the first argument lexicographically. STRING No No Examples EXAMPLE 1 strcmp( AbCDefghiJ KLMN , 'Hello') This compares two strings lexicographically and outputs an integer value.","title":"strcmp (Function)"},{"location":"api/latest/#substr-function","text":"Returns a substring of the input string by considering a subset or all of the following factors: starting index, length, regular expression, and regex group number. Syntax STRING str:substr( STRING input.string, INT begin.index, INT length, STRING regex, INT group.number) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string to be processed. STRING No No begin.index Starting index to consider for the substring. INT No No length The length of the substring. INT No No regex The regular expression that should be matched with the input string. STRING No No group.number The regex group number INT No No Examples EXAMPLE 1 substr( AbCDefghiJ KLMN , 4) This outputs the substring based on the given begin.index . In this scenario, the output is \"efghiJ KLMN\". EXAMPLE 2 substr( AbCDefghiJ KLMN , 2, 4) This outputs the substring based on the given begin.index and length. In this scenario, the output is \"CDef\". EXAMPLE 3 substr( WSO2D efghiJ KLMN , '^WSO2(.*)') This outputs the substring by applying the regex. In this scenario, the output is \"WSO2D efghiJ KLMN\". EXAMPLE 4 substr( WSO2 cep WSO2 XX E hi hA WSO2 heAllo , 'WSO2(.*)A(.*)', 2) This outputs the substring by applying the regex and considering the group.number . In this scenario, the output is \" ello\".","title":"substr (Function)"},{"location":"api/latest/#trim-function","text":"Returns a copy of the input string without the leading and trailing whitespace (if any). Syntax STRING str:trim( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that needs to be trimmed. STRING No No Examples EXAMPLE 1 trim( AbCDefghiJ KLMN ) This returns a copy of the input.string with the leading and/or trailing white-spaces omitted. In this scenario, the output is \"AbCDefghiJ KLMN\".","title":"trim (Function)"},{"location":"api/latest/#unhex-function","text":"Returns a string by converting the hexadecimal characters in the input string. Syntax STRING str:unhex( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The hexadecimal input string that needs to be converted to string. STRING No No Examples EXAMPLE 1 unhex( 4d7953514c ) This converts the hexadecimal value to string.","title":"unhex (Function)"},{"location":"api/latest/#upper-function","text":"Converts the simple letters in the input string to the equivalent capital/block letters. Syntax STRING str:upper( STRING input.string) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string that should be converted to the upper case (equivalent capital/block letters). STRING No No Examples EXAMPLE 1 upper( Hello World ) This converts the simple letters in the input.string to theequivalent capital letters. In this scenario, the output is \"HELLO WORLD\".","title":"upper (Function)"},{"location":"api/latest/#tokenize-stream-processor","text":"This function splits the input string into tokens using a given regular expression and returns the split tokens. Syntax str:tokenize( STRING input.string, STRING regex, BOOL distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic input.string The input string which needs to be split. STRING No No regex The string value which is used to tokenize the 'input.string'. STRING No No distinct This flag is used to return only distinct values. false BOOL Yes No Extra Return Attributes Name Description Possible Types token The attribute which contains a single token. STRING Examples EXAMPLE 1 define stream inputStream (str string); @info(name = 'query1') from inputStream#str:tokenize(str , ',') select text insert into outputStream; This query performs tokenization on the given string. If the str is \"Android,Windows8,iOS\", then the string is split into 3 events containing the token attribute values, i.e., Android , Windows8 and iOS .","title":"tokenize (Stream Processor)"}]}